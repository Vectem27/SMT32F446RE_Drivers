
STM32_DriversDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060d0  080060d0  000070d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d8  080060d8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060dc  080060dc  000070dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080060e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08006148  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006148  000082c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd65  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e9  00000000  00000000  00014dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000173e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084d  00000000  00000000  00017ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002337c  00000000  00000000  00018735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8e7  00000000  00000000  0003bab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce11  00000000  00000000  0004b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001181a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  001181ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005260 	.word	0x08005260

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005260 	.word	0x08005260

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b48      	ldr	r3, [pc, #288]	@ (8000718 <MX_GPIO_Init+0x13c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a47      	ldr	r2, [pc, #284]	@ (8000718 <MX_GPIO_Init+0x13c>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b41      	ldr	r3, [pc, #260]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b3e      	ldr	r3, [pc, #248]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b3a      	ldr	r3, [pc, #232]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a39      	ldr	r2, [pc, #228]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <MX_GPIO_Init+0x13c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <MX_GPIO_Init+0x13c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <MX_GPIO_Init+0x13c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|LCD_RESET_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2190      	movs	r1, #144	@ 0x90
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <MX_GPIO_Init+0x140>)
 8000668:	f001 ff6e 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000672:	482b      	ldr	r0, [pc, #172]	@ (8000720 <MX_GPIO_Init+0x144>)
 8000674:	f001 ff68 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	@ 0x40
 800067c:	4829      	ldr	r0, [pc, #164]	@ (8000724 <MX_GPIO_Init+0x148>)
 800067e:	f001 ff63 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000688:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4820      	ldr	r0, [pc, #128]	@ (800071c <MX_GPIO_Init+0x140>)
 800069a:	f001 fdc1 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <MX_GPIO_Init+0x140>)
 80006b6:	f001 fdb3 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_GPIO_Init+0x140>)
 80006d2:	f001 fda5 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80006d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	@ (8000720 <MX_GPIO_Init+0x144>)
 80006f0:	f001 fd96 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <MX_GPIO_Init+0x148>)
 800070c:	f001 fd88 	bl	8002220 <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020800 	.word	0x40020800
 8000720:	40020000 	.word	0x40020000
 8000724:	40020400 	.word	0x40020400

08000728 <ili9341_delay>:

#define LCD_CMD   0
#define LCD_DATA  1

static void ili9341_delay(unsigned int time)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    for (unsigned int i = 0; i < time; i++)
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	e00c      	b.n	8000750 <ili9341_delay+0x28>
    {
        for (volatile unsigned int j = 0; j < 2000; j++)
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	e002      	b.n	8000742 <ili9341_delay+0x1a>
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	3301      	adds	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000748:	d3f8      	bcc.n	800073c <ili9341_delay+0x14>
    for (unsigned int i = 0; i < time; i++)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3ee      	bcc.n	8000736 <ili9341_delay+0xe>
            ;
    }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <ili9341_send>:

// SPI write data or command to LCD (bit-banging)
void ili9341_send(LCD_Handle *LcdHandle, int dc, uint8_t value)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	4613      	mov	r3, r2
 8000772:	71fb      	strb	r3, [r7, #7]

    // DC (Command = 0, Data = 1)
    if (dc == 0)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <ili9341_send+0x28>
    {
        HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin,
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6998      	ldr	r0, [r3, #24]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	b29b      	uxth	r3, r3
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	f001 fede 	bl	8002548 <HAL_GPIO_WritePin>
 800078c:	e008      	b.n	80007a0 <ili9341_send+0x3a>
                GPIO_PIN_RESET); // Cmd
    }
    else
    {
        HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin,
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6998      	ldr	r0, [r3, #24]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	b29b      	uxth	r3, r3
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	f001 fed4 	bl	8002548 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);   // Data
    }

    // CS Low
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin,
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6898      	ldr	r0, [r3, #8]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f001 fecb 	bl	8002548 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    // Send 1 byte via SPI hardware
    HAL_SPI_Transmit(LcdHandle->Init.hspi, &value, 1, HAL_MAX_DELAY);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	2201      	movs	r2, #1
 80007be:	f002 fd4e 	bl	800325e <HAL_SPI_Transmit>

    // CS High
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin,
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6898      	ldr	r0, [r3, #8]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 feba 	bl	8002548 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <ili9341_reset>:

void ili9341_reset(LCD_Handle *LcdHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LcdHandle->Init.RESET_Port, LcdHandle->Init.RESET_Pin,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6918      	ldr	r0, [r3, #16]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	f001 fea9 	bl	8002548 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET); // 0
    HAL_GPIO_WritePin(LcdHandle->Init.RESET_Port, LcdHandle->Init.RESET_Pin,
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6918      	ldr	r0, [r3, #16]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	f001 fea0 	bl	8002548 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);   // 1
    HAL_Delay(5);
 8000808:	2005      	movs	r0, #5
 800080a:	f001 fbff 	bl	800200c <HAL_Delay>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <ili9341_init>:

void ili9341_init(LCD_Handle *LcdHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

    LcdHandle->width = 320;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000826:	841a      	strh	r2, [r3, #32]
    LcdHandle->height = 240;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	22f0      	movs	r2, #240	@ 0xf0
 800082c:	845a      	strh	r2, [r3, #34]	@ 0x22
    LcdHandle->Clear = ili9341_clear;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4acf      	ldr	r2, [pc, #828]	@ (8000b70 <ili9341_init+0x358>)
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
    LcdHandle->DrawPixelAt = ili9341_draw_pixel_at;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4acf      	ldr	r2, [pc, #828]	@ (8000b74 <ili9341_init+0x35c>)
 8000838:	629a      	str	r2, [r3, #40]	@ 0x28
    LcdHandle->PrintChar = ili9341_putchar;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4ace      	ldr	r2, [pc, #824]	@ (8000b78 <ili9341_init+0x360>)
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
    LcdHandle->PrintString = ili9341_putstring;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4ace      	ldr	r2, [pc, #824]	@ (8000b7c <ili9341_init+0x364>)
 8000844:	631a      	str	r2, [r3, #48]	@ 0x30
    LcdHandle->PrintNumber = ili9341_putnumber;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4acd      	ldr	r2, [pc, #820]	@ (8000b80 <ili9341_init+0x368>)
 800084a:	635a      	str	r2, [r3, #52]	@ 0x34

    ili9341_reset(LcdHandle);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffc5 	bl	80007dc <ili9341_reset>

    ili9341_send(LcdHandle, LCD_CMD, 0xCB);
 8000852:	22cb      	movs	r2, #203	@ 0xcb
 8000854:	2100      	movs	r1, #0
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff85 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x39);
 800085c:	2239      	movs	r2, #57	@ 0x39
 800085e:	2101      	movs	r1, #1
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff80 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x2C);
 8000866:	222c      	movs	r2, #44	@ 0x2c
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff7b 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff76 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x34);
 800087a:	2234      	movs	r2, #52	@ 0x34
 800087c:	2101      	movs	r1, #1
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff71 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x02);
 8000884:	2202      	movs	r2, #2
 8000886:	2101      	movs	r1, #1
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff6c 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xCF);
 800088e:	22cf      	movs	r2, #207	@ 0xcf
 8000890:	2100      	movs	r1, #0
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff67 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff62 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0XC1);
 80008a2:	22c1      	movs	r2, #193	@ 0xc1
 80008a4:	2101      	movs	r1, #1
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff5d 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X30);
 80008ac:	2230      	movs	r2, #48	@ 0x30
 80008ae:	2101      	movs	r1, #1
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff58 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE8);
 80008b6:	22e8      	movs	r2, #232	@ 0xe8
 80008b8:	2100      	movs	r1, #0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff53 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x85);
 80008c0:	2285      	movs	r2, #133	@ 0x85
 80008c2:	2101      	movs	r1, #1
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff4e 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff49 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x78);
 80008d4:	2278      	movs	r2, #120	@ 0x78
 80008d6:	2101      	movs	r1, #1
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff44 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xEA);
 80008de:	22ea      	movs	r2, #234	@ 0xea
 80008e0:	2100      	movs	r1, #0
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff3f 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff3a 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ff35 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xED);
 80008fc:	22ed      	movs	r2, #237	@ 0xed
 80008fe:	2100      	movs	r1, #0
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff30 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x64);
 8000906:	2264      	movs	r2, #100	@ 0x64
 8000908:	2101      	movs	r1, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff2b 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 8000910:	2203      	movs	r2, #3
 8000912:	2101      	movs	r1, #1
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff26 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X12);
 800091a:	2212      	movs	r2, #18
 800091c:	2101      	movs	r1, #1
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff21 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X81);
 8000924:	2281      	movs	r2, #129	@ 0x81
 8000926:	2101      	movs	r1, #1
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff1c 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xF7);
 800092e:	22f7      	movs	r2, #247	@ 0xf7
 8000930:	2100      	movs	r1, #0
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ff17 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x20);
 8000938:	2220      	movs	r2, #32
 800093a:	2101      	movs	r1, #1
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff12 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC0); // Power control
 8000942:	22c0      	movs	r2, #192	@ 0xc0
 8000944:	2100      	movs	r1, #0
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff0d 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x23); // VRH[5:0]
 800094c:	2223      	movs	r2, #35	@ 0x23
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff08 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC1); // Power control
 8000956:	22c1      	movs	r2, #193	@ 0xc1
 8000958:	2100      	movs	r1, #0
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff03 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x10); // SAP[2:0];BT[3:0]
 8000960:	2210      	movs	r2, #16
 8000962:	2101      	movs	r1, #1
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fefe 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC5); // VCM control
 800096a:	22c5      	movs	r2, #197	@ 0xc5
 800096c:	2100      	movs	r1, #0
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fef9 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x3e);
 8000974:	223e      	movs	r2, #62	@ 0x3e
 8000976:	2101      	movs	r1, #1
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fef4 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x28);
 800097e:	2228      	movs	r2, #40	@ 0x28
 8000980:	2101      	movs	r1, #1
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff feef 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC7); // VCM control2
 8000988:	22c7      	movs	r2, #199	@ 0xc7
 800098a:	2100      	movs	r1, #0
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff feea 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x86);
 8000992:	2286      	movs	r2, #134	@ 0x86
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fee5 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x36); // Memory Access Control
 800099c:	2236      	movs	r2, #54	@ 0x36
 800099e:	2100      	movs	r1, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fee0 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x88); // C8
 80009a6:	2288      	movs	r2, #136	@ 0x88
 80009a8:	2101      	movs	r1, #1
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fedb 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x3A);
 80009b0:	223a      	movs	r2, #58	@ 0x3a
 80009b2:	2100      	movs	r1, #0
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fed6 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x55);
 80009ba:	2255      	movs	r2, #85	@ 0x55
 80009bc:	2101      	movs	r1, #1
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fed1 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xB1);
 80009c4:	22b1      	movs	r2, #177	@ 0xb1
 80009c6:	2100      	movs	r1, #0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fecc 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fec7 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x18);
 80009d8:	2218      	movs	r2, #24
 80009da:	2101      	movs	r1, #1
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fec2 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xB6); // Display Function Control
 80009e2:	22b6      	movs	r2, #182	@ 0xb6
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff febd 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 80009ec:	2208      	movs	r2, #8
 80009ee:	2101      	movs	r1, #1
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff feb8 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x82);
 80009f6:	2282      	movs	r2, #130	@ 0x82
 80009f8:	2101      	movs	r1, #1
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff feb3 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x27);
 8000a00:	2227      	movs	r2, #39	@ 0x27
 8000a02:	2101      	movs	r1, #1
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff feae 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xF2); // 3Gamma Function Disable
 8000a0a:	22f2      	movs	r2, #242	@ 0xf2
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fea9 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2101      	movs	r1, #1
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fea4 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x26); // Gamma curve selected
 8000a1e:	2226      	movs	r2, #38	@ 0x26
 8000a20:	2100      	movs	r1, #0
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fe9f 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x01);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fe9a 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE0); // Set Gamma
 8000a32:	22e0      	movs	r2, #224	@ 0xe0
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fe95 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	2101      	movs	r1, #1
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fe90 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 8000a46:	2231      	movs	r2, #49	@ 0x31
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe8b 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x2B);
 8000a50:	222b      	movs	r2, #43	@ 0x2b
 8000a52:	2101      	movs	r1, #1
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fe86 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0C);
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe81 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 8000a64:	220e      	movs	r2, #14
 8000a66:	2101      	movs	r1, #1
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe7c 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 8000a6e:	2208      	movs	r2, #8
 8000a70:	2101      	movs	r1, #1
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fe77 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x4E);
 8000a78:	224e      	movs	r2, #78	@ 0x4e
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fe72 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0xF1);
 8000a82:	22f1      	movs	r2, #241	@ 0xf1
 8000a84:	2101      	movs	r1, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fe6d 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x37);
 8000a8c:	2237      	movs	r2, #55	@ 0x37
 8000a8e:	2101      	movs	r1, #1
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff fe68 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x07);
 8000a96:	2207      	movs	r2, #7
 8000a98:	2101      	movs	r1, #1
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fe63 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x10);
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fe5e 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 8000aaa:	2203      	movs	r2, #3
 8000aac:	2101      	movs	r1, #1
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe59 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 8000ab4:	220e      	movs	r2, #14
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fe54 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x09);
 8000abe:	2209      	movs	r2, #9
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fe4f 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fe4a 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE1); // Set Gamma
 8000ad2:	22e1      	movs	r2, #225	@ 0xe1
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe45 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fe40 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 8000ae6:	220e      	movs	r2, #14
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fe3b 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x14);
 8000af0:	2214      	movs	r2, #20
 8000af2:	2101      	movs	r1, #1
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fe36 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 8000afa:	2203      	movs	r2, #3
 8000afc:	2101      	movs	r1, #1
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe31 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x11);
 8000b04:	2211      	movs	r2, #17
 8000b06:	2101      	movs	r1, #1
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fe2c 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x07);
 8000b0e:	2207      	movs	r2, #7
 8000b10:	2101      	movs	r1, #1
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fe27 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 8000b18:	2231      	movs	r2, #49	@ 0x31
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fe22 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0xC1);
 8000b22:	22c1      	movs	r2, #193	@ 0xc1
 8000b24:	2101      	movs	r1, #1
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fe1d 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x48);
 8000b2c:	2248      	movs	r2, #72	@ 0x48
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe18 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 8000b36:	2208      	movs	r2, #8
 8000b38:	2101      	movs	r1, #1
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fe13 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 8000b40:	220f      	movs	r2, #15
 8000b42:	2101      	movs	r1, #1
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe0e 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0C);
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fe09 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 8000b54:	2231      	movs	r2, #49	@ 0x31
 8000b56:	2101      	movs	r1, #1
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fe04 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x36);
 8000b5e:	2236      	movs	r2, #54	@ 0x36
 8000b60:	2101      	movs	r1, #1
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fdff 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 8000b68:	220f      	movs	r2, #15
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	e00a      	b.n	8000b84 <ili9341_init+0x36c>
 8000b6e:	bf00      	nop
 8000b70:	08000c97 	.word	0x08000c97
 8000b74:	08000c6d 	.word	0x08000c6d
 8000b78:	08000dd9 	.word	0x08000dd9
 8000b7c:	08000ed5 	.word	0x08000ed5
 8000b80:	08000f3d 	.word	0x08000f3d
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fdee 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x11); // Sleep out
 8000b8a:	2211      	movs	r2, #17
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fde9 	bl	8000766 <ili9341_send>
    ili9341_delay(120);
 8000b94:	2078      	movs	r0, #120	@ 0x78
 8000b96:	f7ff fdc7 	bl	8000728 <ili9341_delay>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000b9a:	222c      	movs	r2, #44	@ 0x2c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fde1 	bl	8000766 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x29); // Display on
 8000ba4:	2229      	movs	r2, #41	@ 0x29
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fddc 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000bae:	222c      	movs	r2, #44	@ 0x2c
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fdd7 	bl	8000766 <ili9341_send>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <ili9341_set_xy>:

void ili9341_set_xy(LCD_Handle *LcdHandle, int x, int y)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
    //X
    ili9341_send(LcdHandle, LCD_CMD, 0x2B);
 8000bcc:	222b      	movs	r2, #43	@ 0x2b
 8000bce:	2100      	movs	r1, #0
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fdc8 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, x >> 8);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2101      	movs	r1, #1
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f7ff fdc0 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, x & 0xFF);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	2101      	movs	r1, #1
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fdb9 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000bf4:	222c      	movs	r2, #44	@ 0x2c
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fdb4 	bl	8000766 <ili9341_send>

    //Y
    ili9341_send(LcdHandle, LCD_CMD, 0x2A);
 8000bfe:	222a      	movs	r2, #42	@ 0x2a
 8000c00:	2100      	movs	r1, #0
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fdaf 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, y >> 8);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	121b      	asrs	r3, r3, #8
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2101      	movs	r1, #1
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fda7 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, y & 0xFF);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2101      	movs	r1, #1
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fda0 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000c26:	222c      	movs	r2, #44	@ 0x2c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fd9b 	bl	8000766 <ili9341_send>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <ili9341_draw_pixel>:

void ili9341_draw_pixel(LCD_Handle *LcdHandle, uint16_t color)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
    ili9341_send(LcdHandle, LCD_DATA, color >> 8);
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2101      	movs	r1, #1
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fd88 	bl	8000766 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, color & 0xFF);
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fd81 	bl	8000766 <ili9341_send>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ili9341_draw_pixel_at>:

void ili9341_draw_pixel_at(LCD_Handle *LcdHandle,int x, int y , uint16_t color)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	807b      	strh	r3, [r7, #2]
    ili9341_set_xy(LcdHandle, x, y);
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ff9e 	bl	8000bc0 <ili9341_set_xy>
    ili9341_draw_pixel(LcdHandle, color);
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4619      	mov	r1, r3
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff ffd5 	bl	8000c38 <ili9341_draw_pixel>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <ili9341_clear>:


void ili9341_clear(LCD_Handle *LcdHandle)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    ili9341_fill_screen(LcdHandle, LcdHandle->Init.bg_color);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	8b9b      	ldrh	r3, [r3, #28]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f804 	bl	8000cb2 <ili9341_fill_screen>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <ili9341_fill_screen>:

void ili9341_fill_screen(LCD_Handle *LcdHandle, uint16_t color)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b0fc      	sub	sp, #496	@ 0x1f0
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cbc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cc8:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000ccc:	801a      	strh	r2, [r3, #0]

    ili9341_set_xy(LcdHandle, 0, 0);
 8000cce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cd2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	f7ff ff70 	bl	8000bc0 <ili9341_set_xy>

    HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin, GPIO_PIN_SET); // Write data
 8000ce0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ce4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6998      	ldr	r0, [r3, #24]
 8000cec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cf0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f001 fc23 	bl	8002548 <HAL_GPIO_WritePin>

    // CS Low
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin, GPIO_PIN_RESET);
 8000d02:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6898      	ldr	r0, [r3, #8]
 8000d0e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d12:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f001 fc12 	bl	8002548 <HAL_GPIO_WritePin>

    uint16_t lineBuffer[240]; // Une ligne de pixels (240 pour ILI9341)
    for (int i = 0; i < 240; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8000d2a:	e01f      	b.n	8000d6c <ili9341_fill_screen+0xba>
        lineBuffer[i] = (color >> 8) | (color << 8); // Convertir en Big Endian pour SPI
 8000d2c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d30:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d40:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	b299      	uxth	r1, r3
 8000d52:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d56:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8000d5a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000d5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < 240; i++)
 8000d62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d66:	3301      	adds	r3, #1
 8000d68:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8000d6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d70:	2bef      	cmp	r3, #239	@ 0xef
 8000d72:	dddb      	ble.n	8000d2c <ili9341_fill_screen+0x7a>

    for (int y = 0; y < 320; y++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d7a:	e012      	b.n	8000da2 <ili9341_fill_screen+0xf0>
        HAL_SPI_Transmit(LcdHandle->Init.hspi, (uint8_t*) lineBuffer, sizeof(lineBuffer),
 8000d7c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d80:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	f107 0108 	add.w	r1, r7, #8
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000d94:	f002 fa63 	bl	800325e <HAL_SPI_Transmit>
    for (int y = 0; y < 320; y++)
 8000d98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000da2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000da6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000daa:	dbe7      	blt.n	8000d7c <ili9341_fill_screen+0xca>
                HAL_MAX_DELAY);

    // CS High
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin, GPIO_PIN_SET);
 8000dac:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000db0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6898      	ldr	r0, [r3, #8]
 8000db8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000dbc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f001 fbbd 	bl	8002548 <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <ili9341_putchar>:

// Write character from font set to destination on screen
void ili9341_putchar(LCD_Handle *LcdHandle, int x, int y, int c, int size, int fcolor, int bcolor)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
    int x0;
    int t0, t1, t2, t3, u;

    y = LcdHandle->height - y - FONTHEIGHT;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	3b10      	subs	r3, #16
 8000df2:	607b      	str	r3, [r7, #4]

    x0 = x;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (t0 = 0; t0 < FONTWIDTH * 2; t0 += 2)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	e05f      	b.n	8000ebe <ili9341_putchar+0xe6>
    {
        for (t1 = 0; t1 < size; t1++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e055      	b.n	8000eb0 <ili9341_putchar+0xd8>
        {
            u = xchar[c][t0 + 1] + (xchar[c][t0] << 8);
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	1c59      	adds	r1, r3, #1
 8000e08:	4831      	ldr	r0, [pc, #196]	@ (8000ed0 <ili9341_putchar+0xf8>)
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4403      	add	r3, r0
 8000e16:	440b      	add	r3, r1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	492c      	ldr	r1, [pc, #176]	@ (8000ed0 <ili9341_putchar+0xf8>)
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	18ca      	adds	r2, r1, r3
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4403      	add	r3, r0
 8000e34:	613b      	str	r3, [r7, #16]
            ili9341_set_xy(LcdHandle, x0, y);
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff fec0 	bl	8000bc0 <ili9341_set_xy>
            for (t2 = 16; t2 >= 0; t2--)
 8000e40:	2310      	movs	r3, #16
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	e02b      	b.n	8000e9e <ili9341_putchar+0xc6>
            {
                if (u & (1 << t2))
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa42 f303 	asr.w	r3, r2, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d010      	beq.n	8000e78 <ili9341_putchar+0xa0>
                {
                    for (t3 = 0; t3 < size; t3++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e008      	b.n	8000e6e <ili9341_putchar+0x96>
                    {
                        ili9341_draw_pixel(LcdHandle, fcolor);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff fee8 	bl	8000c38 <ili9341_draw_pixel>
                    for (t3 = 0; t3 < size; t3++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf2      	blt.n	8000e5c <ili9341_putchar+0x84>
 8000e76:	e00f      	b.n	8000e98 <ili9341_putchar+0xc0>
                    }
                }
                else
                {
                    for (t3 = 0; t3 < size; t3++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e008      	b.n	8000e90 <ili9341_putchar+0xb8>
                    {
                        ili9341_draw_pixel(LcdHandle, bcolor);
 8000e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f7ff fed7 	bl	8000c38 <ili9341_draw_pixel>
                    for (t3 = 0; t3 < size; t3++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf2      	blt.n	8000e7e <ili9341_putchar+0xa6>
            for (t2 = 16; t2 >= 0; t2--)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dad0      	bge.n	8000e46 <ili9341_putchar+0x6e>
                    }
                }
            }
            x0++;
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
        for (t1 = 0; t1 < size; t1++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dba5      	blt.n	8000e04 <ili9341_putchar+0x2c>
    for (t0 = 0; t0 < FONTWIDTH * 2; t0 += 2)
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	3302      	adds	r3, #2
 8000ebc:	623b      	str	r3, [r7, #32]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	2b17      	cmp	r3, #23
 8000ec2:	dd9c      	ble.n	8000dfe <ili9341_putchar+0x26>
        }
    }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	@ 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800546c 	.word	0x0800546c

08000ed4 <ili9341_putstring>:

//Print String to LCD
void ili9341_putstring(LCD_Handle *LcdHandle, int x, int y, char *text, int size, int fc, int bc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
    int t1 = 0, x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

    x0 = x;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
    while (text[t1])
 8000eea:	e01c      	b.n	8000f26 <ili9341_putstring+0x52>
    {
        ili9341_putchar(LcdHandle, x0, y, text[t1], size, fc, bc);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff65 	bl	8000dd8 <ili9341_putchar>
        x0 += (size * FONTWIDTH);
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        t1++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
    while (text[t1])
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1dc      	bne.n	8000eec <ili9341_putstring+0x18>
    }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ili9341_putnumber>:


void ili9341_putnumber(LCD_Handle *LcdHandle, int x, int y, long num, int dec, int lsize, int fc, int bc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
    char *s = (char*) malloc(16);
 8000f4a:	2010      	movs	r0, #16
 8000f4c:	f003 f814 	bl	8003f78 <malloc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	617b      	str	r3, [r7, #20]
    if (s != NULL)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d015      	beq.n	8000f86 <ili9341_putnumber+0x4a>
    {
        int2asc(num, dec, s, 16);
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6a39      	ldr	r1, [r7, #32]
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f000 f823 	bl	8000fac <int2asc>
        ili9341_putstring(LcdHandle, x, y, s, lsize, fc, bc);
 8000f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ffab 	bl	8000ed4 <ili9341_putstring>
        free(s);
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f003 f802 	bl	8003f88 <free>
    }
    else
    {
        ili9341_putstring(LcdHandle, x, y, (char*) "Error", lsize, fc, bc);
    }
}
 8000f84:	e00b      	b.n	8000f9e <ili9341_putnumber+0x62>
        ili9341_putstring(LcdHandle, x, y, (char*) "Error", lsize, fc, bc);
 8000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <ili9341_putnumber+0x6c>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff ff9b 	bl	8000ed4 <ili9341_putstring>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08005278 	.word	0x08005278

08000fac <int2asc>:
//////////////////////
// STRING FUNCTIONS //
//////////////////////

int int2asc(long num, int dec, char *buf, int buflen)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b08b      	sub	sp, #44	@ 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
    int i, c, xp = 0, neg = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    long n, dd = 1E09;
 8000fc2:	4b51      	ldr	r3, [pc, #324]	@ (8001108 <int2asc+0x15c>)
 8000fc4:	613b      	str	r3, [r7, #16]

    if (!num)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <int2asc+0x34>
    {
        *buf++ = '0';
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	701a      	strb	r2, [r3, #0]
        *buf = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
        return 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e08c      	b.n	80010fa <int2asc+0x14e>
    }

    if (num < 0)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da05      	bge.n	8000ff2 <int2asc+0x46>
    {
        neg = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
        n = num * -1;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	425b      	negs	r3, r3
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e001      	b.n	8000ff6 <int2asc+0x4a>
    }
    else
    {
        n = num;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	617b      	str	r3, [r7, #20]
    }

    //Fill buffer with \0
    for (i = 0; i < buflen; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffa:	e007      	b.n	800100c <int2asc+0x60>
    {
        *(buf + i) = 0;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buflen; i++)
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
 800100c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf3      	blt.n	8000ffc <int2asc+0x50>
    }

    c = 9; //Max. number of displayable digits
 8001014:	2309      	movs	r3, #9
 8001016:	623b      	str	r3, [r7, #32]
    while (dd)
 8001018:	e033      	b.n	8001082 <int2asc+0xd6>
    {
        i = n / dd;
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
        n = n - i * dd;
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]

        *(buf + 9 - c + xp) = i + 48;
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	b2da      	uxtb	r2, r3
 8001036:	69f9      	ldr	r1, [r7, #28]
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	1acb      	subs	r3, r1, r3
 800103c:	3309      	adds	r3, #9
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	440b      	add	r3, r1
 8001042:	3230      	adds	r2, #48	@ 0x30
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
        dd /= 10;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4a30      	ldr	r2, [pc, #192]	@ (800110c <int2asc+0x160>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1092      	asrs	r2, r2, #2
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	613b      	str	r3, [r7, #16]
        if (c == dec && dec)
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	d10d      	bne.n	800107c <int2asc+0xd0>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <int2asc+0xd0>
        {
            *(buf + 9 - c + ++xp) = '.';
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	3309      	adds	r3, #9
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	222e      	movs	r2, #46	@ 0x2e
 800107a:	701a      	strb	r2, [r3, #0]
        }
        c--;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3b01      	subs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
    while (dd)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1c8      	bne.n	800101a <int2asc+0x6e>
    }

    //Search for 1st char different from '0'
    i = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (*(buf + i) == 48)
 800108c:	e007      	b.n	800109e <int2asc+0xf2>
    {
        *(buf + i++) = 32;
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	627a      	str	r2, [r7, #36]	@ 0x24
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	2220      	movs	r2, #32
 800109c:	701a      	strb	r2, [r3, #0]
    while (*(buf + i) == 48)
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b30      	cmp	r3, #48	@ 0x30
 80010a8:	d0f1      	beq.n	800108e <int2asc+0xe2>
    }

    //Add minus-sign if neccessary
    if (neg)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <int2asc+0x114>
    {
        *(buf + --i) = '-';
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	3b01      	subs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	222d      	movs	r2, #45	@ 0x2d
 80010be:	701a      	strb	r2, [r3, #0]
    }

    //Eleminate leading spaces
    c = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
    while (*(buf + i))
 80010c4:	e00d      	b.n	80010e2 <int2asc+0x136>
    {
        *(buf + c++) = *(buf + i++);
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	441a      	add	r2, r3
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	6239      	str	r1, [r7, #32]
 80010d8:	4619      	mov	r1, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	440b      	add	r3, r1
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	701a      	strb	r2, [r3, #0]
    while (*(buf + i))
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1eb      	bne.n	80010c6 <int2asc+0x11a>
    }
    *(buf + c) = 0;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

    return c;
 80010f8:	6a3b      	ldr	r3, [r7, #32]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	372c      	adds	r7, #44	@ 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	3b9aca00 	.word	0x3b9aca00
 800110c:	66666667 	.word	0x66666667

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 ff07 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f819 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f7ff fa5d 	bl	80005dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001122:	f000 fccb 	bl	8001abc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001126:	f000 fe63 	bl	8001df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    Init();
 800112a:	f000 f885 	bl	8001238 <Init>
    uint32_t last_tick = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        uint32_t current_tick = HAL_GetTick(); // ms
 8001132:	f000 ff5f 	bl	8001ff4 <HAL_GetTick>
 8001136:	60b8      	str	r0, [r7, #8]
        uint32_t delta_ms = current_tick - last_tick;
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	607b      	str	r3, [r7, #4]

        last_tick = current_tick;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60fb      	str	r3, [r7, #12]
        Loop(delta_ms);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f97b 	bl	8001440 <Loop>
    {
 800114a:	bf00      	nop
 800114c:	e7f1      	b.n	8001132 <main+0x22>
	...

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	@ 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2234      	movs	r2, #52	@ 0x34
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 f9f4 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <SystemClock_Config+0xd4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	4a29      	ldr	r2, [pc, #164]	@ (8001224 <SystemClock_Config+0xd4>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	@ 0x40
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <SystemClock_Config+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800119c:	4a22      	ldr	r2, [pc, #136]	@ (8001228 <SystemClock_Config+0xd8>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <SystemClock_Config+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c4:	2310      	movs	r3, #16
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fd16 	bl	8002c10 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ea:	f000 f81f 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 f9b6 	bl	800257c <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001216:	f000 f809 	bl	800122c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	@ 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <Init>:

LCD_Handle hlcd;
SD_SPI_Handle hsd;

void Init(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 800123e:	af04      	add	r7, sp, #16
    uint8_t row = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

    /* Lcd screen init */
    {
        hlcd.Init.hspi = &hspi1;
 8001246:	4b74      	ldr	r3, [pc, #464]	@ (8001418 <Init+0x1e0>)
 8001248:	4a74      	ldr	r2, [pc, #464]	@ (800141c <Init+0x1e4>)
 800124a:	601a      	str	r2, [r3, #0]
        hlcd.Init.CS_Pin = LCD_CS_Pin;
 800124c:	4b72      	ldr	r3, [pc, #456]	@ (8001418 <Init+0x1e0>)
 800124e:	2240      	movs	r2, #64	@ 0x40
 8001250:	605a      	str	r2, [r3, #4]
        hlcd.Init.CS_Port = LCD_CS_GPIO_Port;
 8001252:	4b71      	ldr	r3, [pc, #452]	@ (8001418 <Init+0x1e0>)
 8001254:	4a72      	ldr	r2, [pc, #456]	@ (8001420 <Init+0x1e8>)
 8001256:	609a      	str	r2, [r3, #8]
        hlcd.Init.DC_Pin = LCD_DC_Pin;
 8001258:	4b6f      	ldr	r3, [pc, #444]	@ (8001418 <Init+0x1e0>)
 800125a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125e:	615a      	str	r2, [r3, #20]
        hlcd.Init.DC_Port = LCD_DC_GPIO_Port;
 8001260:	4b6d      	ldr	r3, [pc, #436]	@ (8001418 <Init+0x1e0>)
 8001262:	4a70      	ldr	r2, [pc, #448]	@ (8001424 <Init+0x1ec>)
 8001264:	619a      	str	r2, [r3, #24]
        hlcd.Init.RESET_Pin = LCD_RESET_Pin;
 8001266:	4b6c      	ldr	r3, [pc, #432]	@ (8001418 <Init+0x1e0>)
 8001268:	2280      	movs	r2, #128	@ 0x80
 800126a:	60da      	str	r2, [r3, #12]
        hlcd.Init.RESET_Port = LCD_RESET_GPIO_Port;
 800126c:	4b6a      	ldr	r3, [pc, #424]	@ (8001418 <Init+0x1e0>)
 800126e:	4a6e      	ldr	r2, [pc, #440]	@ (8001428 <Init+0x1f0>)
 8001270:	611a      	str	r2, [r3, #16]
        hlcd.Init.bg_color = BLACK;
 8001272:	4b69      	ldr	r3, [pc, #420]	@ (8001418 <Init+0x1e0>)
 8001274:	2200      	movs	r2, #0
 8001276:	839a      	strh	r2, [r3, #28]

        ili9341_init(&hlcd);
 8001278:	4867      	ldr	r0, [pc, #412]	@ (8001418 <Init+0x1e0>)
 800127a:	f7ff facd 	bl	8000818 <ili9341_init>

        hlcd.Clear(&hlcd);
 800127e:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <Init+0x1e0>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	4865      	ldr	r0, [pc, #404]	@ (8001418 <Init+0x1e0>)
 8001284:	4798      	blx	r3
        hlcd.PrintString(&hlcd, 0, 20 * row++, "Hello World!", 1, WHITE, hlcd.Init.bg_color);
 8001286:	4b64      	ldr	r3, [pc, #400]	@ (8001418 <Init+0x1e0>)
 8001288:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800128a:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	f887 2227 	strb.w	r2, [r7, #551]	@ 0x227
 8001294:	461a      	mov	r2, r3
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	461a      	mov	r2, r3
 80012a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001418 <Init+0x1e0>)
 80012a2:	8b9b      	ldrh	r3, [r3, #28]
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b5e      	ldr	r3, [pc, #376]	@ (800142c <Init+0x1f4>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4858      	ldr	r0, [pc, #352]	@ (8001418 <Init+0x1e0>)
 80012b6:	47a0      	blx	r4
    }

    /* Sd card init */
    {
        hsd.init.hspi = &hspi1;
 80012b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <Init+0x1f8>)
 80012ba:	4a58      	ldr	r2, [pc, #352]	@ (800141c <Init+0x1e4>)
 80012bc:	601a      	str	r2, [r3, #0]
        hsd.init.CS_Pin = SD_CS_Pin;
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <Init+0x1f8>)
 80012c0:	2210      	movs	r2, #16
 80012c2:	605a      	str	r2, [r3, #4]
        hsd.init.CS_Port = SD_CS_GPIO_Port;
 80012c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001430 <Init+0x1f8>)
 80012c6:	4a58      	ldr	r2, [pc, #352]	@ (8001428 <Init+0x1f0>)
 80012c8:	609a      	str	r2, [r3, #8]

        SD_Error res = SD_Init(&hsd);
 80012ca:	4859      	ldr	r0, [pc, #356]	@ (8001430 <Init+0x1f8>)
 80012cc:	f000 fb51 	bl	8001972 <SD_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
        if (res != SD_RESPONSE_NO_ERROR)
 80012d6:	f897 3226 	ldrb.w	r3, [r7, #550]	@ 0x226
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d023      	beq.n	8001326 <Init+0xee>
        {
            char str[32];
            sprintf(str, "Failed to init SD : 0x%x", res);
 80012de:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	4953      	ldr	r1, [pc, #332]	@ (8001434 <Init+0x1fc>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 f835 	bl	8004358 <siprintf>

            hlcd.PrintString(&hlcd, 0, 20 * row++, str, 1, WHITE, hlcd.Init.bg_color);
 80012ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001418 <Init+0x1e0>)
 80012f0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80012f2:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	f887 2227 	strb.w	r2, [r7, #551]	@ 0x227
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4619      	mov	r1, r3
 8001308:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <Init+0x1e0>)
 800130a:	8b9b      	ldrh	r3, [r3, #28]
 800130c:	461a      	mov	r2, r3
 800130e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001312:	9202      	str	r2, [sp, #8]
 8001314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	9200      	str	r2, [sp, #0]
 800131e:	460a      	mov	r2, r1
 8001320:	2100      	movs	r1, #0
 8001322:	483d      	ldr	r0, [pc, #244]	@ (8001418 <Init+0x1e0>)
 8001324:	47a0      	blx	r4
        }


        uint8_t buffer[512];
        memset(buffer, 0x00, 512);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f003 f90b 	bl	800454c <memset>
        res = SD_SectorRead(&hsd, 0x00, buffer);
 8001336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133a:	461a      	mov	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	483c      	ldr	r0, [pc, #240]	@ (8001430 <Init+0x1f8>)
 8001340:	f000 fb76 	bl	8001a30 <SD_SectorRead>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
        if (res != SD_RESPONSE_NO_ERROR)
 800134a:	f897 3226 	ldrb.w	r3, [r7, #550]	@ 0x226
 800134e:	2b00      	cmp	r3, #0
 8001350:	d022      	beq.n	8001398 <Init+0x160>
        {
            char str[32];
            sprintf(str, "Failed to read SD : 0x%x", res);
 8001352:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4937      	ldr	r1, [pc, #220]	@ (8001438 <Init+0x200>)
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fffc 	bl	8004358 <siprintf>

            hlcd.PrintString(&hlcd, 0, 20 * row++, str, 1, WHITE, hlcd.Init.bg_color);
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <Init+0x1e0>)
 8001362:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001364:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	f887 2227 	strb.w	r2, [r7, #551]	@ 0x227
 800136e:	461a      	mov	r2, r3
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4619      	mov	r1, r3
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <Init+0x1e0>)
 800137c:	8b9b      	ldrh	r3, [r3, #28]
 800137e:	461a      	mov	r2, r3
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	9202      	str	r2, [sp, #8]
 8001384:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	9200      	str	r2, [sp, #0]
 800138e:	460a      	mov	r2, r1
 8001390:	2100      	movs	r1, #0
 8001392:	4821      	ldr	r0, [pc, #132]	@ (8001418 <Init+0x1e0>)
 8001394:	47a0      	blx	r4
 8001396:	e021      	b.n	80013dc <Init+0x1a4>
        }
        else
        {
            buffer[20] = '\0';
 8001398:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800139c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a0:	2200      	movs	r2, #0
 80013a2:	751a      	strb	r2, [r3, #20]
            hlcd.PrintString(&hlcd, 0, 20 * row++, buffer, 1, YELLOW, hlcd.Init.bg_color);
 80013a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <Init+0x1e0>)
 80013a6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80013a8:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	f887 2227 	strb.w	r2, [r7, #551]	@ 0x227
 80013b2:	461a      	mov	r2, r3
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4619      	mov	r1, r3
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <Init+0x1e0>)
 80013c0:	8b9b      	ldrh	r3, [r3, #28]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	9202      	str	r2, [sp, #8]
 80013ca:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	460a      	mov	r2, r1
 80013d6:	2100      	movs	r1, #0
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <Init+0x1e0>)
 80013da:	47a0      	blx	r4
        }
    }

    hlcd.PrintString(&hlcd, 0, 20 * row++, "Init finished", 1, WHITE, hlcd.Init.bg_color);
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <Init+0x1e0>)
 80013de:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80013e0:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	f887 2227 	strb.w	r2, [r7, #551]	@ 0x227
 80013ea:	461a      	mov	r2, r3
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <Init+0x1e0>)
 80013f8:	8b9b      	ldrh	r3, [r3, #28]
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2301      	movs	r3, #1
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <Init+0x204>)
 8001408:	2100      	movs	r1, #0
 800140a:	4803      	ldr	r0, [pc, #12]	@ (8001418 <Init+0x1e0>)
 800140c:	47a0      	blx	r4
}
 800140e:	bf00      	nop
 8001410:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	20000084 	.word	0x20000084
 800141c:	200000d0 	.word	0x200000d0
 8001420:	40020400 	.word	0x40020400
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800
 800142c:	08005280 	.word	0x08005280
 8001430:	200000bc 	.word	0x200000bc
 8001434:	08005290 	.word	0x08005290
 8001438:	080052ac 	.word	0x080052ac
 800143c:	080052c8 	.word	0x080052c8

08001440 <Loop>:

static uint16_t FPS;

void Loop(uint32_t ticks)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    FPS = 60000 / ticks;
 8001448:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <Loop+0x24>)
 8001456:	801a      	strh	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200000cc 	.word	0x200000cc

08001468 <SD_WriteByte>:
 * @brief  Write a byte on the SD.
 * @param  Data: byte to send.
 * @retval None
 */
void SD_WriteByte(SD_SPI_Handle *sd, uint8_t data)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(sd->init.hspi, &data, 1, HAL_MAX_DELAY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	1cf9      	adds	r1, r7, #3
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	2201      	movs	r2, #1
 8001480:	f001 feed 	bl	800325e <HAL_SPI_Transmit>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <SD_ReadByte>:
 * @brief  Read a byte from the SD.
 * @param  None
 * @retval The received byte.
 */
uint8_t SD_ReadByte(SD_SPI_Handle *sd)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
    uint8_t dummy = SD_DUMMY_BYTE;
 8001494:	23ff      	movs	r3, #255	@ 0xff
 8001496:	73fb      	strb	r3, [r7, #15]
    uint8_t data;
    HAL_SPI_TransmitReceive(sd->init.hspi, &dummy, &data, 1, HAL_MAX_DELAY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	f107 020e 	add.w	r2, r7, #14
 80014a0:	f107 010f 	add.w	r1, r7, #15
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	f002 f81b 	bl	80034e6 <HAL_SPI_TransmitReceive>
    return data;
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <SD_Bus_Hold>:
 * @brief  Hold SPI bus for SD card
 * @param  None
 * @retval None
 */
static void SD_Bus_Hold(SD_SPI_Handle *sd)
{ /* Select SD Card: set SD chip select pin low */
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sd->init.CS_Port, sd->init.CS_Pin, GPIO_PIN_RESET);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6898      	ldr	r0, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	f001 f83a 	bl	8002548 <HAL_GPIO_WritePin>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <SD_Bus_Release>:
 * @brief  Release SPI bus used by SD card
 * @param  None
 * @retval None
 */
static void SD_Bus_Release(SD_SPI_Handle *sd)
{ /* Deselect SD Card: set SD chip select pin high */
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sd->init.CS_Port, sd->init.CS_Pin, GPIO_PIN_SET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6898      	ldr	r0, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	f001 f829 	bl	8002548 <HAL_GPIO_WritePin>
    SD_ReadByte(sd); /* send dummy byte: 8 Clock pulses of delay */
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffc8 	bl	800148c <SD_ReadByte>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <SD_SendCmd>:
 * @param  Arg: Command argument
 * @param  Crc: CRC
 * @retval R1 response byte
 */
static SD_Error SD_SendCmd(SD_SPI_Handle *sd, uint8_t cmd, uint32_t arg, uint8_t crc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	460b      	mov	r3, r1
 8001512:	72fb      	strb	r3, [r7, #11]
 8001514:	4613      	mov	r3, r2
 8001516:	72bb      	strb	r3, [r7, #10]
    uint8_t res;
    uint16_t i = SD_NUM_TRIES;
 8001518:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800151c:	82fb      	strh	r3, [r7, #22]
    /* send a command */
    SD_WriteByte(sd, (cmd & 0x3F) | 0x40); /*!< byte 1 */
 800151e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001526:	b25b      	sxtb	r3, r3
 8001528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff ff98 	bl	8001468 <SD_WriteByte>
    SD_WriteByte(sd, (uint8_t) (arg >> 24)); /*!< byte 2 */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0e1b      	lsrs	r3, r3, #24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff ff91 	bl	8001468 <SD_WriteByte>
    SD_WriteByte(sd, (uint8_t) (arg >> 16)); /*!< byte 3 */
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0c1b      	lsrs	r3, r3, #16
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff ff8a 	bl	8001468 <SD_WriteByte>
    SD_WriteByte(sd, (uint8_t) (arg >> 8)); /*!< byte 4 */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff ff83 	bl	8001468 <SD_WriteByte>
    SD_WriteByte(sd, (uint8_t) arg); /*!< byte 5 */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff ff7d 	bl	8001468 <SD_WriteByte>
    SD_WriteByte(sd, crc); /*!< byte 6: CRC */
 800156e:	7abb      	ldrb	r3, [r7, #10]
 8001570:	4619      	mov	r1, r3
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ff78 	bl	8001468 <SD_WriteByte>


    /* a byte received immediately after CMD12 should be discarded... */
    if (cmd == SD_CMD_STOP_TRANSMISSION)
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d102      	bne.n	8001584 <SD_SendCmd+0x80>
        SD_ReadByte(sd);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7ff ff84 	bl	800148c <SD_ReadByte>
    /* SD Card responds within Ncr (response time),
     which is 0-8 bytes for SDSC cards, 1-8 bytes for MMC cards */
    do
    {
        res = SD_ReadByte(sd);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff ff81 	bl	800148c <SD_ReadByte>
 800158a:	4603      	mov	r3, r0
 800158c:	757b      	strb	r3, [r7, #21]
        /* R1 response always starts with 7th bit set to 0 */
    } while ((res & SD_CHECK_BIT) != 0x00 && i-- > 0);
 800158e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da04      	bge.n	80015a0 <SD_SendCmd+0x9c>
 8001596:	8afb      	ldrh	r3, [r7, #22]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	82fa      	strh	r2, [r7, #22]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f1      	bne.n	8001584 <SD_SendCmd+0x80>
    return (SD_Error) res;
 80015a0:	7d7b      	ldrb	r3, [r7, #21]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <SD_GetResponse4b>:
 * @brief  Get 4 bytes of R3 or R7 response
 * @param  pres: Pointer to uint32_t variable for result
 * @retval None
 */
static void SD_GetResponse4b(SD_SPI_Handle *sd, uint8_t *pres)
{
 80015aa:	b590      	push	{r4, r7, lr}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
    pres[3] = SD_ReadByte(sd);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	1cdc      	adds	r4, r3, #3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff67 	bl	800148c <SD_ReadByte>
 80015be:	4603      	mov	r3, r0
 80015c0:	7023      	strb	r3, [r4, #0]
    pres[2] = SD_ReadByte(sd);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	1c9c      	adds	r4, r3, #2
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff60 	bl	800148c <SD_ReadByte>
 80015cc:	4603      	mov	r3, r0
 80015ce:	7023      	strb	r3, [r4, #0]
    pres[1] = SD_ReadByte(sd);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	1c5c      	adds	r4, r3, #1
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff59 	bl	800148c <SD_ReadByte>
 80015da:	4603      	mov	r3, r0
 80015dc:	7023      	strb	r3, [r4, #0]
    pres[0] = SD_ReadByte(sd);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff54 	bl	800148c <SD_ReadByte>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <SD_FixSectorSize>:
 * @retval The SD Response:
 *         - SD_RESPONSE_FAILURE: Sequence failed
 *         - SD_RESPONSE_NO_ERROR: Sequence succeed
 */
static SD_Error SD_FixSectorSize(SD_SPI_Handle *sd, uint16_t ssize)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
    return SD_SendCmd(sd, SD_CMD_SET_BLOCKLEN, (uint32_t) ssize, 0xFF);
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	23ff      	movs	r3, #255	@ 0xff
 8001604:	2110      	movs	r1, #16
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff7c 	bl	8001504 <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <SD_WaitReady>:
 * @brief  Some commands take longer time and respond with R1b response,
 *         so we have to wait until 0xFF recieved (MISO is set to HIGH)
 * @retval Nonzero if required state wasn't recieved
 */
static SD_Error SD_WaitReady(SD_SPI_Handle *sd)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
    uint16_t i = SD_NUM_TRIES;
 800161e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001622:	81fb      	strh	r3, [r7, #14]
    while (i-- > 0)
 8001624:	e007      	b.n	8001636 <SD_WaitReady+0x20>
    {
        if (SD_ReadByte(sd) == 0xFF)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff30 	bl	800148c <SD_ReadByte>
 800162c:	4603      	mov	r3, r0
 800162e:	2bff      	cmp	r3, #255	@ 0xff
 8001630:	d101      	bne.n	8001636 <SD_WaitReady+0x20>
            return SD_RESPONSE_NO_ERROR;
 8001632:	2300      	movs	r3, #0
 8001634:	e005      	b.n	8001642 <SD_WaitReady+0x2c>
    while (i-- > 0)
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	81fa      	strh	r2, [r7, #14]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f2      	bne.n	8001626 <SD_WaitReady+0x10>
    }
    return SD_RESPONSE_FAILURE;
 8001640:	23ff      	movs	r3, #255	@ 0xff
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <SD_WaitBytesRead>:
/**
 * @brief  Wait until data transmission token is received
 * @retval Data transmission token or 0xFF if timeout occured
 */
static uint8_t SD_WaitBytesRead(SD_SPI_Handle *sd)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    uint16_t i = SD_NUM_TRIES_READ;
 8001654:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001658:	81fb      	strh	r3, [r7, #14]
    uint8_t b;
    do
    {
        b = SD_ReadByte(sd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff16 	bl	800148c <SD_ReadByte>
 8001660:	4603      	mov	r3, r0
 8001662:	737b      	strb	r3, [r7, #13]
    } while (b == 0xFF && i-- > 0);
 8001664:	7b7b      	ldrb	r3, [r7, #13]
 8001666:	2bff      	cmp	r3, #255	@ 0xff
 8001668:	d104      	bne.n	8001674 <SD_WaitBytesRead+0x28>
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	81fa      	strh	r2, [r7, #14]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <SD_WaitBytesRead+0xe>

    if (b != 0xFF)
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	2bff      	cmp	r3, #255	@ 0xff
 8001678:	d007      	beq.n	800168a <SD_WaitBytesRead+0x3e>
        printf(" [[ READ delay %d ]] ", SD_NUM_TRIES_READ - i);
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <SD_WaitBytesRead+0x50>)
 8001684:	f002 fdf8 	bl	8004278 <iprintf>
 8001688:	e002      	b.n	8001690 <SD_WaitBytesRead+0x44>
    else
        printf(" [[ READ delay was not enough ]] ");
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <SD_WaitBytesRead+0x54>)
 800168c:	f002 fdf4 	bl	8004278 <iprintf>

    return b;
 8001690:	7b7b      	ldrb	r3, [r7, #13]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	080052d8 	.word	0x080052d8
 80016a0:	080052f0 	.word	0x080052f0

080016a4 <SD_GoIdleState>:
 * @retval The SD Response:
 *         - SD_RESPONSE_FAILURE: Sequence failed
 *         - SD_RESPONSE_NO_ERROR: Sequence succeed
 */
static SD_Error SD_GoIdleState(SD_SPI_Handle *sd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    uint32_t res = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
    uint32_t i;
    uint8_t state;

    /* --- put SD card in SPI mode */
    SD_Bus_Hold(sd);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff02 	bl	80014ba <SD_Bus_Hold>

    i = SD_NUM_TRIES; /* reset try count... */
 80016b6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016ba:	617b      	str	r3, [r7, #20]
    do
    { /* loop until In Idle State Response (in R1 format) confirmation */
        state = SD_SendCmd(sd, SD_CMD_GO_IDLE_STATE, 0x00000000, 0x95); /* valid CRC is mandatory here */
 80016bc:	2395      	movs	r3, #149	@ 0x95
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff1e 	bl	8001504 <SD_SendCmd>
 80016c8:	4603      	mov	r3, r0
 80016ca:	74fb      	strb	r3, [r7, #19]
    } while (state != SD_IN_IDLE_STATE && i-- > 0);
 80016cc:	7cfb      	ldrb	r3, [r7, #19]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d004      	beq.n	80016dc <SD_GoIdleState+0x38>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	617a      	str	r2, [r7, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ef      	bne.n	80016bc <SD_GoIdleState+0x18>
    /* still no Idle State Response => return response failure */
    if (state != SD_IN_IDLE_STATE)
 80016dc:	7cfb      	ldrb	r3, [r7, #19]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <SD_GoIdleState+0x42>
        return SD_RESPONSE_FAILURE;
 80016e2:	23ff      	movs	r3, #255	@ 0xff
 80016e4:	e0f0      	b.n	80018c8 <SD_GoIdleState+0x224>

    /* --- SD card is now in idle state and in SPI mode, activate it and get its type */
    sd->card_type = SD_Card_SDSC_v2;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	731a      	strb	r2, [r3, #12]


    /* --- try to send CMD8 to offer voltage 2.7-3.6V with check pattern 0xAA */
    i = SD_NUM_TRIES; /* reset try count... */
 80016ec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016f0:	617b      	str	r3, [r7, #20]
    do
    {
        state = SD_SendCmd(sd, SD_CMD_SEND_IF_COND, 0x000001AA, 0x87); /* valid CRC is mandatory here */
 80016f2:	2387      	movs	r3, #135	@ 0x87
 80016f4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80016f8:	2108      	movs	r1, #8
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff02 	bl	8001504 <SD_SendCmd>
 8001700:	4603      	mov	r3, r0
 8001702:	74fb      	strb	r3, [r7, #19]
        if ((state & SD_ILLEGAL_COMMAND) != 0)
 8001704:	7cfb      	ldrb	r3, [r7, #19]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <SD_GoIdleState+0x72>
        { /* SD card doesn't accept CMD8 => it's SDSC or MMC card... */
            sd->card_type = SD_Card_SDSC_v1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	731a      	strb	r2, [r3, #12]
            break;
 8001714:	e011      	b.n	800173a <SD_GoIdleState+0x96>
        }
        else/* SD card accepts CMD8 => it's SDHC or SDXC card... */
        { /* get R7 response and verify pattern for sanity check... */
            SD_GetResponse4b(sd, (uint8_t*) &res);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff44 	bl	80015aa <SD_GetResponse4b>
            if ((res & 0x0000FFFF) == 0x000001AA)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 800172a:	d005      	beq.n	8001738 <SD_GoIdleState+0x94>
                break; /* check pattern is OK, card accepted offered voltage... */
            /* else specification recommends to retry CMD8 again */
        }
    } while (i-- > 0);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	617a      	str	r2, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1dd      	bne.n	80016f2 <SD_GoIdleState+0x4e>
 8001736:	e000      	b.n	800173a <SD_GoIdleState+0x96>
                break; /* check pattern is OK, card accepted offered voltage... */
 8001738:	bf00      	nop
    if (i == 0)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <SD_GoIdleState+0xa0>
        return SD_RESPONSE_FAILURE; /* error occurred... */
 8001740:	23ff      	movs	r3, #255	@ 0xff
 8001742:	e0c1      	b.n	80018c8 <SD_GoIdleState+0x224>


    /* --- activate card initialization sequence... */
    /* CMD55(0) -> ACMD41(0) -> ... */
    i = SD_NUM_TRIES_INIT; /* reset try count... */
 8001744:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001748:	617b      	str	r3, [r7, #20]
    do
    {
        state = SD_SendCmd(sd, SD_CMD_SEND_APP, 0x00000000, 0);
 800174a:	2300      	movs	r3, #0
 800174c:	2200      	movs	r2, #0
 800174e:	2137      	movs	r1, #55	@ 0x37
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fed7 	bl	8001504 <SD_SendCmd>
 8001756:	4603      	mov	r3, r0
 8001758:	74fb      	strb	r3, [r7, #19]
        if (state != SD_IN_IDLE_STATE)
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d003      	beq.n	8001768 <SD_GoIdleState+0xc4>
        { /* error occurred => last chance is to try it as a legacy MMC card */
            sd->card_type = SD_Card_MMC;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	731a      	strb	r2, [r3, #12]
            break;
 8001766:	e020      	b.n	80017aa <SD_GoIdleState+0x106>
        }


        if (sd->card_type == SD_Card_SDSC_v1) /* HCS bit (0 here) is ignored by SDSC card */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7b1b      	ldrb	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <SD_GoIdleState+0xde>
            state = SD_SendCmd(sd, SD_CMD_ACTIVATE_INIT, 0x00000000, 0);
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2129      	movs	r1, #41	@ 0x29
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fec4 	bl	8001504 <SD_SendCmd>
 800177c:	4603      	mov	r3, r0
 800177e:	74fb      	strb	r3, [r7, #19]
 8001780:	e008      	b.n	8001794 <SD_GoIdleState+0xf0>
        else
            state = SD_SendCmd(sd, SD_CMD_ACTIVATE_INIT, 0x40000000, 0);
 8001782:	2300      	movs	r3, #0
 8001784:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001788:	2129      	movs	r1, #41	@ 0x29
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff feba 	bl	8001504 <SD_SendCmd>
 8001790:	4603      	mov	r3, r0
 8001792:	74fb      	strb	r3, [r7, #19]
        /* loop while SD_IN_IDLE_STATE bit is set, meaning card is still performing initialization */
    } while ((state & SD_IN_IDLE_STATE) != 0x00 && --i > 0);
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <SD_GoIdleState+0x106>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1cf      	bne.n	800174a <SD_GoIdleState+0xa6>
    /* it might be legacy MMC card... */
    if (sd->card_type == SD_Card_SDSC_v1 && (state & SD_IN_IDLE_STATE) != 0x00)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b1b      	ldrb	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <SD_GoIdleState+0x120>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <SD_GoIdleState+0x120>
        sd->card_type = SD_Card_MMC;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	731a      	strb	r2, [r3, #12]
 80017c2:	e006      	b.n	80017d2 <SD_GoIdleState+0x12e>
    else if ((state & SD_IN_IDLE_STATE) != 0x00)
 80017c4:	7cfb      	ldrb	r3, [r7, #19]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SD_GoIdleState+0x12e>
        return 0x90;
 80017ce:	2390      	movs	r3, #144	@ 0x90
 80017d0:	e07a      	b.n	80018c8 <SD_GoIdleState+0x224>

    state = SD_WaitReady(sd); /* make sure card is ready before we go further... */
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff1f 	bl	8001616 <SD_WaitReady>
 80017d8:	4603      	mov	r3, r0
 80017da:	74fb      	strb	r3, [r7, #19]

    if (sd->card_type == SD_Card_MMC) /* legacy MMC card is initialized with CMD1... */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7b1b      	ldrb	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d119      	bne.n	8001818 <SD_GoIdleState+0x174>
    { /* -> CMD1(0) -> ... */
        i = SD_NUM_TRIES_INIT; /* reset try count... */
 80017e4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80017e8:	617b      	str	r3, [r7, #20]
        do
        {
            state = SD_SendCmd(sd, SD_CMD_SEND_OP_COND, 0x00000000, 0xFF);
 80017ea:	23ff      	movs	r3, #255	@ 0xff
 80017ec:	2200      	movs	r2, #0
 80017ee:	2101      	movs	r1, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe87 	bl	8001504 <SD_SendCmd>
 80017f6:	4603      	mov	r3, r0
 80017f8:	74fb      	strb	r3, [r7, #19]
        } while ((state & SD_IN_IDLE_STATE) != 0x00 && i-- > 0);
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <SD_GoIdleState+0x16a>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	617a      	str	r2, [r7, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ed      	bne.n	80017ea <SD_GoIdleState+0x146>
        if (i == 0)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d12c      	bne.n	800186e <SD_GoIdleState+0x1ca>
            return SD_RESPONSE_FAILURE; /* error occurred... */
 8001814:	23ff      	movs	r3, #255	@ 0xff
 8001816:	e057      	b.n	80018c8 <SD_GoIdleState+0x224>
    }
    else if (sd->card_type == SD_Card_SDSC_v2) /* recent cards support byte-addressing, check it... */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7b1b      	ldrb	r3, [r3, #12]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d126      	bne.n	800186e <SD_GoIdleState+0x1ca>
    { /* -> CMD58(0)... */
        if (i == 0) /* first check if timeout occured during its initialization... */
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <SD_GoIdleState+0x186>
            return SD_RESPONSE_FAILURE; /* error occurred... */
 8001826:	23ff      	movs	r3, #255	@ 0xff
 8001828:	e04e      	b.n	80018c8 <SD_GoIdleState+0x224>

        /* request OCR register (send CMD58)... */
        state = SD_SendCmd(sd, SD_CMD_READ_OCR, 0x00000000, 0xFF);
 800182a:	23ff      	movs	r3, #255	@ 0xff
 800182c:	2200      	movs	r2, #0
 800182e:	213a      	movs	r1, #58	@ 0x3a
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fe67 	bl	8001504 <SD_SendCmd>
 8001836:	4603      	mov	r3, r0
 8001838:	74fb      	strb	r3, [r7, #19]
        if (state == (SD_RESPONSE_NO_ERROR | 0x01) /*IDLE*/)
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d116      	bne.n	800186e <SD_GoIdleState+0x1ca>
        { /* get OCR register (R3 response) and check its CCS (bit 30) */
            SD_GetResponse4b(sd, (uint8_t*) &res);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff feaf 	bl	80015aa <SD_GetResponse4b>
            sd->card_type = (res & 0x40000000) ? SD_Card_SDHC : SD_Card_SDSC_v2;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SD_GoIdleState+0x1b6>
 8001856:	2203      	movs	r2, #3
 8001858:	e000      	b.n	800185c <SD_GoIdleState+0x1b8>
 800185a:	2202      	movs	r2, #2
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	731a      	strb	r2, [r3, #12]

            if (!(res & 0x00FF8000))
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <SD_GoIdleState+0x22c>)
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <SD_GoIdleState+0x1ca>
                return 0x80;
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	e02c      	b.n	80018c8 <SD_GoIdleState+0x224>
        }
    }
    /* else cardType == SD_Card_SDSC_v1 */

    state = SD_WaitReady(sd); /* make sure card is ready before we go further... */
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fed1 	bl	8001616 <SD_WaitReady>
 8001874:	4603      	mov	r3, r0
 8001876:	74fb      	strb	r3, [r7, #19]

    /* print out detected SD card type... */
    switch (sd->card_type)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d81b      	bhi.n	80018b8 <SD_GoIdleState+0x214>
 8001880:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <SD_GoIdleState+0x1e4>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	080018b1 	.word	0x080018b1
 800188c:	08001899 	.word	0x08001899
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018a9 	.word	0x080018a9
    {
    case SD_Card_SDSC_v1:
        printf("SDSC v1 (byte address)");
 8001898:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <SD_GoIdleState+0x230>)
 800189a:	f002 fced 	bl	8004278 <iprintf>
        break;
 800189e:	e00f      	b.n	80018c0 <SD_GoIdleState+0x21c>
    case SD_Card_SDSC_v2:
        printf("SDSC v2 (byte address)");
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <SD_GoIdleState+0x234>)
 80018a2:	f002 fce9 	bl	8004278 <iprintf>
        break;
 80018a6:	e00b      	b.n	80018c0 <SD_GoIdleState+0x21c>
    case SD_Card_SDHC:
        printf("SDHC (512-bytes sector address)");
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <SD_GoIdleState+0x238>)
 80018aa:	f002 fce5 	bl	8004278 <iprintf>
        break;
 80018ae:	e007      	b.n	80018c0 <SD_GoIdleState+0x21c>
    case SD_Card_MMC:
        printf("MMC (byte address)");
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <SD_GoIdleState+0x23c>)
 80018b2:	f002 fce1 	bl	8004278 <iprintf>
        break;
 80018b6:	e003      	b.n	80018c0 <SD_GoIdleState+0x21c>
    default:
        printf("UNKNOWN");
 80018b8:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <SD_GoIdleState+0x240>)
 80018ba:	f002 fcdd 	bl	8004278 <iprintf>
        break;
 80018be:	bf00      	nop
    }
    printf(" card initialized successfully\n");
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <SD_GoIdleState+0x244>)
 80018c2:	f002 fd41 	bl	8004348 <puts>

    return SD_RESPONSE_NO_ERROR;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	00ff8000 	.word	0x00ff8000
 80018d4:	0800538c 	.word	0x0800538c
 80018d8:	080053a4 	.word	0x080053a4
 80018dc:	080053bc 	.word	0x080053bc
 80018e0:	080053dc 	.word	0x080053dc
 80018e4:	080053f0 	.word	0x080053f0
 80018e8:	080053f8 	.word	0x080053f8

080018ec <SD_ReceiveData>:
 * @retval The SD Response:
 *         - SD_RESPONSE_FAILURE: Sequence failed
 *         - SD_RESPONSE_NO_ERROR: Sequence succeed
 */
static SD_Error SD_ReceiveData(SD_SPI_Handle *sd, uint8_t *data, uint16_t len)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	82fb      	strh	r3, [r7, #22]
    uint8_t b;

    /* some cards need time before transmitting the data... */
    b = SD_WaitBytesRead(sd);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fea4 	bl	800164c <SD_WaitBytesRead>
 8001904:	4603      	mov	r3, r0
 8001906:	757b      	strb	r3, [r7, #21]

    if (b != 0xFF)
 8001908:	7d7b      	ldrb	r3, [r7, #21]
 800190a:	2bff      	cmp	r3, #255	@ 0xff
 800190c:	d02c      	beq.n	8001968 <SD_ReceiveData+0x7c>
    { /* most cards send transmission start token, don't fail if it's not the case... */
        data[i] = b;
 800190e:	8afb      	ldrh	r3, [r7, #22]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	7d7a      	ldrb	r2, [r7, #21]
 8001916:	701a      	strb	r2, [r3, #0]
        if (data[i] == SD_DATA_BLOCK_READ_START) /* 0xFE */
 8001918:	8afb      	ldrh	r3, [r7, #22]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2bfe      	cmp	r3, #254	@ 0xfe
 8001922:	d107      	bne.n	8001934 <SD_ReceiveData+0x48>
            data[i] = SD_ReadByte(sd); /* just get the next byte... */
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	18d4      	adds	r4, r2, r3
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fdae 	bl	800148c <SD_ReadByte>
 8001930:	4603      	mov	r3, r0
 8001932:	7023      	strb	r3, [r4, #0]

        /* receive the rest of data... */
        for (i = 1; i < len; ++i)
 8001934:	2301      	movs	r3, #1
 8001936:	82fb      	strh	r3, [r7, #22]
 8001938:	e00a      	b.n	8001950 <SD_ReceiveData+0x64>
            data[i] = SD_ReadByte(sd);
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	18d4      	adds	r4, r2, r3
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fda3 	bl	800148c <SD_ReadByte>
 8001946:	4603      	mov	r3, r0
 8001948:	7023      	strb	r3, [r4, #0]
        for (i = 1; i < len; ++i)
 800194a:	8afb      	ldrh	r3, [r7, #22]
 800194c:	3301      	adds	r3, #1
 800194e:	82fb      	strh	r3, [r7, #22]
 8001950:	8afa      	ldrh	r2, [r7, #22]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	429a      	cmp	r2, r3
 8001956:	d3f0      	bcc.n	800193a <SD_ReceiveData+0x4e>

        /* get CRC bytes (not really needed by us, but required by SD) */
        SD_ReadByte(sd);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fd97 	bl	800148c <SD_ReadByte>
        SD_ReadByte(sd);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff fd94 	bl	800148c <SD_ReadByte>

        return SD_RESPONSE_NO_ERROR;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <SD_ReceiveData+0x7e>
    }
    return SD_RESPONSE_FAILURE;
 8001968:	23ff      	movs	r3, #255	@ 0xff
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}

08001972 <SD_Init>:

    return state;
}

SD_Error SD_Init(SD_SPI_Handle *sd)
{
 8001972:	b5b0      	push	{r4, r5, r7, lr}
 8001974:	b090      	sub	sp, #64	@ 0x40
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    SD_Error state;
    uint32_t i = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* step 1 :
     * reduce spi baudrate.
     */

    SPI_HandleTypeDef *hspi = sd->init.hspi;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34

    SPI_InitTypeDef spi_init_backup = hspi->Init;
 8001984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001986:	f107 0408 	add.w	r4, r7, #8
 800198a:	1d1d      	adds	r5, r3, #4
 800198c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001998:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800199c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199e:	2238      	movs	r2, #56	@ 0x38
 80019a0:	61da      	str	r2, [r3, #28]
    if (HAL_SPI_Init(hspi) != HAL_OK)
 80019a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019a4:	f001 fbd2 	bl	800314c <HAL_SPI_Init>
     * According to the specs it must be 74 SPI clock cycles minimum at 100-400Khz
     * At 25Mhz it'll be 250 times more cycles => send 2500 times 0xFF byte.
     * Chip Select pin should be set HIGH too. */

    /* set SD chip select pin high */
    HAL_GPIO_WritePin(sd->init.CS_Port, sd->init.CS_Pin, GPIO_PIN_SET);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6898      	ldr	r0, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2201      	movs	r2, #1
 80019b4:	4619      	mov	r1, r3
 80019b6:	f000 fdc7 	bl	8002548 <HAL_GPIO_WritePin>
    /* send dummy byte 0xFF (rise MOSI high for 2500*8 SPI bus clock cycles) */
    while (i++ < SD_NUM_TRIES_RUMPUP)
 80019ba:	e003      	b.n	80019c4 <SD_Init+0x52>
        SD_WriteByte(sd, SD_DUMMY_BYTE);
 80019bc:	21ff      	movs	r1, #255	@ 0xff
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fd52 	bl	8001468 <SD_WriteByte>
    while (i++ < SD_NUM_TRIES_RUMPUP)
 80019c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80019ca:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d9f4      	bls.n	80019bc <SD_Init+0x4a>

    /* step 3:
     * Put SD in SPI mode & perform soft reset */
    state = SD_GoIdleState(sd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fe66 	bl	80016a4 <SD_GoIdleState>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* step 4:
     * Force sector size to SD_BLOCK_SIZE (i.e. 512 bytes) */
    if (state == SD_RESPONSE_NO_ERROR && sd->card_type != SD_Card_SDHC)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10b      	bne.n	80019fe <SD_Init+0x8c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7b1b      	ldrb	r3, [r3, #12]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d007      	beq.n	80019fe <SD_Init+0x8c>
        state = SD_FixSectorSize(sd, (uint16_t) SD_BLOCK_SIZE);
 80019ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fdfe 	bl	80015f4 <SD_FixSectorSize>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* step 5:
     * Release SPI bus for other devices */
    SD_Bus_Release(sd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fd6c 	bl	80014dc <SD_Bus_Release>

    hspi->Init = spi_init_backup;
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	1d1c      	adds	r4, r3, #4
 8001a08:	f107 0508 	add.w	r5, r7, #8
 8001a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (HAL_SPI_Init(hspi) != HAL_OK)
 8001a1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a1e:	f001 fb95 	bl	800314c <HAL_SPI_Init>
    {
        // TODO: Handle error
    }

    return state;
 8001a22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3740      	adds	r7, #64	@ 0x40
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a30 <SD_SectorRead>:

SD_Error SD_SectorRead(SD_SPI_Handle *sd, uint32_t readAddr, uint8_t *pBuffer)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]

    SD_Error state;

    printf("--> reading sector %lu ...", readAddr);
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	481c      	ldr	r0, [pc, #112]	@ (8001ab0 <SD_SectorRead+0x80>)
 8001a40:	f002 fc1a 	bl	8004278 <iprintf>

    /* non High Capacity cards use byte-oriented addresses */
    if (sd->card_type != SD_Card_SDHC)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d002      	beq.n	8001a52 <SD_SectorRead+0x22>
        readAddr <<= 9;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	60bb      	str	r3, [r7, #8]

    SD_Bus_Hold(sd); /* hold SPI bus... */
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd31 	bl	80014ba <SD_Bus_Hold>

    state = SD_WaitReady(sd); /* make sure card is ready before we go further... */
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fddc 	bl	8001616 <SD_WaitReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

    /* send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
    state = SD_SendCmd(sd, SD_CMD_READ_SINGLE_BLOCK, readAddr, 0x00);
 8001a62:	2300      	movs	r3, #0
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	2111      	movs	r1, #17
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fd4b 	bl	8001504 <SD_SendCmd>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	75fb      	strb	r3, [r7, #23]

    /* receive data if command acknowledged... */
    if (state == SD_RESPONSE_NO_ERROR)
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <SD_SectorRead+0x58>
        state = SD_ReceiveData(sd, pBuffer, SD_BLOCK_SIZE);
 8001a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff ff34 	bl	80018ec <SD_ReceiveData>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]

    SD_Bus_Release(sd); /* release SPI bus... */
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd27 	bl	80014dc <SD_Bus_Release>

    if (state == SD_RESPONSE_NO_ERROR)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <SD_SectorRead+0x6c>
        printf("OK\n");
 8001a94:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <SD_SectorRead+0x84>)
 8001a96:	f002 fc57 	bl	8004348 <puts>
 8001a9a:	e004      	b.n	8001aa6 <SD_SectorRead+0x76>
    else
        printf("KO(%d)\n", state);
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <SD_SectorRead+0x88>)
 8001aa2:	f002 fbe9 	bl	8004278 <iprintf>

    return state;
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08005444 	.word	0x08005444
 8001ab4:	08005460 	.word	0x08005460
 8001ab8:	08005464 	.word	0x08005464

08001abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ac2:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <MX_SPI1_Init+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001acc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aec:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001b08:	220a      	movs	r2, #10
 8001b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_SPI1_Init+0x64>)
 8001b0e:	f001 fb1d 	bl	800314c <HAL_SPI_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8001b18:	f7ff fb88 	bl	800122c <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000d0 	.word	0x200000d0
 8001b24:	40013000 	.word	0x40013000

08001b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct =
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
    { 0 };
    if (spiHandle->Instance == SPI1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <HAL_SPI_MspInit+0xa4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d13b      	bne.n	8001bc2 <HAL_SPI_MspInit+0x9a>
    {
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_SPI_MspInit+0xa8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
         PA5     ------> SPI1_SCK
         PA6     ------> SPI1_MISO
         PA7     ------> SPI1_MOSI
         */
        GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001b82:	23e0      	movs	r3, #224	@ 0xe0
 8001b84:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b92:	2305      	movs	r3, #5
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <HAL_SPI_MspInit+0xac>)
 8001b9e:	f000 fb3f 	bl	8002220 <HAL_GPIO_Init>

        /* USER CODE BEGIN SPI1_MspInit 1 */
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba2:	2340      	movs	r3, #64	@ 0x40
 8001ba4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <HAL_SPI_MspInit+0xac>)
 8001bbe:	f000 fb2f 	bl	8002220 <HAL_GPIO_Init>
        /* USER CODE END SPI1_MspInit 1 */
    }
}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	@ 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40013000 	.word	0x40013000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c16:	2007      	movs	r0, #7
 8001c18:	f000 face 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f000 f9a5 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e00a      	b.n	8001cae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c98:	f3af 8000 	nop.w
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	60ba      	str	r2, [r7, #8]
 8001ca4:	b2ca      	uxtb	r2, r1
 8001ca6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf0      	blt.n	8001c98 <_read+0x12>
  }

  return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e009      	b.n	8001ce6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dbf1      	blt.n	8001cd2 <_write+0x12>
  }
  return len;
 8001cee:	687b      	ldr	r3, [r7, #4]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_close>:

int _close(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d20:	605a      	str	r2, [r3, #4]
  return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_isatty>:

int _isatty(int file)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f002 fc3a 	bl	8004608 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000128 	.word	0x20000128
 8001dc8:	200002c8 	.word	0x200002c8

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <MX_USART2_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e28:	f001 fde2 	bl	80039f0 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff f9fb 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000012c 	.word	0x2000012c
 8001e40:	40004400 	.word	0x40004400

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_UART_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12b      	bne.n	8001ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <HAL_UART_MspInit+0x8c>)
 8001eba:	f000 f9b1 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	@ 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ed8:	f7ff ff78 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	@ (8001f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f002 fb87 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7ff f903 	bl	8001110 <main>
  bx  lr    
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f18:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 8001f1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f20:	200002c4 	.word	0x200002c4

08001f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <HAL_Init+0x40>)
 8001f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_Init+0x40>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <HAL_Init+0x40>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f931 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fe3c 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f93b 	bl	8002206 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f911 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	@ (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000174 	.word	0x20000174

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000174 	.word	0x20000174

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	@ (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	@ 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff47 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff5c 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffb0 	bl	8002174 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e165      	b.n	8002508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8154 	bne.w	8002502 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80ae 	beq.w	8002502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002520 <HAL_GPIO_Init+0x300>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002520 <HAL_GPIO_Init+0x300>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002520 <HAL_GPIO_Init+0x300>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a58      	ldr	r2, [pc, #352]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x308>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <HAL_GPIO_Init+0x30c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_GPIO_Init+0x310>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_GPIO_Init+0x314>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	@ (8002538 <HAL_GPIO_Init+0x318>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x20a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4a      	ldr	r2, [pc, #296]	@ (800253c <HAL_GPIO_Init+0x31c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x206>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a49      	ldr	r2, [pc, #292]	@ (8002540 <HAL_GPIO_Init+0x320>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x202>
 800241e:	2306      	movs	r3, #6
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002422:	2307      	movs	r3, #7
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	@ (8002524 <HAL_GPIO_Init+0x304>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <HAL_GPIO_Init+0x324>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_GPIO_Init+0x324>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <HAL_GPIO_Init+0x324>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a26      	ldr	r2, [pc, #152]	@ (8002544 <HAL_GPIO_Init+0x324>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_GPIO_Init+0x324>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <HAL_GPIO_Init+0x324>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_GPIO_Init+0x324>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <HAL_GPIO_Init+0x324>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae96 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	@ 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40021400 	.word	0x40021400
 8002540:	40021800 	.word	0x40021800
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7ff fcc2 	bl	8001ff4 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7ff fcbe 	bl	8001ff4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f855 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	@ (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fc22 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	08006084 	.word	0x08006084
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08006094 	.word	0x08006094

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08006094 	.word	0x08006094

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b4:	b0ae      	sub	sp, #184	@ 0xb8
 80027b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d6:	4bcb      	ldr	r3, [pc, #812]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	f200 8206 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x440>
 80027e4:	a201      	add	r2, pc, #4	@ (adr r2, 80027ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002bf1 	.word	0x08002bf1
 80027f4:	08002bf1 	.word	0x08002bf1
 80027f8:	08002bf1 	.word	0x08002bf1
 80027fc:	08002829 	.word	0x08002829
 8002800:	08002bf1 	.word	0x08002bf1
 8002804:	08002bf1 	.word	0x08002bf1
 8002808:	08002bf1 	.word	0x08002bf1
 800280c:	08002831 	.word	0x08002831
 8002810:	08002bf1 	.word	0x08002bf1
 8002814:	08002bf1 	.word	0x08002bf1
 8002818:	08002bf1 	.word	0x08002bf1
 800281c:	08002a21 	.word	0x08002a21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4bb9      	ldr	r3, [pc, #740]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002826:	e1e7      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002828:	4bb8      	ldr	r3, [pc, #736]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800282a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282e:	e1e3      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002830:	4bb4      	ldr	r3, [pc, #720]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283c:	4bb1      	ldr	r3, [pc, #708]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d071      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002848:	4bae      	ldr	r3, [pc, #696]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002854:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800285c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002860:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800286a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	0159      	lsls	r1, r3, #5
 800287c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002880:	0150      	lsls	r0, r2, #5
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4621      	mov	r1, r4
 8002888:	1a51      	subs	r1, r2, r1
 800288a:	6439      	str	r1, [r7, #64]	@ 0x40
 800288c:	4629      	mov	r1, r5
 800288e:	eb63 0301 	sbc.w	r3, r3, r1
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028a0:	4649      	mov	r1, r9
 80028a2:	018b      	lsls	r3, r1, #6
 80028a4:	4641      	mov	r1, r8
 80028a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028aa:	4641      	mov	r1, r8
 80028ac:	018a      	lsls	r2, r1, #6
 80028ae:	4641      	mov	r1, r8
 80028b0:	1a51      	subs	r1, r2, r1
 80028b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028b4:	4649      	mov	r1, r9
 80028b6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028c8:	4649      	mov	r1, r9
 80028ca:	00cb      	lsls	r3, r1, #3
 80028cc:	4641      	mov	r1, r8
 80028ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d2:	4641      	mov	r1, r8
 80028d4:	00ca      	lsls	r2, r1, #3
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	4603      	mov	r3, r0
 80028dc:	4622      	mov	r2, r4
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028e2:	462b      	mov	r3, r5
 80028e4:	460a      	mov	r2, r1
 80028e6:	eb42 0303 	adc.w	r3, r2, r3
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028f8:	4629      	mov	r1, r5
 80028fa:	024b      	lsls	r3, r1, #9
 80028fc:	4621      	mov	r1, r4
 80028fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002902:	4621      	mov	r1, r4
 8002904:	024a      	lsls	r2, r1, #9
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002914:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002918:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800291c:	f7fd fcc8 	bl	80002b0 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800292a:	e067      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292c:	4b75      	ldr	r3, [pc, #468]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002938:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002944:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002946:	2300      	movs	r3, #0
 8002948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800294a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4621      	mov	r1, r4
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800296c:	4629      	mov	r1, r5
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002980:	4649      	mov	r1, r9
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	4641      	mov	r1, r8
 8002986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298a:	4641      	mov	r1, r8
 800298c:	018a      	lsls	r2, r1, #6
 800298e:	4641      	mov	r1, r8
 8002990:	ebb2 0a01 	subs.w	sl, r2, r1
 8002994:	4649      	mov	r1, r9
 8002996:	eb63 0b01 	sbc.w	fp, r3, r1
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ae:	4692      	mov	sl, r2
 80029b0:	469b      	mov	fp, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	eb1a 0303 	adds.w	r3, sl, r3
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	462b      	mov	r3, r5
 80029bc:	eb4b 0303 	adc.w	r3, fp, r3
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ce:	4629      	mov	r1, r5
 80029d0:	028b      	lsls	r3, r1, #10
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d8:	4621      	mov	r1, r4
 80029da:	028a      	lsls	r2, r1, #10
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e4:	2200      	movs	r2, #0
 80029e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80029e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80029ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ee:	f7fd fc5f 	bl	80002b0 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4613      	mov	r3, r2
 80029f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029fc:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a1e:	e0eb      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b38      	ldr	r3, [pc, #224]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2c:	4b35      	ldr	r3, [pc, #212]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d06b      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4b32      	ldr	r3, [pc, #200]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a54:	4622      	mov	r2, r4
 8002a56:	462b      	mov	r3, r5
 8002a58:	f04f 0000 	mov.w	r0, #0
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	0159      	lsls	r1, r3, #5
 8002a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a66:	0150      	lsls	r0, r2, #5
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	1a51      	subs	r1, r2, r1
 8002a70:	61b9      	str	r1, [r7, #24]
 8002a72:	4629      	mov	r1, r5
 8002a74:	eb63 0301 	sbc.w	r3, r3, r1
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a86:	4659      	mov	r1, fp
 8002a88:	018b      	lsls	r3, r1, #6
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a90:	4651      	mov	r1, sl
 8002a92:	018a      	lsls	r2, r1, #6
 8002a94:	4651      	mov	r1, sl
 8002a96:	ebb2 0801 	subs.w	r8, r2, r1
 8002a9a:	4659      	mov	r1, fp
 8002a9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab4:	4690      	mov	r8, r2
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	4623      	mov	r3, r4
 8002aba:	eb18 0303 	adds.w	r3, r8, r3
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	462b      	mov	r3, r5
 8002ac2:	eb49 0303 	adc.w	r3, r9, r3
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	024b      	lsls	r3, r1, #9
 8002ad8:	4621      	mov	r1, r4
 8002ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ade:	4621      	mov	r1, r4
 8002ae0:	024a      	lsls	r2, r1, #9
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aea:	2200      	movs	r2, #0
 8002aec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002af0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002af4:	f7fd fbdc 	bl	80002b0 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b02:	e065      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x420>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	2200      	movs	r2, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b20:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b22:	2300      	movs	r3, #0
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b2a:	4642      	mov	r2, r8
 8002b2c:	464b      	mov	r3, r9
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4641      	mov	r1, r8
 8002b44:	1a51      	subs	r1, r2, r1
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	4649      	mov	r1, r9
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	4651      	mov	r1, sl
 8002b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b66:	4651      	mov	r1, sl
 8002b68:	018a      	lsls	r2, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	1a54      	subs	r4, r2, r1
 8002b6e:	4659      	mov	r1, fp
 8002b70:	eb63 0501 	sbc.w	r5, r3, r1
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	00eb      	lsls	r3, r5, #3
 8002b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4643      	mov	r3, r8
 8002b8a:	18e3      	adds	r3, r4, r3
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	464b      	mov	r3, r9
 8002b90:	eb45 0303 	adc.w	r3, r5, r3
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bb8:	2200      	movs	r2, #0
 8002bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bc2:	f7fd fb75 	bl	80002b0 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0f1b      	lsrs	r3, r3, #28
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bee:	e003      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	37b8      	adds	r7, #184	@ 0xb8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	00f42400 	.word	0x00f42400

08002c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e28d      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8083 	beq.w	8002d36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c30:	4b94      	ldr	r3, [pc, #592]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d019      	beq.n	8002c70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c3c:	4b91      	ldr	r3, [pc, #580]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c48:	4b8e      	ldr	r3, [pc, #568]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b8b      	ldr	r3, [pc, #556]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d112      	bne.n	8002c88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b84      	ldr	r3, [pc, #528]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x124>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e25a      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x90>
 8002c92:	4b7c      	ldr	r3, [pc, #496]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7b      	ldr	r2, [pc, #492]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xcc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xb4>
 8002caa:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b73      	ldr	r3, [pc, #460]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a72      	ldr	r2, [pc, #456]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xcc>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f986 	bl	8001ff4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7ff f982 	bl	8001ff4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	@ 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e21f      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xdc>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f972 	bl	8001ff4 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff f96e 	bl	8001ff4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e20b      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b57      	ldr	r3, [pc, #348]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x104>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06f      	beq.n	8002e22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d42:	4b50      	ldr	r3, [pc, #320]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b44      	ldr	r3, [pc, #272]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x186>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1d3      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4937      	ldr	r1, [pc, #220]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7ff f91b 	bl	8001ff4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7ff f917 	bl	8001ff4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1b4      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4925      	ldr	r1, [pc, #148]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f8fa 	bl	8001ff4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7ff f8f6 	bl	8001ff4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e193      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d036      	beq.n	8002e9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7ff f8da 	bl	8001ff4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7ff f8d6 	bl	8001ff4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e173      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCC_OscConfig+0x274>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x234>
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <HAL_RCC_OscConfig+0x27c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7ff f8c3 	bl	8001ff4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e00e      	b.n	8002e90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e72:	f7ff f8bf 	bl	8001ff4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d907      	bls.n	8002e90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e15c      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	42470000 	.word	0x42470000
 8002e8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b8a      	ldr	r3, [pc, #552]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8097 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b83      	ldr	r3, [pc, #524]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b7c      	ldr	r3, [pc, #496]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f87f 	bl	8001ff4 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7ff f87b 	bl	8001ff4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e118      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x4b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x31e>
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCC_OscConfig+0x358>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x340>
 8002f36:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a60      	ldr	r2, [pc, #384]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f42:	4b5e      	ldr	r3, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	4a5d      	ldr	r2, [pc, #372]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0x358>
 8002f50:	4b5a      	ldr	r3, [pc, #360]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	4a59      	ldr	r2, [pc, #356]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5c:	4b57      	ldr	r3, [pc, #348]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7ff f840 	bl	8001ff4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7ff f83c 	bl	8001ff4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0d7      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ee      	beq.n	8002f78 <HAL_RCC_OscConfig+0x368>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7ff f82a 	bl	8001ff4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7ff f826 	bl	8001ff4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0c1      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	4b40      	ldr	r3, [pc, #256]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ee      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80ad 	beq.w	800313c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe2:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d060      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d145      	bne.n	8003082 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b33      	ldr	r3, [pc, #204]	@ (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fffa 	bl	8001ff4 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fff6 	bl	8001ff4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e093      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	491b      	ldr	r1, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe ffcb 	bl	8001ff4 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe ffc7 	bl	8001ff4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e064      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x452>
 8003080:	e05c      	b.n	800313c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_OscConfig+0x4b4>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe ffb4 	bl	8001ff4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe ffb0 	bl	8001ff4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e04d      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x480>
 80030ae:	e045      	b.n	800313c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e040      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_RCC_OscConfig+0x538>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d030      	beq.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d129      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d122      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d119      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d10f      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07b      	b.n	8003256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316e:	d009      	beq.n	8003184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
 8003176:	e005      	b.n	8003184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe fcc2 	bl	8001b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0104 	and.w	r1, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	f003 0210 	and.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b088      	sub	sp, #32
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800326e:	f7fe fec1 	bl	8001ff4 <HAL_GetTick>
 8003272:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
 8003286:	e12a      	b.n	80034de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_SPI_Transmit+0x36>
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e122      	b.n	80034de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_SPI_Transmit+0x48>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e11b      	b.n	80034de <HAL_SPI_Transmit+0x280>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f4:	d10f      	bne.n	8003316 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d007      	beq.n	8003334 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800333c:	d152      	bne.n	80033e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Transmit+0xee>
 8003346:	8b7b      	ldrh	r3, [r7, #26]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d145      	bne.n	80033d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003370:	e032      	b.n	80033d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d112      	bne.n	80033a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033a4:	e018      	b.n	80033d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a6:	f7fe fe25 	bl	8001ff4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d803      	bhi.n	80033be <HAL_SPI_Transmit+0x160>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_Transmit+0x166>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e082      	b.n	80034de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1c7      	bne.n	8003372 <HAL_SPI_Transmit+0x114>
 80033e2:	e053      	b.n	800348c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x194>
 80033ec:	8b7b      	ldrh	r3, [r7, #26]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d147      	bne.n	8003482 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003418:	e033      	b.n	8003482 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d113      	bne.n	8003450 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800344e:	e018      	b.n	8003482 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003450:	f7fe fdd0 	bl	8001ff4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d803      	bhi.n	8003468 <HAL_SPI_Transmit+0x20a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d102      	bne.n	800346e <HAL_SPI_Transmit+0x210>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e02d      	b.n	80034de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1c6      	bne.n	800341a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa59 	bl	8003948 <SPI_EndRxTxTransaction>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b08a      	sub	sp, #40	@ 0x28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034f4:	2301      	movs	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f8:	f7fe fd7c 	bl	8001ff4 <HAL_GetTick>
 80034fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003504:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d00c      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x4a>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800351c:	d106      	bne.n	800352c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_SPI_TransmitReceive+0x46>
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d001      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	e17f      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x5c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x5c>
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e174      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x6e>
 8003550:	2302      	movs	r3, #2
 8003552:	e16d      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b04      	cmp	r3, #4
 8003566:	d003      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035cc:	d17e      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_TransmitReceive+0xf6>
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d16c      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	e059      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11b      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x162>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x162>
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	2b01      	cmp	r3, #1
 800361e:	d113      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d119      	bne.n	800368a <HAL_SPI_TransmitReceive+0x1a4>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d014      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	b292      	uxth	r2, r2
 800366c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003672:	1c9a      	adds	r2, r3, #2
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003686:	2301      	movs	r3, #1
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368a:	f7fe fcb3 	bl	8001ff4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003696:	429a      	cmp	r2, r3
 8003698:	d80d      	bhi.n	80036b6 <HAL_SPI_TransmitReceive+0x1d0>
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d009      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0bc      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1a0      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x11c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d19b      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x11c>
 80036ca:	e082      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_SPI_TransmitReceive+0x1f4>
 80036d4:	8afb      	ldrh	r3, [r7, #22]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d171      	bne.n	80037be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003700:	e05d      	b.n	80037be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11c      	bne.n	800374a <HAL_SPI_TransmitReceive+0x264>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_SPI_TransmitReceive+0x264>
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	2b01      	cmp	r3, #1
 800371e:	d114      	bne.n	800374a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d119      	bne.n	800378c <HAL_SPI_TransmitReceive+0x2a6>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d014      	beq.n	800378c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800378c:	f7fe fc32 	bl	8001ff4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003798:	429a      	cmp	r2, r3
 800379a:	d803      	bhi.n	80037a4 <HAL_SPI_TransmitReceive+0x2be>
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x2c4>
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e038      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d19c      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x21c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d197      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f8b6 	bl	8003948 <SPI_EndRxTxTransaction>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e01d      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800382e:	2300      	movs	r3, #0
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	@ 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003848:	f7fe fbd4 	bl	8001ff4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4413      	add	r3, r2
 8003856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003858:	f7fe fbcc 	bl	8001ff4 <HAL_GetTick>
 800385c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	0d1b      	lsrs	r3, r3, #20
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800386e:	e055      	b.n	800391c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d051      	beq.n	800391c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003878:	f7fe fbbc 	bl	8001ff4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	429a      	cmp	r2, r3
 8003886:	d902      	bls.n	800388e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d13d      	bne.n	800390a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800389c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a6:	d111      	bne.n	80038cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b0:	d004      	beq.n	80038bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ba:	d107      	bne.n	80038cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d4:	d10f      	bne.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e018      	b.n	800393c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e002      	b.n	800391c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3b01      	subs	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	d19a      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000000 	.word	0x20000000

08003948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2201      	movs	r2, #1
 800395c:	2102      	movs	r1, #2
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff ff6a 	bl	8003838 <SPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e032      	b.n	80039e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <SPI_EndRxTxTransaction+0xa0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <SPI_EndRxTxTransaction+0xa4>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	0d5b      	lsrs	r3, r3, #21
 8003986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003998:	d112      	bne.n	80039c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ff47 	bl	8003838 <SPI_WaitFlagStateUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e00f      	b.n	80039e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b80      	cmp	r3, #128	@ 0x80
 80039d8:	d0f2      	beq.n	80039c0 <SPI_EndRxTxTransaction+0x78>
 80039da:	e000      	b.n	80039de <SPI_EndRxTxTransaction+0x96>
        break;
 80039dc:	bf00      	nop
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000000 	.word	0x20000000
 80039ec:	165e9f81 	.word	0x165e9f81

080039f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e042      	b.n	8003a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fa14 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	@ 0x24
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f82b 	bl	8003a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a94:	b0c0      	sub	sp, #256	@ 0x100
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	68d9      	ldr	r1, [r3, #12]
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	ea40 0301 	orr.w	r3, r0, r1
 8003ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ae8:	f021 010c 	bic.w	r1, r1, #12
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003af6:	430b      	orrs	r3, r1
 8003af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	6999      	ldr	r1, [r3, #24]
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	ea40 0301 	orr.w	r3, r0, r1
 8003b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8003d5c <UART_SetConfig+0x2cc>)
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d005      	beq.n	8003b30 <UART_SetConfig+0xa0>
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003d60 <UART_SetConfig+0x2d0>)
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d104      	bne.n	8003b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7fe fe2a 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8003b34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b38:	e003      	b.n	8003b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b3a:	f7fe fe11 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8003b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4c:	f040 810c 	bne.w	8003d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b62:	4622      	mov	r2, r4
 8003b64:	462b      	mov	r3, r5
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b72:	4621      	mov	r1, r4
 8003b74:	eb12 0801 	adds.w	r8, r2, r1
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb43 0901 	adc.w	r9, r3, r1
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b92:	4690      	mov	r8, r2
 8003b94:	4699      	mov	r9, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	eb18 0303 	adds.w	r3, r8, r3
 8003b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	eb49 0303 	adc.w	r3, r9, r3
 8003ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	18db      	adds	r3, r3, r3
 8003bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	eb42 0303 	adc.w	r3, r2, r3
 8003bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bd4:	f7fc fb6c 	bl	80002b0 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4b61      	ldr	r3, [pc, #388]	@ (8003d64 <UART_SetConfig+0x2d4>)
 8003bde:	fba3 2302 	umull	r2, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	011c      	lsls	r4, r3, #4
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	1891      	adds	r1, r2, r2
 8003bfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c00:	415b      	adcs	r3, r3
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c08:	4641      	mov	r1, r8
 8003c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c0e:	4649      	mov	r1, r9
 8003c10:	eb43 0b01 	adc.w	fp, r3, r1
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c28:	4692      	mov	sl, r2
 8003c2a:	469b      	mov	fp, r3
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c36:	464b      	mov	r3, r9
 8003c38:	eb4b 0303 	adc.w	r3, fp, r3
 8003c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c54:	460b      	mov	r3, r1
 8003c56:	18db      	adds	r3, r3, r3
 8003c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	eb42 0303 	adc.w	r3, r2, r3
 8003c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c6a:	f7fc fb21 	bl	80002b0 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <UART_SetConfig+0x2d4>)
 8003c76:	fba3 2301 	umull	r2, r3, r3, r1
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2264      	movs	r2, #100	@ 0x64
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	1acb      	subs	r3, r1, r3
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c8a:	4b36      	ldr	r3, [pc, #216]	@ (8003d64 <UART_SetConfig+0x2d4>)
 8003c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c98:	441c      	add	r4, r3
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	1851      	adds	r1, r2, r1
 8003cc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	414b      	adcs	r3, r1
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	00cb      	lsls	r3, r1, #3
 8003cd8:	4651      	mov	r1, sl
 8003cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cde:	4651      	mov	r1, sl
 8003ce0:	00ca      	lsls	r2, r1, #3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4642      	mov	r2, r8
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d10:	460b      	mov	r3, r1
 8003d12:	18db      	adds	r3, r3, r3
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d16:	4613      	mov	r3, r2
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d26:	f7fc fac3 	bl	80002b0 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <UART_SetConfig+0x2d4>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	@ 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	3332      	adds	r3, #50	@ 0x32
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <UART_SetConfig+0x2d4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0207 	and.w	r2, r3, #7
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4422      	add	r2, r4
 8003d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d58:	e106      	b.n	8003f68 <UART_SetConfig+0x4d8>
 8003d5a:	bf00      	nop
 8003d5c:	40011000 	.word	0x40011000
 8003d60:	40011400 	.word	0x40011400
 8003d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d7a:	4642      	mov	r2, r8
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	1891      	adds	r1, r2, r2
 8003d80:	6239      	str	r1, [r7, #32]
 8003d82:	415b      	adcs	r3, r3
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	1854      	adds	r4, r2, r1
 8003d8e:	4649      	mov	r1, r9
 8003d90:	eb43 0501 	adc.w	r5, r3, r1
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	00eb      	lsls	r3, r5, #3
 8003d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da2:	00e2      	lsls	r2, r4, #3
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	18e3      	adds	r3, r4, r3
 8003dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db0:	464b      	mov	r3, r9
 8003db2:	eb45 0303 	adc.w	r3, r5, r3
 8003db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	008b      	lsls	r3, r1, #2
 8003dda:	4621      	mov	r1, r4
 8003ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de0:	4621      	mov	r1, r4
 8003de2:	008a      	lsls	r2, r1, #2
 8003de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003de8:	f7fc fa62 	bl	80002b0 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4b60      	ldr	r3, [pc, #384]	@ (8003f74 <UART_SetConfig+0x4e4>)
 8003df2:	fba3 2302 	umull	r2, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	011c      	lsls	r4, r3, #4
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	61b9      	str	r1, [r7, #24]
 8003e14:	415b      	adcs	r3, r3
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	1851      	adds	r1, r2, r1
 8003e20:	6139      	str	r1, [r7, #16]
 8003e22:	4649      	mov	r1, r9
 8003e24:	414b      	adcs	r3, r1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e34:	4659      	mov	r1, fp
 8003e36:	00cb      	lsls	r3, r1, #3
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3e:	4651      	mov	r1, sl
 8003e40:	00ca      	lsls	r2, r1, #3
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	4642      	mov	r2, r8
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e50:	464b      	mov	r3, r9
 8003e52:	460a      	mov	r2, r1
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e74:	4649      	mov	r1, r9
 8003e76:	008b      	lsls	r3, r1, #2
 8003e78:	4641      	mov	r1, r8
 8003e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e7e:	4641      	mov	r1, r8
 8003e80:	008a      	lsls	r2, r1, #2
 8003e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e86:	f7fc fa13 	bl	80002b0 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4b38      	ldr	r3, [pc, #224]	@ (8003f74 <UART_SetConfig+0x4e4>)
 8003e92:	fba3 2301 	umull	r2, r3, r3, r1
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2264      	movs	r2, #100	@ 0x64
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	1acb      	subs	r3, r1, r3
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	3332      	adds	r3, #50	@ 0x32
 8003ea4:	4a33      	ldr	r2, [pc, #204]	@ (8003f74 <UART_SetConfig+0x4e4>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb0:	441c      	add	r4, r3
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eba:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f02:	464b      	mov	r3, r9
 8003f04:	460a      	mov	r2, r1
 8003f06:	eb42 0303 	adc.w	r3, r2, r3
 8003f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f16:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f24:	4649      	mov	r1, r9
 8003f26:	008b      	lsls	r3, r1, #2
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2e:	4641      	mov	r1, r8
 8003f30:	008a      	lsls	r2, r1, #2
 8003f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f36:	f7fc f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <UART_SetConfig+0x4e4>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	@ 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	3332      	adds	r3, #50	@ 0x32
 8003f52:	4a08      	ldr	r2, [pc, #32]	@ (8003f74 <UART_SetConfig+0x4e4>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 020f 	and.w	r2, r3, #15
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4422      	add	r2, r4
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <malloc>:
 8003f78:	4b02      	ldr	r3, [pc, #8]	@ (8003f84 <malloc+0xc>)
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	f000 b82d 	b.w	8003fdc <_malloc_r>
 8003f82:	bf00      	nop
 8003f84:	20000018 	.word	0x20000018

08003f88 <free>:
 8003f88:	4b02      	ldr	r3, [pc, #8]	@ (8003f94 <free+0xc>)
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f000 bb69 	b.w	8004664 <_free_r>
 8003f92:	bf00      	nop
 8003f94:	20000018 	.word	0x20000018

08003f98 <sbrk_aligned>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd8 <sbrk_aligned+0x40>)
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	6831      	ldr	r1, [r6, #0]
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	b911      	cbnz	r1, 8003faa <sbrk_aligned+0x12>
 8003fa4:	f000 fb0e 	bl	80045c4 <_sbrk_r>
 8003fa8:	6030      	str	r0, [r6, #0]
 8003faa:	4621      	mov	r1, r4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 fb09 	bl	80045c4 <_sbrk_r>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d103      	bne.n	8003fbe <sbrk_aligned+0x26>
 8003fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8003fba:	4620      	mov	r0, r4
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	1cc4      	adds	r4, r0, #3
 8003fc0:	f024 0403 	bic.w	r4, r4, #3
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d0f8      	beq.n	8003fba <sbrk_aligned+0x22>
 8003fc8:	1a21      	subs	r1, r4, r0
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fafa 	bl	80045c4 <_sbrk_r>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d1f2      	bne.n	8003fba <sbrk_aligned+0x22>
 8003fd4:	e7ef      	b.n	8003fb6 <sbrk_aligned+0x1e>
 8003fd6:	bf00      	nop
 8003fd8:	20000178 	.word	0x20000178

08003fdc <_malloc_r>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	1ccd      	adds	r5, r1, #3
 8003fe2:	f025 0503 	bic.w	r5, r5, #3
 8003fe6:	3508      	adds	r5, #8
 8003fe8:	2d0c      	cmp	r5, #12
 8003fea:	bf38      	it	cc
 8003fec:	250c      	movcc	r5, #12
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	db01      	blt.n	8003ff8 <_malloc_r+0x1c>
 8003ff4:	42a9      	cmp	r1, r5
 8003ff6:	d904      	bls.n	8004002 <_malloc_r+0x26>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d8 <_malloc_r+0xfc>
 8004006:	f000 f869 	bl	80040dc <__malloc_lock>
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	461c      	mov	r4, r3
 8004010:	bb44      	cbnz	r4, 8004064 <_malloc_r+0x88>
 8004012:	4629      	mov	r1, r5
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffbf 	bl	8003f98 <sbrk_aligned>
 800401a:	1c43      	adds	r3, r0, #1
 800401c:	4604      	mov	r4, r0
 800401e:	d158      	bne.n	80040d2 <_malloc_r+0xf6>
 8004020:	f8d8 4000 	ldr.w	r4, [r8]
 8004024:	4627      	mov	r7, r4
 8004026:	2f00      	cmp	r7, #0
 8004028:	d143      	bne.n	80040b2 <_malloc_r+0xd6>
 800402a:	2c00      	cmp	r4, #0
 800402c:	d04b      	beq.n	80040c6 <_malloc_r+0xea>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	eb04 0903 	add.w	r9, r4, r3
 8004038:	f000 fac4 	bl	80045c4 <_sbrk_r>
 800403c:	4581      	cmp	r9, r0
 800403e:	d142      	bne.n	80040c6 <_malloc_r+0xea>
 8004040:	6821      	ldr	r1, [r4, #0]
 8004042:	1a6d      	subs	r5, r5, r1
 8004044:	4629      	mov	r1, r5
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff ffa6 	bl	8003f98 <sbrk_aligned>
 800404c:	3001      	adds	r0, #1
 800404e:	d03a      	beq.n	80040c6 <_malloc_r+0xea>
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	442b      	add	r3, r5
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	f8d8 3000 	ldr.w	r3, [r8]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	bb62      	cbnz	r2, 80040b8 <_malloc_r+0xdc>
 800405e:	f8c8 7000 	str.w	r7, [r8]
 8004062:	e00f      	b.n	8004084 <_malloc_r+0xa8>
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	1b52      	subs	r2, r2, r5
 8004068:	d420      	bmi.n	80040ac <_malloc_r+0xd0>
 800406a:	2a0b      	cmp	r2, #11
 800406c:	d917      	bls.n	800409e <_malloc_r+0xc2>
 800406e:	1961      	adds	r1, r4, r5
 8004070:	42a3      	cmp	r3, r4
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	6059      	strne	r1, [r3, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	bf08      	it	eq
 800407c:	f8c8 1000 	streq.w	r1, [r8]
 8004080:	5162      	str	r2, [r4, r5]
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f82f 	bl	80040e8 <__malloc_unlock>
 800408a:	f104 000b 	add.w	r0, r4, #11
 800408e:	1d23      	adds	r3, r4, #4
 8004090:	f020 0007 	bic.w	r0, r0, #7
 8004094:	1ac2      	subs	r2, r0, r3
 8004096:	bf1c      	itt	ne
 8004098:	1a1b      	subne	r3, r3, r0
 800409a:	50a3      	strne	r3, [r4, r2]
 800409c:	e7af      	b.n	8003ffe <_malloc_r+0x22>
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	bf0c      	ite	eq
 80040a4:	f8c8 2000 	streq.w	r2, [r8]
 80040a8:	605a      	strne	r2, [r3, #4]
 80040aa:	e7eb      	b.n	8004084 <_malloc_r+0xa8>
 80040ac:	4623      	mov	r3, r4
 80040ae:	6864      	ldr	r4, [r4, #4]
 80040b0:	e7ae      	b.n	8004010 <_malloc_r+0x34>
 80040b2:	463c      	mov	r4, r7
 80040b4:	687f      	ldr	r7, [r7, #4]
 80040b6:	e7b6      	b.n	8004026 <_malloc_r+0x4a>
 80040b8:	461a      	mov	r2, r3
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d1fb      	bne.n	80040b8 <_malloc_r+0xdc>
 80040c0:	2300      	movs	r3, #0
 80040c2:	6053      	str	r3, [r2, #4]
 80040c4:	e7de      	b.n	8004084 <_malloc_r+0xa8>
 80040c6:	230c      	movs	r3, #12
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f80c 	bl	80040e8 <__malloc_unlock>
 80040d0:	e794      	b.n	8003ffc <_malloc_r+0x20>
 80040d2:	6005      	str	r5, [r0, #0]
 80040d4:	e7d6      	b.n	8004084 <_malloc_r+0xa8>
 80040d6:	bf00      	nop
 80040d8:	2000017c 	.word	0x2000017c

080040dc <__malloc_lock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	@ (80040e4 <__malloc_lock+0x8>)
 80040de:	f000 babe 	b.w	800465e <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	200002c0 	.word	0x200002c0

080040e8 <__malloc_unlock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	@ (80040f0 <__malloc_unlock+0x8>)
 80040ea:	f000 bab9 	b.w	8004660 <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	200002c0 	.word	0x200002c0

080040f4 <std>:
 80040f4:	2300      	movs	r3, #0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	4604      	mov	r4, r0
 80040fa:	e9c0 3300 	strd	r3, r3, [r0]
 80040fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004102:	6083      	str	r3, [r0, #8]
 8004104:	8181      	strh	r1, [r0, #12]
 8004106:	6643      	str	r3, [r0, #100]	@ 0x64
 8004108:	81c2      	strh	r2, [r0, #14]
 800410a:	6183      	str	r3, [r0, #24]
 800410c:	4619      	mov	r1, r3
 800410e:	2208      	movs	r2, #8
 8004110:	305c      	adds	r0, #92	@ 0x5c
 8004112:	f000 fa1b 	bl	800454c <memset>
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <std+0x58>)
 8004118:	6263      	str	r3, [r4, #36]	@ 0x24
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <std+0x5c>)
 800411c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <std+0x60>)
 8004120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <std+0x64>)
 8004124:	6323      	str	r3, [r4, #48]	@ 0x30
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x68>)
 8004128:	6224      	str	r4, [r4, #32]
 800412a:	429c      	cmp	r4, r3
 800412c:	d006      	beq.n	800413c <std+0x48>
 800412e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004132:	4294      	cmp	r4, r2
 8004134:	d002      	beq.n	800413c <std+0x48>
 8004136:	33d0      	adds	r3, #208	@ 0xd0
 8004138:	429c      	cmp	r4, r3
 800413a:	d105      	bne.n	8004148 <std+0x54>
 800413c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f000 ba8a 	b.w	800465c <__retarget_lock_init_recursive>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	0800439d 	.word	0x0800439d
 8004150:	080043bf 	.word	0x080043bf
 8004154:	080043f7 	.word	0x080043f7
 8004158:	0800441b 	.word	0x0800441b
 800415c:	20000180 	.word	0x20000180

08004160 <stdio_exit_handler>:
 8004160:	4a02      	ldr	r2, [pc, #8]	@ (800416c <stdio_exit_handler+0xc>)
 8004162:	4903      	ldr	r1, [pc, #12]	@ (8004170 <stdio_exit_handler+0x10>)
 8004164:	4803      	ldr	r0, [pc, #12]	@ (8004174 <stdio_exit_handler+0x14>)
 8004166:	f000 b869 	b.w	800423c <_fwalk_sglue>
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c
 8004170:	0800504d 	.word	0x0800504d
 8004174:	2000001c 	.word	0x2000001c

08004178 <cleanup_stdio>:
 8004178:	6841      	ldr	r1, [r0, #4]
 800417a:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <cleanup_stdio+0x34>)
 800417c:	4299      	cmp	r1, r3
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
 8004182:	d001      	beq.n	8004188 <cleanup_stdio+0x10>
 8004184:	f000 ff62 	bl	800504c <_fflush_r>
 8004188:	68a1      	ldr	r1, [r4, #8]
 800418a:	4b09      	ldr	r3, [pc, #36]	@ (80041b0 <cleanup_stdio+0x38>)
 800418c:	4299      	cmp	r1, r3
 800418e:	d002      	beq.n	8004196 <cleanup_stdio+0x1e>
 8004190:	4620      	mov	r0, r4
 8004192:	f000 ff5b 	bl	800504c <_fflush_r>
 8004196:	68e1      	ldr	r1, [r4, #12]
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <cleanup_stdio+0x3c>)
 800419a:	4299      	cmp	r1, r3
 800419c:	d004      	beq.n	80041a8 <cleanup_stdio+0x30>
 800419e:	4620      	mov	r0, r4
 80041a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a4:	f000 bf52 	b.w	800504c <_fflush_r>
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	bf00      	nop
 80041ac:	20000180 	.word	0x20000180
 80041b0:	200001e8 	.word	0x200001e8
 80041b4:	20000250 	.word	0x20000250

080041b8 <global_stdio_init.part.0>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <global_stdio_init.part.0+0x30>)
 80041bc:	4c0b      	ldr	r4, [pc, #44]	@ (80041ec <global_stdio_init.part.0+0x34>)
 80041be:	4a0c      	ldr	r2, [pc, #48]	@ (80041f0 <global_stdio_init.part.0+0x38>)
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	4620      	mov	r0, r4
 80041c4:	2200      	movs	r2, #0
 80041c6:	2104      	movs	r1, #4
 80041c8:	f7ff ff94 	bl	80040f4 <std>
 80041cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041d0:	2201      	movs	r2, #1
 80041d2:	2109      	movs	r1, #9
 80041d4:	f7ff ff8e 	bl	80040f4 <std>
 80041d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041dc:	2202      	movs	r2, #2
 80041de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e2:	2112      	movs	r1, #18
 80041e4:	f7ff bf86 	b.w	80040f4 <std>
 80041e8:	200002b8 	.word	0x200002b8
 80041ec:	20000180 	.word	0x20000180
 80041f0:	08004161 	.word	0x08004161

080041f4 <__sfp_lock_acquire>:
 80041f4:	4801      	ldr	r0, [pc, #4]	@ (80041fc <__sfp_lock_acquire+0x8>)
 80041f6:	f000 ba32 	b.w	800465e <__retarget_lock_acquire_recursive>
 80041fa:	bf00      	nop
 80041fc:	200002c1 	.word	0x200002c1

08004200 <__sfp_lock_release>:
 8004200:	4801      	ldr	r0, [pc, #4]	@ (8004208 <__sfp_lock_release+0x8>)
 8004202:	f000 ba2d 	b.w	8004660 <__retarget_lock_release_recursive>
 8004206:	bf00      	nop
 8004208:	200002c1 	.word	0x200002c1

0800420c <__sinit>:
 800420c:	b510      	push	{r4, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	f7ff fff0 	bl	80041f4 <__sfp_lock_acquire>
 8004214:	6a23      	ldr	r3, [r4, #32]
 8004216:	b11b      	cbz	r3, 8004220 <__sinit+0x14>
 8004218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421c:	f7ff bff0 	b.w	8004200 <__sfp_lock_release>
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <__sinit+0x28>)
 8004222:	6223      	str	r3, [r4, #32]
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__sinit+0x2c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f5      	bne.n	8004218 <__sinit+0xc>
 800422c:	f7ff ffc4 	bl	80041b8 <global_stdio_init.part.0>
 8004230:	e7f2      	b.n	8004218 <__sinit+0xc>
 8004232:	bf00      	nop
 8004234:	08004179 	.word	0x08004179
 8004238:	200002b8 	.word	0x200002b8

0800423c <_fwalk_sglue>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	4607      	mov	r7, r0
 8004242:	4688      	mov	r8, r1
 8004244:	4614      	mov	r4, r2
 8004246:	2600      	movs	r6, #0
 8004248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800424c:	f1b9 0901 	subs.w	r9, r9, #1
 8004250:	d505      	bpl.n	800425e <_fwalk_sglue+0x22>
 8004252:	6824      	ldr	r4, [r4, #0]
 8004254:	2c00      	cmp	r4, #0
 8004256:	d1f7      	bne.n	8004248 <_fwalk_sglue+0xc>
 8004258:	4630      	mov	r0, r6
 800425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425e:	89ab      	ldrh	r3, [r5, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d907      	bls.n	8004274 <_fwalk_sglue+0x38>
 8004264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004268:	3301      	adds	r3, #1
 800426a:	d003      	beq.n	8004274 <_fwalk_sglue+0x38>
 800426c:	4629      	mov	r1, r5
 800426e:	4638      	mov	r0, r7
 8004270:	47c0      	blx	r8
 8004272:	4306      	orrs	r6, r0
 8004274:	3568      	adds	r5, #104	@ 0x68
 8004276:	e7e9      	b.n	800424c <_fwalk_sglue+0x10>

08004278 <iprintf>:
 8004278:	b40f      	push	{r0, r1, r2, r3}
 800427a:	b507      	push	{r0, r1, r2, lr}
 800427c:	4906      	ldr	r1, [pc, #24]	@ (8004298 <iprintf+0x20>)
 800427e:	ab04      	add	r3, sp, #16
 8004280:	6808      	ldr	r0, [r1, #0]
 8004282:	f853 2b04 	ldr.w	r2, [r3], #4
 8004286:	6881      	ldr	r1, [r0, #8]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	f000 fbb7 	bl	80049fc <_vfiprintf_r>
 800428e:	b003      	add	sp, #12
 8004290:	f85d eb04 	ldr.w	lr, [sp], #4
 8004294:	b004      	add	sp, #16
 8004296:	4770      	bx	lr
 8004298:	20000018 	.word	0x20000018

0800429c <_puts_r>:
 800429c:	6a03      	ldr	r3, [r0, #32]
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	6884      	ldr	r4, [r0, #8]
 80042a2:	4605      	mov	r5, r0
 80042a4:	460e      	mov	r6, r1
 80042a6:	b90b      	cbnz	r3, 80042ac <_puts_r+0x10>
 80042a8:	f7ff ffb0 	bl	800420c <__sinit>
 80042ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ae:	07db      	lsls	r3, r3, #31
 80042b0:	d405      	bmi.n	80042be <_puts_r+0x22>
 80042b2:	89a3      	ldrh	r3, [r4, #12]
 80042b4:	0598      	lsls	r0, r3, #22
 80042b6:	d402      	bmi.n	80042be <_puts_r+0x22>
 80042b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ba:	f000 f9d0 	bl	800465e <__retarget_lock_acquire_recursive>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	0719      	lsls	r1, r3, #28
 80042c2:	d502      	bpl.n	80042ca <_puts_r+0x2e>
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d135      	bne.n	8004336 <_puts_r+0x9a>
 80042ca:	4621      	mov	r1, r4
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f8e7 	bl	80044a0 <__swsetup_r>
 80042d2:	b380      	cbz	r0, 8004336 <_puts_r+0x9a>
 80042d4:	f04f 35ff 	mov.w	r5, #4294967295
 80042d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042da:	07da      	lsls	r2, r3, #31
 80042dc:	d405      	bmi.n	80042ea <_puts_r+0x4e>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	059b      	lsls	r3, r3, #22
 80042e2:	d402      	bmi.n	80042ea <_puts_r+0x4e>
 80042e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042e6:	f000 f9bb 	bl	8004660 <__retarget_lock_release_recursive>
 80042ea:	4628      	mov	r0, r5
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da04      	bge.n	80042fc <_puts_r+0x60>
 80042f2:	69a2      	ldr	r2, [r4, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	dc17      	bgt.n	8004328 <_puts_r+0x8c>
 80042f8:	290a      	cmp	r1, #10
 80042fa:	d015      	beq.n	8004328 <_puts_r+0x8c>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	6022      	str	r2, [r4, #0]
 8004302:	7019      	strb	r1, [r3, #0]
 8004304:	68a3      	ldr	r3, [r4, #8]
 8004306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800430a:	3b01      	subs	r3, #1
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	2900      	cmp	r1, #0
 8004310:	d1ed      	bne.n	80042ee <_puts_r+0x52>
 8004312:	2b00      	cmp	r3, #0
 8004314:	da11      	bge.n	800433a <_puts_r+0x9e>
 8004316:	4622      	mov	r2, r4
 8004318:	210a      	movs	r1, #10
 800431a:	4628      	mov	r0, r5
 800431c:	f000 f881 	bl	8004422 <__swbuf_r>
 8004320:	3001      	adds	r0, #1
 8004322:	d0d7      	beq.n	80042d4 <_puts_r+0x38>
 8004324:	250a      	movs	r5, #10
 8004326:	e7d7      	b.n	80042d8 <_puts_r+0x3c>
 8004328:	4622      	mov	r2, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f879 	bl	8004422 <__swbuf_r>
 8004330:	3001      	adds	r0, #1
 8004332:	d1e7      	bne.n	8004304 <_puts_r+0x68>
 8004334:	e7ce      	b.n	80042d4 <_puts_r+0x38>
 8004336:	3e01      	subs	r6, #1
 8004338:	e7e4      	b.n	8004304 <_puts_r+0x68>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	6022      	str	r2, [r4, #0]
 8004340:	220a      	movs	r2, #10
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e7ee      	b.n	8004324 <_puts_r+0x88>
	...

08004348 <puts>:
 8004348:	4b02      	ldr	r3, [pc, #8]	@ (8004354 <puts+0xc>)
 800434a:	4601      	mov	r1, r0
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f7ff bfa5 	b.w	800429c <_puts_r>
 8004352:	bf00      	nop
 8004354:	20000018 	.word	0x20000018

08004358 <siprintf>:
 8004358:	b40e      	push	{r1, r2, r3}
 800435a:	b510      	push	{r4, lr}
 800435c:	b09d      	sub	sp, #116	@ 0x74
 800435e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004360:	9002      	str	r0, [sp, #8]
 8004362:	9006      	str	r0, [sp, #24]
 8004364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004368:	480a      	ldr	r0, [pc, #40]	@ (8004394 <siprintf+0x3c>)
 800436a:	9107      	str	r1, [sp, #28]
 800436c:	9104      	str	r1, [sp, #16]
 800436e:	490a      	ldr	r1, [pc, #40]	@ (8004398 <siprintf+0x40>)
 8004370:	f853 2b04 	ldr.w	r2, [r3], #4
 8004374:	9105      	str	r1, [sp, #20]
 8004376:	2400      	movs	r4, #0
 8004378:	a902      	add	r1, sp, #8
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004380:	f000 fa16 	bl	80047b0 <_svfiprintf_r>
 8004384:	9b02      	ldr	r3, [sp, #8]
 8004386:	701c      	strb	r4, [r3, #0]
 8004388:	b01d      	add	sp, #116	@ 0x74
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438e:	b003      	add	sp, #12
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000018 	.word	0x20000018
 8004398:	ffff0208 	.word	0xffff0208

0800439c <__sread>:
 800439c:	b510      	push	{r4, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	f000 f8fc 	bl	80045a0 <_read_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	bfab      	itete	ge
 80043ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ae:	89a3      	ldrhlt	r3, [r4, #12]
 80043b0:	181b      	addge	r3, r3, r0
 80043b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043b6:	bfac      	ite	ge
 80043b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043ba:	81a3      	strhlt	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__swrite>:
 80043be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	461f      	mov	r7, r3
 80043c4:	898b      	ldrh	r3, [r1, #12]
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	4616      	mov	r6, r2
 80043ce:	d505      	bpl.n	80043dc <__swrite+0x1e>
 80043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d4:	2302      	movs	r3, #2
 80043d6:	2200      	movs	r2, #0
 80043d8:	f000 f8d0 	bl	800457c <_lseek_r>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	4632      	mov	r2, r6
 80043ea:	463b      	mov	r3, r7
 80043ec:	4628      	mov	r0, r5
 80043ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f2:	f000 b8f7 	b.w	80045e4 <_write_r>

080043f6 <__sseek>:
 80043f6:	b510      	push	{r4, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fe:	f000 f8bd 	bl	800457c <_lseek_r>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	bf15      	itete	ne
 8004408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800440a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800440e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004412:	81a3      	strheq	r3, [r4, #12]
 8004414:	bf18      	it	ne
 8004416:	81a3      	strhne	r3, [r4, #12]
 8004418:	bd10      	pop	{r4, pc}

0800441a <__sclose>:
 800441a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441e:	f000 b89d 	b.w	800455c <_close_r>

08004422 <__swbuf_r>:
 8004422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004424:	460e      	mov	r6, r1
 8004426:	4614      	mov	r4, r2
 8004428:	4605      	mov	r5, r0
 800442a:	b118      	cbz	r0, 8004434 <__swbuf_r+0x12>
 800442c:	6a03      	ldr	r3, [r0, #32]
 800442e:	b90b      	cbnz	r3, 8004434 <__swbuf_r+0x12>
 8004430:	f7ff feec 	bl	800420c <__sinit>
 8004434:	69a3      	ldr	r3, [r4, #24]
 8004436:	60a3      	str	r3, [r4, #8]
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	071a      	lsls	r2, r3, #28
 800443c:	d501      	bpl.n	8004442 <__swbuf_r+0x20>
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	b943      	cbnz	r3, 8004454 <__swbuf_r+0x32>
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f82b 	bl	80044a0 <__swsetup_r>
 800444a:	b118      	cbz	r0, 8004454 <__swbuf_r+0x32>
 800444c:	f04f 37ff 	mov.w	r7, #4294967295
 8004450:	4638      	mov	r0, r7
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	6922      	ldr	r2, [r4, #16]
 8004458:	1a98      	subs	r0, r3, r2
 800445a:	6963      	ldr	r3, [r4, #20]
 800445c:	b2f6      	uxtb	r6, r6
 800445e:	4283      	cmp	r3, r0
 8004460:	4637      	mov	r7, r6
 8004462:	dc05      	bgt.n	8004470 <__swbuf_r+0x4e>
 8004464:	4621      	mov	r1, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 fdf0 	bl	800504c <_fflush_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	d1ed      	bne.n	800444c <__swbuf_r+0x2a>
 8004470:	68a3      	ldr	r3, [r4, #8]
 8004472:	3b01      	subs	r3, #1
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	701e      	strb	r6, [r3, #0]
 800447e:	6962      	ldr	r2, [r4, #20]
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	429a      	cmp	r2, r3
 8004484:	d004      	beq.n	8004490 <__swbuf_r+0x6e>
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	07db      	lsls	r3, r3, #31
 800448a:	d5e1      	bpl.n	8004450 <__swbuf_r+0x2e>
 800448c:	2e0a      	cmp	r6, #10
 800448e:	d1df      	bne.n	8004450 <__swbuf_r+0x2e>
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fdda 	bl	800504c <_fflush_r>
 8004498:	2800      	cmp	r0, #0
 800449a:	d0d9      	beq.n	8004450 <__swbuf_r+0x2e>
 800449c:	e7d6      	b.n	800444c <__swbuf_r+0x2a>
	...

080044a0 <__swsetup_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4b29      	ldr	r3, [pc, #164]	@ (8004548 <__swsetup_r+0xa8>)
 80044a4:	4605      	mov	r5, r0
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	460c      	mov	r4, r1
 80044aa:	b118      	cbz	r0, 80044b4 <__swsetup_r+0x14>
 80044ac:	6a03      	ldr	r3, [r0, #32]
 80044ae:	b90b      	cbnz	r3, 80044b4 <__swsetup_r+0x14>
 80044b0:	f7ff feac 	bl	800420c <__sinit>
 80044b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b8:	0719      	lsls	r1, r3, #28
 80044ba:	d422      	bmi.n	8004502 <__swsetup_r+0x62>
 80044bc:	06da      	lsls	r2, r3, #27
 80044be:	d407      	bmi.n	80044d0 <__swsetup_r+0x30>
 80044c0:	2209      	movs	r2, #9
 80044c2:	602a      	str	r2, [r5, #0]
 80044c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	e033      	b.n	8004538 <__swsetup_r+0x98>
 80044d0:	0758      	lsls	r0, r3, #29
 80044d2:	d512      	bpl.n	80044fa <__swsetup_r+0x5a>
 80044d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044d6:	b141      	cbz	r1, 80044ea <__swsetup_r+0x4a>
 80044d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044dc:	4299      	cmp	r1, r3
 80044de:	d002      	beq.n	80044e6 <__swsetup_r+0x46>
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f8bf 	bl	8004664 <_free_r>
 80044e6:	2300      	movs	r3, #0
 80044e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	2300      	movs	r3, #0
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f043 0308 	orr.w	r3, r3, #8
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	b94b      	cbnz	r3, 800451a <__swsetup_r+0x7a>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d003      	beq.n	800451a <__swsetup_r+0x7a>
 8004512:	4621      	mov	r1, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 fde7 	bl	80050e8 <__smakebuf_r>
 800451a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451e:	f013 0201 	ands.w	r2, r3, #1
 8004522:	d00a      	beq.n	800453a <__swsetup_r+0x9a>
 8004524:	2200      	movs	r2, #0
 8004526:	60a2      	str	r2, [r4, #8]
 8004528:	6962      	ldr	r2, [r4, #20]
 800452a:	4252      	negs	r2, r2
 800452c:	61a2      	str	r2, [r4, #24]
 800452e:	6922      	ldr	r2, [r4, #16]
 8004530:	b942      	cbnz	r2, 8004544 <__swsetup_r+0xa4>
 8004532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004536:	d1c5      	bne.n	80044c4 <__swsetup_r+0x24>
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	0799      	lsls	r1, r3, #30
 800453c:	bf58      	it	pl
 800453e:	6962      	ldrpl	r2, [r4, #20]
 8004540:	60a2      	str	r2, [r4, #8]
 8004542:	e7f4      	b.n	800452e <__swsetup_r+0x8e>
 8004544:	2000      	movs	r0, #0
 8004546:	e7f7      	b.n	8004538 <__swsetup_r+0x98>
 8004548:	20000018 	.word	0x20000018

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <_close_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d06      	ldr	r5, [pc, #24]	@ (8004578 <_close_r+0x1c>)
 8004560:	2300      	movs	r3, #0
 8004562:	4604      	mov	r4, r0
 8004564:	4608      	mov	r0, r1
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	f7fd fbc6 	bl	8001cf8 <_close>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_close_r+0x1a>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_close_r+0x1a>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	200002bc 	.word	0x200002bc

0800457c <_lseek_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	@ (800459c <_lseek_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fd fbdb 	bl	8001d46 <_lseek>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_lseek_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_lseek_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	200002bc 	.word	0x200002bc

080045a0 <_read_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	@ (80045c0 <_read_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fd fb69 	bl	8001c86 <_read>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_read_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_read_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	200002bc 	.word	0x200002bc

080045c4 <_sbrk_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d06      	ldr	r5, [pc, #24]	@ (80045e0 <_sbrk_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fd fbc6 	bl	8001d60 <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_sbrk_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_sbrk_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	200002bc 	.word	0x200002bc

080045e4 <_write_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d07      	ldr	r5, [pc, #28]	@ (8004604 <_write_r+0x20>)
 80045e8:	4604      	mov	r4, r0
 80045ea:	4608      	mov	r0, r1
 80045ec:	4611      	mov	r1, r2
 80045ee:	2200      	movs	r2, #0
 80045f0:	602a      	str	r2, [r5, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7fd fb64 	bl	8001cc0 <_write>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_write_r+0x1e>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_write_r+0x1e>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	200002bc 	.word	0x200002bc

08004608 <__errno>:
 8004608:	4b01      	ldr	r3, [pc, #4]	@ (8004610 <__errno+0x8>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000018 	.word	0x20000018

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	@ (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	@ (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	@ (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	@ (8004658 <__libc_init_array+0x44>)
 8004628:	f000 fe1a 	bl	8005260 <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	080060d8 	.word	0x080060d8
 8004650:	080060d8 	.word	0x080060d8
 8004654:	080060d8 	.word	0x080060d8
 8004658:	080060dc 	.word	0x080060dc

0800465c <__retarget_lock_init_recursive>:
 800465c:	4770      	bx	lr

0800465e <__retarget_lock_acquire_recursive>:
 800465e:	4770      	bx	lr

08004660 <__retarget_lock_release_recursive>:
 8004660:	4770      	bx	lr
	...

08004664 <_free_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4605      	mov	r5, r0
 8004668:	2900      	cmp	r1, #0
 800466a:	d041      	beq.n	80046f0 <_free_r+0x8c>
 800466c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004670:	1f0c      	subs	r4, r1, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	18e4      	addlt	r4, r4, r3
 8004678:	f7ff fd30 	bl	80040dc <__malloc_lock>
 800467c:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <_free_r+0x90>)
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x2c>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	4628      	mov	r0, r5
 8004688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800468c:	f7ff bd2c 	b.w	80040e8 <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x42>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	1821      	adds	r1, r4, r0
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x1e>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x4c>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x42>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1850      	adds	r0, r2, r1
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x6c>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	4401      	add	r1, r0
 80046bc:	1850      	adds	r0, r2, r1
 80046be:	4283      	cmp	r3, r0
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x22>
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	4408      	add	r0, r1
 80046cc:	6010      	str	r0, [r2, #0]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x22>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x74>
 80046d2:	230c      	movs	r3, #12
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x22>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	1821      	adds	r1, r4, r0
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf04      	itt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	bf04      	itt	eq
 80046e8:	1809      	addeq	r1, r1, r0
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7ca      	b.n	8004686 <_free_r+0x22>
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	2000017c 	.word	0x2000017c

080046f8 <__ssputs_r>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	688e      	ldr	r6, [r1, #8]
 80046fe:	461f      	mov	r7, r3
 8004700:	42be      	cmp	r6, r7
 8004702:	680b      	ldr	r3, [r1, #0]
 8004704:	4682      	mov	sl, r0
 8004706:	460c      	mov	r4, r1
 8004708:	4690      	mov	r8, r2
 800470a:	d82d      	bhi.n	8004768 <__ssputs_r+0x70>
 800470c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004714:	d026      	beq.n	8004764 <__ssputs_r+0x6c>
 8004716:	6965      	ldr	r5, [r4, #20]
 8004718:	6909      	ldr	r1, [r1, #16]
 800471a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800471e:	eba3 0901 	sub.w	r9, r3, r1
 8004722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004726:	1c7b      	adds	r3, r7, #1
 8004728:	444b      	add	r3, r9
 800472a:	106d      	asrs	r5, r5, #1
 800472c:	429d      	cmp	r5, r3
 800472e:	bf38      	it	cc
 8004730:	461d      	movcc	r5, r3
 8004732:	0553      	lsls	r3, r2, #21
 8004734:	d527      	bpl.n	8004786 <__ssputs_r+0x8e>
 8004736:	4629      	mov	r1, r5
 8004738:	f7ff fc50 	bl	8003fdc <_malloc_r>
 800473c:	4606      	mov	r6, r0
 800473e:	b360      	cbz	r0, 800479a <__ssputs_r+0xa2>
 8004740:	6921      	ldr	r1, [r4, #16]
 8004742:	464a      	mov	r2, r9
 8004744:	f000 fd48 	bl	80051d8 <memcpy>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800474e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	6126      	str	r6, [r4, #16]
 8004756:	6165      	str	r5, [r4, #20]
 8004758:	444e      	add	r6, r9
 800475a:	eba5 0509 	sub.w	r5, r5, r9
 800475e:	6026      	str	r6, [r4, #0]
 8004760:	60a5      	str	r5, [r4, #8]
 8004762:	463e      	mov	r6, r7
 8004764:	42be      	cmp	r6, r7
 8004766:	d900      	bls.n	800476a <__ssputs_r+0x72>
 8004768:	463e      	mov	r6, r7
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	4632      	mov	r2, r6
 800476e:	4641      	mov	r1, r8
 8004770:	f000 fcf6 	bl	8005160 <memmove>
 8004774:	68a3      	ldr	r3, [r4, #8]
 8004776:	1b9b      	subs	r3, r3, r6
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4433      	add	r3, r6
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	2000      	movs	r0, #0
 8004782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004786:	462a      	mov	r2, r5
 8004788:	f000 fd34 	bl	80051f4 <_realloc_r>
 800478c:	4606      	mov	r6, r0
 800478e:	2800      	cmp	r0, #0
 8004790:	d1e0      	bne.n	8004754 <__ssputs_r+0x5c>
 8004792:	6921      	ldr	r1, [r4, #16]
 8004794:	4650      	mov	r0, sl
 8004796:	f7ff ff65 	bl	8004664 <_free_r>
 800479a:	230c      	movs	r3, #12
 800479c:	f8ca 3000 	str.w	r3, [sl]
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a6:	81a3      	strh	r3, [r4, #12]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e7e9      	b.n	8004782 <__ssputs_r+0x8a>
	...

080047b0 <_svfiprintf_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	4698      	mov	r8, r3
 80047b6:	898b      	ldrh	r3, [r1, #12]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	b09d      	sub	sp, #116	@ 0x74
 80047bc:	4607      	mov	r7, r0
 80047be:	460d      	mov	r5, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	d510      	bpl.n	80047e6 <_svfiprintf_r+0x36>
 80047c4:	690b      	ldr	r3, [r1, #16]
 80047c6:	b973      	cbnz	r3, 80047e6 <_svfiprintf_r+0x36>
 80047c8:	2140      	movs	r1, #64	@ 0x40
 80047ca:	f7ff fc07 	bl	8003fdc <_malloc_r>
 80047ce:	6028      	str	r0, [r5, #0]
 80047d0:	6128      	str	r0, [r5, #16]
 80047d2:	b930      	cbnz	r0, 80047e2 <_svfiprintf_r+0x32>
 80047d4:	230c      	movs	r3, #12
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b01d      	add	sp, #116	@ 0x74
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	2340      	movs	r3, #64	@ 0x40
 80047e4:	616b      	str	r3, [r5, #20]
 80047e6:	2300      	movs	r3, #0
 80047e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ea:	2320      	movs	r3, #32
 80047ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f4:	2330      	movs	r3, #48	@ 0x30
 80047f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004994 <_svfiprintf_r+0x1e4>
 80047fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047fe:	f04f 0901 	mov.w	r9, #1
 8004802:	4623      	mov	r3, r4
 8004804:	469a      	mov	sl, r3
 8004806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800480a:	b10a      	cbz	r2, 8004810 <_svfiprintf_r+0x60>
 800480c:	2a25      	cmp	r2, #37	@ 0x25
 800480e:	d1f9      	bne.n	8004804 <_svfiprintf_r+0x54>
 8004810:	ebba 0b04 	subs.w	fp, sl, r4
 8004814:	d00b      	beq.n	800482e <_svfiprintf_r+0x7e>
 8004816:	465b      	mov	r3, fp
 8004818:	4622      	mov	r2, r4
 800481a:	4629      	mov	r1, r5
 800481c:	4638      	mov	r0, r7
 800481e:	f7ff ff6b 	bl	80046f8 <__ssputs_r>
 8004822:	3001      	adds	r0, #1
 8004824:	f000 80a7 	beq.w	8004976 <_svfiprintf_r+0x1c6>
 8004828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800482a:	445a      	add	r2, fp
 800482c:	9209      	str	r2, [sp, #36]	@ 0x24
 800482e:	f89a 3000 	ldrb.w	r3, [sl]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 809f 	beq.w	8004976 <_svfiprintf_r+0x1c6>
 8004838:	2300      	movs	r3, #0
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004842:	f10a 0a01 	add.w	sl, sl, #1
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	9307      	str	r3, [sp, #28]
 800484a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800484e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004850:	4654      	mov	r4, sl
 8004852:	2205      	movs	r2, #5
 8004854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004858:	484e      	ldr	r0, [pc, #312]	@ (8004994 <_svfiprintf_r+0x1e4>)
 800485a:	f7fb fcd9 	bl	8000210 <memchr>
 800485e:	9a04      	ldr	r2, [sp, #16]
 8004860:	b9d8      	cbnz	r0, 800489a <_svfiprintf_r+0xea>
 8004862:	06d0      	lsls	r0, r2, #27
 8004864:	bf44      	itt	mi
 8004866:	2320      	movmi	r3, #32
 8004868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800486c:	0711      	lsls	r1, r2, #28
 800486e:	bf44      	itt	mi
 8004870:	232b      	movmi	r3, #43	@ 0x2b
 8004872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004876:	f89a 3000 	ldrb.w	r3, [sl]
 800487a:	2b2a      	cmp	r3, #42	@ 0x2a
 800487c:	d015      	beq.n	80048aa <_svfiprintf_r+0xfa>
 800487e:	9a07      	ldr	r2, [sp, #28]
 8004880:	4654      	mov	r4, sl
 8004882:	2000      	movs	r0, #0
 8004884:	f04f 0c0a 	mov.w	ip, #10
 8004888:	4621      	mov	r1, r4
 800488a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800488e:	3b30      	subs	r3, #48	@ 0x30
 8004890:	2b09      	cmp	r3, #9
 8004892:	d94b      	bls.n	800492c <_svfiprintf_r+0x17c>
 8004894:	b1b0      	cbz	r0, 80048c4 <_svfiprintf_r+0x114>
 8004896:	9207      	str	r2, [sp, #28]
 8004898:	e014      	b.n	80048c4 <_svfiprintf_r+0x114>
 800489a:	eba0 0308 	sub.w	r3, r0, r8
 800489e:	fa09 f303 	lsl.w	r3, r9, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	46a2      	mov	sl, r4
 80048a8:	e7d2      	b.n	8004850 <_svfiprintf_r+0xa0>
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	9103      	str	r1, [sp, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfbb      	ittet	lt
 80048b6:	425b      	neglt	r3, r3
 80048b8:	f042 0202 	orrlt.w	r2, r2, #2
 80048bc:	9307      	strge	r3, [sp, #28]
 80048be:	9307      	strlt	r3, [sp, #28]
 80048c0:	bfb8      	it	lt
 80048c2:	9204      	strlt	r2, [sp, #16]
 80048c4:	7823      	ldrb	r3, [r4, #0]
 80048c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80048c8:	d10a      	bne.n	80048e0 <_svfiprintf_r+0x130>
 80048ca:	7863      	ldrb	r3, [r4, #1]
 80048cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ce:	d132      	bne.n	8004936 <_svfiprintf_r+0x186>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048dc:	3402      	adds	r4, #2
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049a4 <_svfiprintf_r+0x1f4>
 80048e4:	7821      	ldrb	r1, [r4, #0]
 80048e6:	2203      	movs	r2, #3
 80048e8:	4650      	mov	r0, sl
 80048ea:	f7fb fc91 	bl	8000210 <memchr>
 80048ee:	b138      	cbz	r0, 8004900 <_svfiprintf_r+0x150>
 80048f0:	9b04      	ldr	r3, [sp, #16]
 80048f2:	eba0 000a 	sub.w	r0, r0, sl
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	4082      	lsls	r2, r0
 80048fa:	4313      	orrs	r3, r2
 80048fc:	3401      	adds	r4, #1
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004904:	4824      	ldr	r0, [pc, #144]	@ (8004998 <_svfiprintf_r+0x1e8>)
 8004906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800490a:	2206      	movs	r2, #6
 800490c:	f7fb fc80 	bl	8000210 <memchr>
 8004910:	2800      	cmp	r0, #0
 8004912:	d036      	beq.n	8004982 <_svfiprintf_r+0x1d2>
 8004914:	4b21      	ldr	r3, [pc, #132]	@ (800499c <_svfiprintf_r+0x1ec>)
 8004916:	bb1b      	cbnz	r3, 8004960 <_svfiprintf_r+0x1b0>
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	3307      	adds	r3, #7
 800491c:	f023 0307 	bic.w	r3, r3, #7
 8004920:	3308      	adds	r3, #8
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004926:	4433      	add	r3, r6
 8004928:	9309      	str	r3, [sp, #36]	@ 0x24
 800492a:	e76a      	b.n	8004802 <_svfiprintf_r+0x52>
 800492c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004930:	460c      	mov	r4, r1
 8004932:	2001      	movs	r0, #1
 8004934:	e7a8      	b.n	8004888 <_svfiprintf_r+0xd8>
 8004936:	2300      	movs	r3, #0
 8004938:	3401      	adds	r4, #1
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	4619      	mov	r1, r3
 800493e:	f04f 0c0a 	mov.w	ip, #10
 8004942:	4620      	mov	r0, r4
 8004944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004948:	3a30      	subs	r2, #48	@ 0x30
 800494a:	2a09      	cmp	r2, #9
 800494c:	d903      	bls.n	8004956 <_svfiprintf_r+0x1a6>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0c6      	beq.n	80048e0 <_svfiprintf_r+0x130>
 8004952:	9105      	str	r1, [sp, #20]
 8004954:	e7c4      	b.n	80048e0 <_svfiprintf_r+0x130>
 8004956:	fb0c 2101 	mla	r1, ip, r1, r2
 800495a:	4604      	mov	r4, r0
 800495c:	2301      	movs	r3, #1
 800495e:	e7f0      	b.n	8004942 <_svfiprintf_r+0x192>
 8004960:	ab03      	add	r3, sp, #12
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	462a      	mov	r2, r5
 8004966:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <_svfiprintf_r+0x1f0>)
 8004968:	a904      	add	r1, sp, #16
 800496a:	4638      	mov	r0, r7
 800496c:	f3af 8000 	nop.w
 8004970:	1c42      	adds	r2, r0, #1
 8004972:	4606      	mov	r6, r0
 8004974:	d1d6      	bne.n	8004924 <_svfiprintf_r+0x174>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	065b      	lsls	r3, r3, #25
 800497a:	f53f af2d 	bmi.w	80047d8 <_svfiprintf_r+0x28>
 800497e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004980:	e72c      	b.n	80047dc <_svfiprintf_r+0x2c>
 8004982:	ab03      	add	r3, sp, #12
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	462a      	mov	r2, r5
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <_svfiprintf_r+0x1f0>)
 800498a:	a904      	add	r1, sp, #16
 800498c:	4638      	mov	r0, r7
 800498e:	f000 f9bb 	bl	8004d08 <_printf_i>
 8004992:	e7ed      	b.n	8004970 <_svfiprintf_r+0x1c0>
 8004994:	0800609c 	.word	0x0800609c
 8004998:	080060a6 	.word	0x080060a6
 800499c:	00000000 	.word	0x00000000
 80049a0:	080046f9 	.word	0x080046f9
 80049a4:	080060a2 	.word	0x080060a2

080049a8 <__sfputc_r>:
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	b410      	push	{r4}
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	da08      	bge.n	80049c6 <__sfputc_r+0x1e>
 80049b4:	6994      	ldr	r4, [r2, #24]
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	db01      	blt.n	80049be <__sfputc_r+0x16>
 80049ba:	290a      	cmp	r1, #10
 80049bc:	d103      	bne.n	80049c6 <__sfputc_r+0x1e>
 80049be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c2:	f7ff bd2e 	b.w	8004422 <__swbuf_r>
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	1c58      	adds	r0, r3, #1
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	7019      	strb	r1, [r3, #0]
 80049ce:	4608      	mov	r0, r1
 80049d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <__sfputs_r>:
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	18d5      	adds	r5, r2, r3
 80049e0:	42ac      	cmp	r4, r5
 80049e2:	d101      	bne.n	80049e8 <__sfputs_r+0x12>
 80049e4:	2000      	movs	r0, #0
 80049e6:	e007      	b.n	80049f8 <__sfputs_r+0x22>
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	463a      	mov	r2, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ffda 	bl	80049a8 <__sfputc_r>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d1f3      	bne.n	80049e0 <__sfputs_r+0xa>
 80049f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049fc <_vfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	460d      	mov	r5, r1
 8004a02:	b09d      	sub	sp, #116	@ 0x74
 8004a04:	4614      	mov	r4, r2
 8004a06:	4698      	mov	r8, r3
 8004a08:	4606      	mov	r6, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <_vfiprintf_r+0x18>
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <_vfiprintf_r+0x18>
 8004a10:	f7ff fbfc 	bl	800420c <__sinit>
 8004a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a16:	07d9      	lsls	r1, r3, #31
 8004a18:	d405      	bmi.n	8004a26 <_vfiprintf_r+0x2a>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	059a      	lsls	r2, r3, #22
 8004a1e:	d402      	bmi.n	8004a26 <_vfiprintf_r+0x2a>
 8004a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a22:	f7ff fe1c 	bl	800465e <__retarget_lock_acquire_recursive>
 8004a26:	89ab      	ldrh	r3, [r5, #12]
 8004a28:	071b      	lsls	r3, r3, #28
 8004a2a:	d501      	bpl.n	8004a30 <_vfiprintf_r+0x34>
 8004a2c:	692b      	ldr	r3, [r5, #16]
 8004a2e:	b99b      	cbnz	r3, 8004a58 <_vfiprintf_r+0x5c>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff fd34 	bl	80044a0 <__swsetup_r>
 8004a38:	b170      	cbz	r0, 8004a58 <_vfiprintf_r+0x5c>
 8004a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a3c:	07dc      	lsls	r4, r3, #31
 8004a3e:	d504      	bpl.n	8004a4a <_vfiprintf_r+0x4e>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	b01d      	add	sp, #116	@ 0x74
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	0598      	lsls	r0, r3, #22
 8004a4e:	d4f7      	bmi.n	8004a40 <_vfiprintf_r+0x44>
 8004a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a52:	f7ff fe05 	bl	8004660 <__retarget_lock_release_recursive>
 8004a56:	e7f3      	b.n	8004a40 <_vfiprintf_r+0x44>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a66:	2330      	movs	r3, #48	@ 0x30
 8004a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c18 <_vfiprintf_r+0x21c>
 8004a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a70:	f04f 0901 	mov.w	r9, #1
 8004a74:	4623      	mov	r3, r4
 8004a76:	469a      	mov	sl, r3
 8004a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a7c:	b10a      	cbz	r2, 8004a82 <_vfiprintf_r+0x86>
 8004a7e:	2a25      	cmp	r2, #37	@ 0x25
 8004a80:	d1f9      	bne.n	8004a76 <_vfiprintf_r+0x7a>
 8004a82:	ebba 0b04 	subs.w	fp, sl, r4
 8004a86:	d00b      	beq.n	8004aa0 <_vfiprintf_r+0xa4>
 8004a88:	465b      	mov	r3, fp
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ffa1 	bl	80049d6 <__sfputs_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	f000 80a7 	beq.w	8004be8 <_vfiprintf_r+0x1ec>
 8004a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a9c:	445a      	add	r2, fp
 8004a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 809f 	beq.w	8004be8 <_vfiprintf_r+0x1ec>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ab4:	f10a 0a01 	add.w	sl, sl, #1
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	9307      	str	r3, [sp, #28]
 8004abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ac2:	4654      	mov	r4, sl
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aca:	4853      	ldr	r0, [pc, #332]	@ (8004c18 <_vfiprintf_r+0x21c>)
 8004acc:	f7fb fba0 	bl	8000210 <memchr>
 8004ad0:	9a04      	ldr	r2, [sp, #16]
 8004ad2:	b9d8      	cbnz	r0, 8004b0c <_vfiprintf_r+0x110>
 8004ad4:	06d1      	lsls	r1, r2, #27
 8004ad6:	bf44      	itt	mi
 8004ad8:	2320      	movmi	r3, #32
 8004ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ade:	0713      	lsls	r3, r2, #28
 8004ae0:	bf44      	itt	mi
 8004ae2:	232b      	movmi	r3, #43	@ 0x2b
 8004ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8004aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aee:	d015      	beq.n	8004b1c <_vfiprintf_r+0x120>
 8004af0:	9a07      	ldr	r2, [sp, #28]
 8004af2:	4654      	mov	r4, sl
 8004af4:	2000      	movs	r0, #0
 8004af6:	f04f 0c0a 	mov.w	ip, #10
 8004afa:	4621      	mov	r1, r4
 8004afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b00:	3b30      	subs	r3, #48	@ 0x30
 8004b02:	2b09      	cmp	r3, #9
 8004b04:	d94b      	bls.n	8004b9e <_vfiprintf_r+0x1a2>
 8004b06:	b1b0      	cbz	r0, 8004b36 <_vfiprintf_r+0x13a>
 8004b08:	9207      	str	r2, [sp, #28]
 8004b0a:	e014      	b.n	8004b36 <_vfiprintf_r+0x13a>
 8004b0c:	eba0 0308 	sub.w	r3, r0, r8
 8004b10:	fa09 f303 	lsl.w	r3, r9, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	46a2      	mov	sl, r4
 8004b1a:	e7d2      	b.n	8004ac2 <_vfiprintf_r+0xc6>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	1d19      	adds	r1, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	9103      	str	r1, [sp, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfbb      	ittet	lt
 8004b28:	425b      	neglt	r3, r3
 8004b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b2e:	9307      	strge	r3, [sp, #28]
 8004b30:	9307      	strlt	r3, [sp, #28]
 8004b32:	bfb8      	it	lt
 8004b34:	9204      	strlt	r2, [sp, #16]
 8004b36:	7823      	ldrb	r3, [r4, #0]
 8004b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b3a:	d10a      	bne.n	8004b52 <_vfiprintf_r+0x156>
 8004b3c:	7863      	ldrb	r3, [r4, #1]
 8004b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b40:	d132      	bne.n	8004ba8 <_vfiprintf_r+0x1ac>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	1d1a      	adds	r2, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	9203      	str	r2, [sp, #12]
 8004b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b4e:	3402      	adds	r4, #2
 8004b50:	9305      	str	r3, [sp, #20]
 8004b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c28 <_vfiprintf_r+0x22c>
 8004b56:	7821      	ldrb	r1, [r4, #0]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	4650      	mov	r0, sl
 8004b5c:	f7fb fb58 	bl	8000210 <memchr>
 8004b60:	b138      	cbz	r0, 8004b72 <_vfiprintf_r+0x176>
 8004b62:	9b04      	ldr	r3, [sp, #16]
 8004b64:	eba0 000a 	sub.w	r0, r0, sl
 8004b68:	2240      	movs	r2, #64	@ 0x40
 8004b6a:	4082      	lsls	r2, r0
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	3401      	adds	r4, #1
 8004b70:	9304      	str	r3, [sp, #16]
 8004b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b76:	4829      	ldr	r0, [pc, #164]	@ (8004c1c <_vfiprintf_r+0x220>)
 8004b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	f7fb fb47 	bl	8000210 <memchr>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d03f      	beq.n	8004c06 <_vfiprintf_r+0x20a>
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <_vfiprintf_r+0x224>)
 8004b88:	bb1b      	cbnz	r3, 8004bd2 <_vfiprintf_r+0x1d6>
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	3307      	adds	r3, #7
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	3308      	adds	r3, #8
 8004b94:	9303      	str	r3, [sp, #12]
 8004b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b98:	443b      	add	r3, r7
 8004b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b9c:	e76a      	b.n	8004a74 <_vfiprintf_r+0x78>
 8004b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	e7a8      	b.n	8004afa <_vfiprintf_r+0xfe>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	3401      	adds	r4, #1
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0c0a 	mov.w	ip, #10
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bba:	3a30      	subs	r2, #48	@ 0x30
 8004bbc:	2a09      	cmp	r2, #9
 8004bbe:	d903      	bls.n	8004bc8 <_vfiprintf_r+0x1cc>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0c6      	beq.n	8004b52 <_vfiprintf_r+0x156>
 8004bc4:	9105      	str	r1, [sp, #20]
 8004bc6:	e7c4      	b.n	8004b52 <_vfiprintf_r+0x156>
 8004bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bcc:	4604      	mov	r4, r0
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7f0      	b.n	8004bb4 <_vfiprintf_r+0x1b8>
 8004bd2:	ab03      	add	r3, sp, #12
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <_vfiprintf_r+0x228>)
 8004bda:	a904      	add	r1, sp, #16
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f3af 8000 	nop.w
 8004be2:	4607      	mov	r7, r0
 8004be4:	1c78      	adds	r0, r7, #1
 8004be6:	d1d6      	bne.n	8004b96 <_vfiprintf_r+0x19a>
 8004be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bea:	07d9      	lsls	r1, r3, #31
 8004bec:	d405      	bmi.n	8004bfa <_vfiprintf_r+0x1fe>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	059a      	lsls	r2, r3, #22
 8004bf2:	d402      	bmi.n	8004bfa <_vfiprintf_r+0x1fe>
 8004bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bf6:	f7ff fd33 	bl	8004660 <__retarget_lock_release_recursive>
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	065b      	lsls	r3, r3, #25
 8004bfe:	f53f af1f 	bmi.w	8004a40 <_vfiprintf_r+0x44>
 8004c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c04:	e71e      	b.n	8004a44 <_vfiprintf_r+0x48>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <_vfiprintf_r+0x228>)
 8004c0e:	a904      	add	r1, sp, #16
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f879 	bl	8004d08 <_printf_i>
 8004c16:	e7e4      	b.n	8004be2 <_vfiprintf_r+0x1e6>
 8004c18:	0800609c 	.word	0x0800609c
 8004c1c:	080060a6 	.word	0x080060a6
 8004c20:	00000000 	.word	0x00000000
 8004c24:	080049d7 	.word	0x080049d7
 8004c28:	080060a2 	.word	0x080060a2

08004c2c <_printf_common>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4616      	mov	r6, r2
 8004c32:	4698      	mov	r8, r3
 8004c34:	688a      	ldr	r2, [r1, #8]
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bfb8      	it	lt
 8004c40:	4613      	movlt	r3, r2
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c48:	4607      	mov	r7, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	b10a      	cbz	r2, 8004c52 <_printf_common+0x26>
 8004c4e:	3301      	adds	r3, #1
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	6833      	ldrmi	r3, [r6, #0]
 8004c5a:	3302      	addmi	r3, #2
 8004c5c:	6033      	strmi	r3, [r6, #0]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	f015 0506 	ands.w	r5, r5, #6
 8004c64:	d106      	bne.n	8004c74 <_printf_common+0x48>
 8004c66:	f104 0a19 	add.w	sl, r4, #25
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	6832      	ldr	r2, [r6, #0]
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	dc26      	bgt.n	8004cc2 <_printf_common+0x96>
 8004c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	3b00      	subs	r3, #0
 8004c7c:	bf18      	it	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	0692      	lsls	r2, r2, #26
 8004c82:	d42b      	bmi.n	8004cdc <_printf_common+0xb0>
 8004c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c88:	4641      	mov	r1, r8
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c8      	blx	r9
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d01e      	beq.n	8004cd0 <_printf_common+0xa4>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf02      	ittt	eq
 8004c9e:	68e5      	ldreq	r5, [r4, #12]
 8004ca0:	6833      	ldreq	r3, [r6, #0]
 8004ca2:	1aed      	subeq	r5, r5, r3
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	bf0c      	ite	eq
 8004ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cac:	2500      	movne	r5, #0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bfc4      	itt	gt
 8004cb2:	1a9b      	subgt	r3, r3, r2
 8004cb4:	18ed      	addgt	r5, r5, r3
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	341a      	adds	r4, #26
 8004cba:	42b5      	cmp	r5, r6
 8004cbc:	d11a      	bne.n	8004cf4 <_printf_common+0xc8>
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e008      	b.n	8004cd4 <_printf_common+0xa8>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4652      	mov	r2, sl
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4638      	mov	r0, r7
 8004cca:	47c8      	blx	r9
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d103      	bne.n	8004cd8 <_printf_common+0xac>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7c6      	b.n	8004c6a <_printf_common+0x3e>
 8004cdc:	18e1      	adds	r1, r4, r3
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	2030      	movs	r0, #48	@ 0x30
 8004ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ce6:	4422      	add	r2, r4
 8004ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	e7c7      	b.n	8004c84 <_printf_common+0x58>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	47c8      	blx	r9
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d0e6      	beq.n	8004cd0 <_printf_common+0xa4>
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7d9      	b.n	8004cba <_printf_common+0x8e>
	...

08004d08 <_printf_i>:
 8004d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	7e0f      	ldrb	r7, [r1, #24]
 8004d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d10:	2f78      	cmp	r7, #120	@ 0x78
 8004d12:	4691      	mov	r9, r2
 8004d14:	4680      	mov	r8, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	469a      	mov	sl, r3
 8004d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d1e:	d807      	bhi.n	8004d30 <_printf_i+0x28>
 8004d20:	2f62      	cmp	r7, #98	@ 0x62
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x32>
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	f000 80d1 	beq.w	8004ecc <_printf_i+0x1c4>
 8004d2a:	2f58      	cmp	r7, #88	@ 0x58
 8004d2c:	f000 80b8 	beq.w	8004ea0 <_printf_i+0x198>
 8004d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d38:	e03a      	b.n	8004db0 <_printf_i+0xa8>
 8004d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d3e:	2b15      	cmp	r3, #21
 8004d40:	d8f6      	bhi.n	8004d30 <_printf_i+0x28>
 8004d42:	a101      	add	r1, pc, #4	@ (adr r1, 8004d48 <_printf_i+0x40>)
 8004d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004db5 	.word	0x08004db5
 8004d50:	08004d31 	.word	0x08004d31
 8004d54:	08004d31 	.word	0x08004d31
 8004d58:	08004d31 	.word	0x08004d31
 8004d5c:	08004d31 	.word	0x08004d31
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004d31 	.word	0x08004d31
 8004d68:	08004d31 	.word	0x08004d31
 8004d6c:	08004d31 	.word	0x08004d31
 8004d70:	08004d31 	.word	0x08004d31
 8004d74:	08004eb3 	.word	0x08004eb3
 8004d78:	08004ddf 	.word	0x08004ddf
 8004d7c:	08004e6d 	.word	0x08004e6d
 8004d80:	08004d31 	.word	0x08004d31
 8004d84:	08004d31 	.word	0x08004d31
 8004d88:	08004ed5 	.word	0x08004ed5
 8004d8c:	08004d31 	.word	0x08004d31
 8004d90:	08004ddf 	.word	0x08004ddf
 8004d94:	08004d31 	.word	0x08004d31
 8004d98:	08004d31 	.word	0x08004d31
 8004d9c:	08004e75 	.word	0x08004e75
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6032      	str	r2, [r6, #0]
 8004da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db0:	2301      	movs	r3, #1
 8004db2:	e09c      	b.n	8004eee <_printf_i+0x1e6>
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	6031      	str	r1, [r6, #0]
 8004dbc:	0606      	lsls	r6, r0, #24
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0xbc>
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <_printf_i+0xc4>
 8004dc4:	0645      	lsls	r5, r0, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0xb8>
 8004dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	da03      	bge.n	8004dd8 <_printf_i+0xd0>
 8004dd0:	232d      	movs	r3, #45	@ 0x2d
 8004dd2:	426d      	negs	r5, r5
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	4858      	ldr	r0, [pc, #352]	@ (8004f3c <_printf_i+0x234>)
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e011      	b.n	8004e02 <_printf_i+0xfa>
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	0608      	lsls	r0, r1, #24
 8004de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de8:	d402      	bmi.n	8004df0 <_printf_i+0xe8>
 8004dea:	0649      	lsls	r1, r1, #25
 8004dec:	bf48      	it	mi
 8004dee:	b2ad      	uxthmi	r5, r5
 8004df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004df2:	4852      	ldr	r0, [pc, #328]	@ (8004f3c <_printf_i+0x234>)
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	bf14      	ite	ne
 8004df8:	230a      	movne	r3, #10
 8004dfa:	2308      	moveq	r3, #8
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e02:	6866      	ldr	r6, [r4, #4]
 8004e04:	60a6      	str	r6, [r4, #8]
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	db05      	blt.n	8004e16 <_printf_i+0x10e>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	432e      	orrs	r6, r5
 8004e0e:	f021 0104 	bic.w	r1, r1, #4
 8004e12:	6021      	str	r1, [r4, #0]
 8004e14:	d04b      	beq.n	8004eae <_printf_i+0x1a6>
 8004e16:	4616      	mov	r6, r2
 8004e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e20:	5dc7      	ldrb	r7, [r0, r7]
 8004e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e26:	462f      	mov	r7, r5
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	d9f4      	bls.n	8004e18 <_printf_i+0x110>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x142>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07df      	lsls	r7, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x142>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6861      	ldr	r1, [r4, #4]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	@ 0x30
 8004e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e4a:	1b92      	subs	r2, r2, r6
 8004e4c:	6122      	str	r2, [r4, #16]
 8004e4e:	f8cd a000 	str.w	sl, [sp]
 8004e52:	464b      	mov	r3, r9
 8004e54:	aa03      	add	r2, sp, #12
 8004e56:	4621      	mov	r1, r4
 8004e58:	4640      	mov	r0, r8
 8004e5a:	f7ff fee7 	bl	8004c2c <_printf_common>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d14a      	bne.n	8004ef8 <_printf_i+0x1f0>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f043 0320 	orr.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	4832      	ldr	r0, [pc, #200]	@ (8004f40 <_printf_i+0x238>)
 8004e76:	2778      	movs	r7, #120	@ 0x78
 8004e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	061f      	lsls	r7, r3, #24
 8004e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e86:	d402      	bmi.n	8004e8e <_printf_i+0x186>
 8004e88:	065f      	lsls	r7, r3, #25
 8004e8a:	bf48      	it	mi
 8004e8c:	b2ad      	uxthmi	r5, r5
 8004e8e:	6031      	str	r1, [r6, #0]
 8004e90:	07d9      	lsls	r1, r3, #31
 8004e92:	bf44      	itt	mi
 8004e94:	f043 0320 	orrmi.w	r3, r3, #32
 8004e98:	6023      	strmi	r3, [r4, #0]
 8004e9a:	b11d      	cbz	r5, 8004ea4 <_printf_i+0x19c>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e7ad      	b.n	8004dfc <_printf_i+0xf4>
 8004ea0:	4826      	ldr	r0, [pc, #152]	@ (8004f3c <_printf_i+0x234>)
 8004ea2:	e7e9      	b.n	8004e78 <_printf_i+0x170>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	e7f6      	b.n	8004e9c <_printf_i+0x194>
 8004eae:	4616      	mov	r6, r2
 8004eb0:	e7bd      	b.n	8004e2e <_printf_i+0x126>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	6961      	ldr	r1, [r4, #20]
 8004eb8:	1d18      	adds	r0, r3, #4
 8004eba:	6030      	str	r0, [r6, #0]
 8004ebc:	062e      	lsls	r6, r5, #24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0x1be>
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <_printf_i+0x1c4>
 8004ec6:	0668      	lsls	r0, r5, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0x1ba>
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	e7bc      	b.n	8004e4e <_printf_i+0x146>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	6032      	str	r2, [r6, #0]
 8004eda:	681e      	ldr	r6, [r3, #0]
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7fb f995 	bl	8000210 <memchr>
 8004ee6:	b108      	cbz	r0, 8004eec <_printf_i+0x1e4>
 8004ee8:	1b80      	subs	r0, r0, r6
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef6:	e7aa      	b.n	8004e4e <_printf_i+0x146>
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	4632      	mov	r2, r6
 8004efc:	4649      	mov	r1, r9
 8004efe:	4640      	mov	r0, r8
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0ad      	beq.n	8004e62 <_printf_i+0x15a>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d413      	bmi.n	8004f34 <_printf_i+0x22c>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e7a6      	b.n	8004e66 <_printf_i+0x15e>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4640      	mov	r0, r8
 8004f20:	47d0      	blx	sl
 8004f22:	3001      	adds	r0, #1
 8004f24:	d09d      	beq.n	8004e62 <_printf_i+0x15a>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1a5b      	subs	r3, r3, r1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf2      	bgt.n	8004f18 <_printf_i+0x210>
 8004f32:	e7eb      	b.n	8004f0c <_printf_i+0x204>
 8004f34:	2500      	movs	r5, #0
 8004f36:	f104 0619 	add.w	r6, r4, #25
 8004f3a:	e7f5      	b.n	8004f28 <_printf_i+0x220>
 8004f3c:	080060ad 	.word	0x080060ad
 8004f40:	080060be 	.word	0x080060be

08004f44 <__sflush_r>:
 8004f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	0716      	lsls	r6, r2, #28
 8004f4e:	4605      	mov	r5, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	d454      	bmi.n	8004ffe <__sflush_r+0xba>
 8004f54:	684b      	ldr	r3, [r1, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dc02      	bgt.n	8004f60 <__sflush_r+0x1c>
 8004f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dd48      	ble.n	8004ff2 <__sflush_r+0xae>
 8004f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d045      	beq.n	8004ff2 <__sflush_r+0xae>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f6c:	682f      	ldr	r7, [r5, #0]
 8004f6e:	6a21      	ldr	r1, [r4, #32]
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	d030      	beq.n	8004fd6 <__sflush_r+0x92>
 8004f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	0759      	lsls	r1, r3, #29
 8004f7a:	d505      	bpl.n	8004f88 <__sflush_r+0x44>
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f82:	b10b      	cbz	r3, 8004f88 <__sflush_r+0x44>
 8004f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f8c:	6a21      	ldr	r1, [r4, #32]
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b0      	blx	r6
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	d106      	bne.n	8004fa6 <__sflush_r+0x62>
 8004f98:	6829      	ldr	r1, [r5, #0]
 8004f9a:	291d      	cmp	r1, #29
 8004f9c:	d82b      	bhi.n	8004ff6 <__sflush_r+0xb2>
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <__sflush_r+0x104>)
 8004fa0:	40ca      	lsrs	r2, r1
 8004fa2:	07d6      	lsls	r6, r2, #31
 8004fa4:	d527      	bpl.n	8004ff6 <__sflush_r+0xb2>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6062      	str	r2, [r4, #4]
 8004faa:	04d9      	lsls	r1, r3, #19
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	d504      	bpl.n	8004fbc <__sflush_r+0x78>
 8004fb2:	1c42      	adds	r2, r0, #1
 8004fb4:	d101      	bne.n	8004fba <__sflush_r+0x76>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	b903      	cbnz	r3, 8004fbc <__sflush_r+0x78>
 8004fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fbe:	602f      	str	r7, [r5, #0]
 8004fc0:	b1b9      	cbz	r1, 8004ff2 <__sflush_r+0xae>
 8004fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fc6:	4299      	cmp	r1, r3
 8004fc8:	d002      	beq.n	8004fd0 <__sflush_r+0x8c>
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f7ff fb4a 	bl	8004664 <_free_r>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fd4:	e00d      	b.n	8004ff2 <__sflush_r+0xae>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47b0      	blx	r6
 8004fdc:	4602      	mov	r2, r0
 8004fde:	1c50      	adds	r0, r2, #1
 8004fe0:	d1c9      	bne.n	8004f76 <__sflush_r+0x32>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0c6      	beq.n	8004f76 <__sflush_r+0x32>
 8004fe8:	2b1d      	cmp	r3, #29
 8004fea:	d001      	beq.n	8004ff0 <__sflush_r+0xac>
 8004fec:	2b16      	cmp	r3, #22
 8004fee:	d11e      	bne.n	800502e <__sflush_r+0xea>
 8004ff0:	602f      	str	r7, [r5, #0]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e022      	b.n	800503c <__sflush_r+0xf8>
 8004ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffa:	b21b      	sxth	r3, r3
 8004ffc:	e01b      	b.n	8005036 <__sflush_r+0xf2>
 8004ffe:	690f      	ldr	r7, [r1, #16]
 8005000:	2f00      	cmp	r7, #0
 8005002:	d0f6      	beq.n	8004ff2 <__sflush_r+0xae>
 8005004:	0793      	lsls	r3, r2, #30
 8005006:	680e      	ldr	r6, [r1, #0]
 8005008:	bf08      	it	eq
 800500a:	694b      	ldreq	r3, [r1, #20]
 800500c:	600f      	str	r7, [r1, #0]
 800500e:	bf18      	it	ne
 8005010:	2300      	movne	r3, #0
 8005012:	eba6 0807 	sub.w	r8, r6, r7
 8005016:	608b      	str	r3, [r1, #8]
 8005018:	f1b8 0f00 	cmp.w	r8, #0
 800501c:	dde9      	ble.n	8004ff2 <__sflush_r+0xae>
 800501e:	6a21      	ldr	r1, [r4, #32]
 8005020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005022:	4643      	mov	r3, r8
 8005024:	463a      	mov	r2, r7
 8005026:	4628      	mov	r0, r5
 8005028:	47b0      	blx	r6
 800502a:	2800      	cmp	r0, #0
 800502c:	dc08      	bgt.n	8005040 <__sflush_r+0xfc>
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005040:	4407      	add	r7, r0
 8005042:	eba8 0800 	sub.w	r8, r8, r0
 8005046:	e7e7      	b.n	8005018 <__sflush_r+0xd4>
 8005048:	20400001 	.word	0x20400001

0800504c <_fflush_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	690b      	ldr	r3, [r1, #16]
 8005050:	4605      	mov	r5, r0
 8005052:	460c      	mov	r4, r1
 8005054:	b913      	cbnz	r3, 800505c <_fflush_r+0x10>
 8005056:	2500      	movs	r5, #0
 8005058:	4628      	mov	r0, r5
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	b118      	cbz	r0, 8005066 <_fflush_r+0x1a>
 800505e:	6a03      	ldr	r3, [r0, #32]
 8005060:	b90b      	cbnz	r3, 8005066 <_fflush_r+0x1a>
 8005062:	f7ff f8d3 	bl	800420c <__sinit>
 8005066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f3      	beq.n	8005056 <_fflush_r+0xa>
 800506e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005070:	07d0      	lsls	r0, r2, #31
 8005072:	d404      	bmi.n	800507e <_fflush_r+0x32>
 8005074:	0599      	lsls	r1, r3, #22
 8005076:	d402      	bmi.n	800507e <_fflush_r+0x32>
 8005078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800507a:	f7ff faf0 	bl	800465e <__retarget_lock_acquire_recursive>
 800507e:	4628      	mov	r0, r5
 8005080:	4621      	mov	r1, r4
 8005082:	f7ff ff5f 	bl	8004f44 <__sflush_r>
 8005086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005088:	07da      	lsls	r2, r3, #31
 800508a:	4605      	mov	r5, r0
 800508c:	d4e4      	bmi.n	8005058 <_fflush_r+0xc>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	059b      	lsls	r3, r3, #22
 8005092:	d4e1      	bmi.n	8005058 <_fflush_r+0xc>
 8005094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005096:	f7ff fae3 	bl	8004660 <__retarget_lock_release_recursive>
 800509a:	e7dd      	b.n	8005058 <_fflush_r+0xc>

0800509c <__swhatbuf_r>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	460c      	mov	r4, r1
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	2900      	cmp	r1, #0
 80050a6:	b096      	sub	sp, #88	@ 0x58
 80050a8:	4615      	mov	r5, r2
 80050aa:	461e      	mov	r6, r3
 80050ac:	da0d      	bge.n	80050ca <__swhatbuf_r+0x2e>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2340      	movne	r3, #64	@ 0x40
 80050bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050c0:	2000      	movs	r0, #0
 80050c2:	6031      	str	r1, [r6, #0]
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	b016      	add	sp, #88	@ 0x58
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	466a      	mov	r2, sp
 80050cc:	f000 f862 	bl	8005194 <_fstat_r>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	dbec      	blt.n	80050ae <__swhatbuf_r+0x12>
 80050d4:	9901      	ldr	r1, [sp, #4]
 80050d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050de:	4259      	negs	r1, r3
 80050e0:	4159      	adcs	r1, r3
 80050e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050e6:	e7eb      	b.n	80050c0 <__swhatbuf_r+0x24>

080050e8 <__smakebuf_r>:
 80050e8:	898b      	ldrh	r3, [r1, #12]
 80050ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ec:	079d      	lsls	r5, r3, #30
 80050ee:	4606      	mov	r6, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	d507      	bpl.n	8005104 <__smakebuf_r+0x1c>
 80050f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	2301      	movs	r3, #1
 80050fe:	6163      	str	r3, [r4, #20]
 8005100:	b003      	add	sp, #12
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005104:	ab01      	add	r3, sp, #4
 8005106:	466a      	mov	r2, sp
 8005108:	f7ff ffc8 	bl	800509c <__swhatbuf_r>
 800510c:	9f00      	ldr	r7, [sp, #0]
 800510e:	4605      	mov	r5, r0
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	f7fe ff62 	bl	8003fdc <_malloc_r>
 8005118:	b948      	cbnz	r0, 800512e <__smakebuf_r+0x46>
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	059a      	lsls	r2, r3, #22
 8005120:	d4ee      	bmi.n	8005100 <__smakebuf_r+0x18>
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	e7e2      	b.n	80050f4 <__smakebuf_r+0xc>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	6020      	str	r0, [r4, #0]
 8005132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800513e:	b15b      	cbz	r3, 8005158 <__smakebuf_r+0x70>
 8005140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f837 	bl	80051b8 <_isatty_r>
 800514a:	b128      	cbz	r0, 8005158 <__smakebuf_r+0x70>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	431d      	orrs	r5, r3
 800515c:	81a5      	strh	r5, [r4, #12]
 800515e:	e7cf      	b.n	8005100 <__smakebuf_r+0x18>

08005160 <memmove>:
 8005160:	4288      	cmp	r0, r1
 8005162:	b510      	push	{r4, lr}
 8005164:	eb01 0402 	add.w	r4, r1, r2
 8005168:	d902      	bls.n	8005170 <memmove+0x10>
 800516a:	4284      	cmp	r4, r0
 800516c:	4623      	mov	r3, r4
 800516e:	d807      	bhi.n	8005180 <memmove+0x20>
 8005170:	1e43      	subs	r3, r0, #1
 8005172:	42a1      	cmp	r1, r4
 8005174:	d008      	beq.n	8005188 <memmove+0x28>
 8005176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800517a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800517e:	e7f8      	b.n	8005172 <memmove+0x12>
 8005180:	4402      	add	r2, r0
 8005182:	4601      	mov	r1, r0
 8005184:	428a      	cmp	r2, r1
 8005186:	d100      	bne.n	800518a <memmove+0x2a>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800518e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005192:	e7f7      	b.n	8005184 <memmove+0x24>

08005194 <_fstat_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	@ (80051b4 <_fstat_r+0x20>)
 8005198:	2300      	movs	r3, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	602b      	str	r3, [r5, #0]
 80051a2:	f7fc fdb5 	bl	8001d10 <_fstat>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	d102      	bne.n	80051b0 <_fstat_r+0x1c>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	b103      	cbz	r3, 80051b0 <_fstat_r+0x1c>
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	bf00      	nop
 80051b4:	200002bc 	.word	0x200002bc

080051b8 <_isatty_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d06      	ldr	r5, [pc, #24]	@ (80051d4 <_isatty_r+0x1c>)
 80051bc:	2300      	movs	r3, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	f7fc fdb4 	bl	8001d30 <_isatty>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_isatty_r+0x1a>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_isatty_r+0x1a>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	200002bc 	.word	0x200002bc

080051d8 <memcpy>:
 80051d8:	440a      	add	r2, r1
 80051da:	4291      	cmp	r1, r2
 80051dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e0:	d100      	bne.n	80051e4 <memcpy+0xc>
 80051e2:	4770      	bx	lr
 80051e4:	b510      	push	{r4, lr}
 80051e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ee:	4291      	cmp	r1, r2
 80051f0:	d1f9      	bne.n	80051e6 <memcpy+0xe>
 80051f2:	bd10      	pop	{r4, pc}

080051f4 <_realloc_r>:
 80051f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f8:	4607      	mov	r7, r0
 80051fa:	4614      	mov	r4, r2
 80051fc:	460d      	mov	r5, r1
 80051fe:	b921      	cbnz	r1, 800520a <_realloc_r+0x16>
 8005200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005204:	4611      	mov	r1, r2
 8005206:	f7fe bee9 	b.w	8003fdc <_malloc_r>
 800520a:	b92a      	cbnz	r2, 8005218 <_realloc_r+0x24>
 800520c:	f7ff fa2a 	bl	8004664 <_free_r>
 8005210:	4625      	mov	r5, r4
 8005212:	4628      	mov	r0, r5
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	f000 f81a 	bl	8005250 <_malloc_usable_size_r>
 800521c:	4284      	cmp	r4, r0
 800521e:	4606      	mov	r6, r0
 8005220:	d802      	bhi.n	8005228 <_realloc_r+0x34>
 8005222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005226:	d8f4      	bhi.n	8005212 <_realloc_r+0x1e>
 8005228:	4621      	mov	r1, r4
 800522a:	4638      	mov	r0, r7
 800522c:	f7fe fed6 	bl	8003fdc <_malloc_r>
 8005230:	4680      	mov	r8, r0
 8005232:	b908      	cbnz	r0, 8005238 <_realloc_r+0x44>
 8005234:	4645      	mov	r5, r8
 8005236:	e7ec      	b.n	8005212 <_realloc_r+0x1e>
 8005238:	42b4      	cmp	r4, r6
 800523a:	4622      	mov	r2, r4
 800523c:	4629      	mov	r1, r5
 800523e:	bf28      	it	cs
 8005240:	4632      	movcs	r2, r6
 8005242:	f7ff ffc9 	bl	80051d8 <memcpy>
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	f7ff fa0b 	bl	8004664 <_free_r>
 800524e:	e7f1      	b.n	8005234 <_realloc_r+0x40>

08005250 <_malloc_usable_size_r>:
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f18      	subs	r0, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfbc      	itt	lt
 800525a:	580b      	ldrlt	r3, [r1, r0]
 800525c:	18c0      	addlt	r0, r0, r3
 800525e:	4770      	bx	lr

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
