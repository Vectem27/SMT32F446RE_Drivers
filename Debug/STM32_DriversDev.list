
STM32_DriversDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  08003ebc  08003ebc  00004ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b5c  08004b5c  0000608c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b64  08004b64  0000608c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b68  08004b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08004b6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000008c  08004bf8  0000608c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004bf8  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c05c  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  00012118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000144f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bc  00000000  00000000  00014f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022799  00000000  00000000  000156e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec33  00000000  00000000  00037e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb159  00000000  00000000  00046ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  00111c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00114748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ea4 	.word	0x08003ea4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	08003ea4 	.word	0x08003ea4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b57      	ldr	r3, [pc, #348]	@ (80006a8 <MX_GPIO_Init+0x178>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a56      	ldr	r2, [pc, #344]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b54      	ldr	r3, [pc, #336]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b50      	ldr	r3, [pc, #320]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a4f      	ldr	r2, [pc, #316]	@ (80006a8 <MX_GPIO_Init+0x178>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b4d      	ldr	r3, [pc, #308]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b49      	ldr	r3, [pc, #292]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a48      	ldr	r2, [pc, #288]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b46      	ldr	r3, [pc, #280]	@ (80006a8 <MX_GPIO_Init+0x178>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b42      	ldr	r3, [pc, #264]	@ (80006a8 <MX_GPIO_Init+0x178>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <MX_GPIO_Init+0x178>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b3f      	ldr	r3, [pc, #252]	@ (80006a8 <MX_GPIO_Init+0x178>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NKB_OUT_ROW_4_Pin|SD_CS_Pin|LCD_RESET_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2194      	movs	r1, #148	@ 0x94
 80005ba:	483c      	ldr	r0, [pc, #240]	@ (80006ac <MX_GPIO_Init+0x17c>)
 80005bc:	f001 ffb6 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NKB_OUT_ROW_3_Pin|NKB_OUT_ROW_2_Pin|NKB_OUT_ROW_1_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2113      	movs	r1, #19
 80005c4:	483a      	ldr	r0, [pc, #232]	@ (80006b0 <MX_GPIO_Init+0x180>)
 80005c6:	f001 ffb1 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d0:	4837      	ldr	r0, [pc, #220]	@ (80006b0 <MX_GPIO_Init+0x180>)
 80005d2:	f001 ffab 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2140      	movs	r1, #64	@ 0x40
 80005da:	4836      	ldr	r0, [pc, #216]	@ (80006b4 <MX_GPIO_Init+0x184>)
 80005dc:	f001 ffa6 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	482d      	ldr	r0, [pc, #180]	@ (80006ac <MX_GPIO_Init+0x17c>)
 80005f8:	f001 fdec 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NKB_IN_COL_A_Pin NKB_IN_COL_B_Pin */
  GPIO_InitStruct.Pin = NKB_IN_COL_A_Pin|NKB_IN_COL_B_Pin;
 80005fc:	2303      	movs	r3, #3
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4827      	ldr	r0, [pc, #156]	@ (80006ac <MX_GPIO_Init+0x17c>)
 8000610:	f001 fde0 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NKB_OUT_ROW_4_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = NKB_OUT_ROW_4_Pin|SD_CS_Pin;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4820      	ldr	r0, [pc, #128]	@ (80006ac <MX_GPIO_Init+0x17c>)
 800062c:	f001 fdd2 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NKB_OUT_ROW_3_Pin NKB_OUT_ROW_2_Pin NKB_OUT_ROW_1_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = NKB_OUT_ROW_3_Pin|NKB_OUT_ROW_2_Pin|NKB_OUT_ROW_1_Pin|LCD_DC_Pin;
 8000630:	f240 2313 	movw	r3, #531	@ 0x213
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4819      	ldr	r0, [pc, #100]	@ (80006b0 <MX_GPIO_Init+0x180>)
 800064a:	f001 fdc3 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NKB_IN_COL_C_Pin */
  GPIO_InitStruct.Pin = NKB_IN_COL_C_Pin;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NKB_IN_COL_C_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <MX_GPIO_Init+0x184>)
 8000662:	f001 fdb7 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000666:	2380      	movs	r3, #128	@ 0x80
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_GPIO_Init+0x17c>)
 800067e:	f001 fda9 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000682:	2340      	movs	r3, #64	@ 0x40
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <MX_GPIO_Init+0x184>)
 800069a:	f001 fd9b 	bl	80021d4 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400

080006b8 <ili9341_delay>:

#define LCD_CMD   0
#define LCD_DATA  1

static void ili9341_delay(unsigned int time)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    for (unsigned int i = 0; i < time; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e00c      	b.n	80006e0 <ili9341_delay+0x28>
    {
        for (volatile unsigned int j = 0; j < 2000; j++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	e002      	b.n	80006d2 <ili9341_delay+0x1a>
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006d8:	d3f8      	bcc.n	80006cc <ili9341_delay+0x14>
    for (unsigned int i = 0; i < time; i++)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3ee      	bcc.n	80006c6 <ili9341_delay+0xe>
            ;
    }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <ili9341_send>:

// SPI write data or command to LCD (bit-banging)
void ili9341_send(LCD_Handle *LcdHandle, int dc, uint8_t value)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	4613      	mov	r3, r2
 8000702:	71fb      	strb	r3, [r7, #7]

    // DC (Command = 0, Data = 1)
    if (dc == 0)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d109      	bne.n	800071e <ili9341_send+0x28>
    {
        HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin,
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6998      	ldr	r0, [r3, #24]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	b29b      	uxth	r3, r3
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	f001 ff08 	bl	800252c <HAL_GPIO_WritePin>
 800071c:	e008      	b.n	8000730 <ili9341_send+0x3a>
                GPIO_PIN_RESET); // Cmd
    }
    else
    {
        HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin,
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6998      	ldr	r0, [r3, #24]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	b29b      	uxth	r3, r3
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	f001 fefe 	bl	800252c <HAL_GPIO_WritePin>
                GPIO_PIN_SET);   // Data
    }

    // CS Low
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin,
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	b29b      	uxth	r3, r3
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	f001 fef5 	bl	800252c <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    // Send 1 byte via SPI hardware
    HAL_SPI_Transmit(LcdHandle->Init.hspi, &value, 1, HAL_MAX_DELAY);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	1df9      	adds	r1, r7, #7
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	f002 fd78 	bl	8003242 <HAL_SPI_Transmit>

    // CS High
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin,
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6898      	ldr	r0, [r3, #8]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	f001 fee4 	bl	800252c <HAL_GPIO_WritePin>
            GPIO_PIN_SET);

}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <ili9341_reset>:

void ili9341_reset(LCD_Handle *LcdHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LcdHandle->Init.RESET_Port, LcdHandle->Init.RESET_Pin,
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6918      	ldr	r0, [r3, #16]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	b29b      	uxth	r3, r3
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	f001 fed3 	bl	800252c <HAL_GPIO_WritePin>
            GPIO_PIN_RESET); // 0
    HAL_GPIO_WritePin(LcdHandle->Init.RESET_Port, LcdHandle->Init.RESET_Pin,
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6918      	ldr	r0, [r3, #16]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	b29b      	uxth	r3, r3
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	f001 feca 	bl	800252c <HAL_GPIO_WritePin>
            GPIO_PIN_SET);   // 1
    HAL_Delay(5);
 8000798:	2005      	movs	r0, #5
 800079a:	f001 fc11 	bl	8001fc0 <HAL_Delay>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <ili9341_init>:

void ili9341_init(LCD_Handle *LcdHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

    LcdHandle->width = 320;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007b6:	841a      	strh	r2, [r3, #32]
    LcdHandle->height = 240;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	22f0      	movs	r2, #240	@ 0xf0
 80007bc:	845a      	strh	r2, [r3, #34]	@ 0x22
    LcdHandle->Clear = ili9341_clear;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4acf      	ldr	r2, [pc, #828]	@ (8000b00 <ili9341_init+0x358>)
 80007c2:	625a      	str	r2, [r3, #36]	@ 0x24
    LcdHandle->DrawPixelAt = ili9341_draw_pixel_at;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4acf      	ldr	r2, [pc, #828]	@ (8000b04 <ili9341_init+0x35c>)
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
    LcdHandle->PrintChar = ili9341_putchar;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4ace      	ldr	r2, [pc, #824]	@ (8000b08 <ili9341_init+0x360>)
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    LcdHandle->PrintString = ili9341_putstring;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4ace      	ldr	r2, [pc, #824]	@ (8000b0c <ili9341_init+0x364>)
 80007d4:	631a      	str	r2, [r3, #48]	@ 0x30
    LcdHandle->PrintNumber = ili9341_putnumber;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4acd      	ldr	r2, [pc, #820]	@ (8000b10 <ili9341_init+0x368>)
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34

    ili9341_reset(LcdHandle);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffc5 	bl	800076c <ili9341_reset>

    ili9341_send(LcdHandle, LCD_CMD, 0xCB);
 80007e2:	22cb      	movs	r2, #203	@ 0xcb
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff85 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x39);
 80007ec:	2239      	movs	r2, #57	@ 0x39
 80007ee:	2101      	movs	r1, #1
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff80 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x2C);
 80007f6:	222c      	movs	r2, #44	@ 0x2c
 80007f8:	2101      	movs	r1, #1
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff7b 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff76 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x34);
 800080a:	2234      	movs	r2, #52	@ 0x34
 800080c:	2101      	movs	r1, #1
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff71 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x02);
 8000814:	2202      	movs	r2, #2
 8000816:	2101      	movs	r1, #1
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff6c 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xCF);
 800081e:	22cf      	movs	r2, #207	@ 0xcf
 8000820:	2100      	movs	r1, #0
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff67 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff62 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0XC1);
 8000832:	22c1      	movs	r2, #193	@ 0xc1
 8000834:	2101      	movs	r1, #1
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff5d 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X30);
 800083c:	2230      	movs	r2, #48	@ 0x30
 800083e:	2101      	movs	r1, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff58 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE8);
 8000846:	22e8      	movs	r2, #232	@ 0xe8
 8000848:	2100      	movs	r1, #0
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff53 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x85);
 8000850:	2285      	movs	r2, #133	@ 0x85
 8000852:	2101      	movs	r1, #1
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff4e 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff49 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x78);
 8000864:	2278      	movs	r2, #120	@ 0x78
 8000866:	2101      	movs	r1, #1
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff44 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xEA);
 800086e:	22ea      	movs	r2, #234	@ 0xea
 8000870:	2100      	movs	r1, #0
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff3f 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000878:	2200      	movs	r2, #0
 800087a:	2101      	movs	r1, #1
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff3a 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff35 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xED);
 800088c:	22ed      	movs	r2, #237	@ 0xed
 800088e:	2100      	movs	r1, #0
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff30 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x64);
 8000896:	2264      	movs	r2, #100	@ 0x64
 8000898:	2101      	movs	r1, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff2b 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 80008a0:	2203      	movs	r2, #3
 80008a2:	2101      	movs	r1, #1
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff26 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X12);
 80008aa:	2212      	movs	r2, #18
 80008ac:	2101      	movs	r1, #1
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ff21 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0X81);
 80008b4:	2281      	movs	r2, #129	@ 0x81
 80008b6:	2101      	movs	r1, #1
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff1c 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xF7);
 80008be:	22f7      	movs	r2, #247	@ 0xf7
 80008c0:	2100      	movs	r1, #0
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff17 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x20);
 80008c8:	2220      	movs	r2, #32
 80008ca:	2101      	movs	r1, #1
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff12 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC0); // Power control
 80008d2:	22c0      	movs	r2, #192	@ 0xc0
 80008d4:	2100      	movs	r1, #0
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff0d 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x23); // VRH[5:0]
 80008dc:	2223      	movs	r2, #35	@ 0x23
 80008de:	2101      	movs	r1, #1
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff08 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC1); // Power control
 80008e6:	22c1      	movs	r2, #193	@ 0xc1
 80008e8:	2100      	movs	r1, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff03 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x10); // SAP[2:0];BT[3:0]
 80008f0:	2210      	movs	r2, #16
 80008f2:	2101      	movs	r1, #1
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fefe 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC5); // VCM control
 80008fa:	22c5      	movs	r2, #197	@ 0xc5
 80008fc:	2100      	movs	r1, #0
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fef9 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x3e);
 8000904:	223e      	movs	r2, #62	@ 0x3e
 8000906:	2101      	movs	r1, #1
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fef4 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x28);
 800090e:	2228      	movs	r2, #40	@ 0x28
 8000910:	2101      	movs	r1, #1
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff feef 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xC7); // VCM control2
 8000918:	22c7      	movs	r2, #199	@ 0xc7
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff feea 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x86);
 8000922:	2286      	movs	r2, #134	@ 0x86
 8000924:	2101      	movs	r1, #1
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fee5 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x36); // Memory Access Control
 800092c:	2236      	movs	r2, #54	@ 0x36
 800092e:	2100      	movs	r1, #0
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fee0 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x88); // C8
 8000936:	2288      	movs	r2, #136	@ 0x88
 8000938:	2101      	movs	r1, #1
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fedb 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x3A);
 8000940:	223a      	movs	r2, #58	@ 0x3a
 8000942:	2100      	movs	r1, #0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fed6 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x55);
 800094a:	2255      	movs	r2, #85	@ 0x55
 800094c:	2101      	movs	r1, #1
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fed1 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xB1);
 8000954:	22b1      	movs	r2, #177	@ 0xb1
 8000956:	2100      	movs	r1, #0
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fecc 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fec7 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x18);
 8000968:	2218      	movs	r2, #24
 800096a:	2101      	movs	r1, #1
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fec2 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xB6); // Display Function Control
 8000972:	22b6      	movs	r2, #182	@ 0xb6
 8000974:	2100      	movs	r1, #0
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff febd 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 800097c:	2208      	movs	r2, #8
 800097e:	2101      	movs	r1, #1
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff feb8 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x82);
 8000986:	2282      	movs	r2, #130	@ 0x82
 8000988:	2101      	movs	r1, #1
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff feb3 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x27);
 8000990:	2227      	movs	r2, #39	@ 0x27
 8000992:	2101      	movs	r1, #1
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff feae 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xF2); // 3Gamma Function Disable
 800099a:	22f2      	movs	r2, #242	@ 0xf2
 800099c:	2100      	movs	r1, #0
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fea9 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fea4 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x26); // Gamma curve selected
 80009ae:	2226      	movs	r2, #38	@ 0x26
 80009b0:	2100      	movs	r1, #0
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe9f 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x01);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fe9a 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE0); // Set Gamma
 80009c2:	22e0      	movs	r2, #224	@ 0xe0
 80009c4:	2100      	movs	r1, #0
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe95 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 80009cc:	220f      	movs	r2, #15
 80009ce:	2101      	movs	r1, #1
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fe90 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 80009d6:	2231      	movs	r2, #49	@ 0x31
 80009d8:	2101      	movs	r1, #1
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe8b 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x2B);
 80009e0:	222b      	movs	r2, #43	@ 0x2b
 80009e2:	2101      	movs	r1, #1
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fe86 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0C);
 80009ea:	220c      	movs	r2, #12
 80009ec:	2101      	movs	r1, #1
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fe81 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 80009f4:	220e      	movs	r2, #14
 80009f6:	2101      	movs	r1, #1
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe7c 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 80009fe:	2208      	movs	r2, #8
 8000a00:	2101      	movs	r1, #1
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fe77 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x4E);
 8000a08:	224e      	movs	r2, #78	@ 0x4e
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fe72 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0xF1);
 8000a12:	22f1      	movs	r2, #241	@ 0xf1
 8000a14:	2101      	movs	r1, #1
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fe6d 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x37);
 8000a1c:	2237      	movs	r2, #55	@ 0x37
 8000a1e:	2101      	movs	r1, #1
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fe68 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x07);
 8000a26:	2207      	movs	r2, #7
 8000a28:	2101      	movs	r1, #1
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fe63 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x10);
 8000a30:	2210      	movs	r2, #16
 8000a32:	2101      	movs	r1, #1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fe5e 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fe59 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 8000a44:	220e      	movs	r2, #14
 8000a46:	2101      	movs	r1, #1
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fe54 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x09);
 8000a4e:	2209      	movs	r2, #9
 8000a50:	2101      	movs	r1, #1
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fe4f 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fe4a 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0xE1); // Set Gamma
 8000a62:	22e1      	movs	r2, #225	@ 0xe1
 8000a64:	2100      	movs	r1, #0
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fe45 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x00);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fe40 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0E);
 8000a76:	220e      	movs	r2, #14
 8000a78:	2101      	movs	r1, #1
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fe3b 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x14);
 8000a80:	2214      	movs	r2, #20
 8000a82:	2101      	movs	r1, #1
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fe36 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x03);
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fe31 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x11);
 8000a94:	2211      	movs	r2, #17
 8000a96:	2101      	movs	r1, #1
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fe2c 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x07);
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe27 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 8000aa8:	2231      	movs	r2, #49	@ 0x31
 8000aaa:	2101      	movs	r1, #1
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fe22 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0xC1);
 8000ab2:	22c1      	movs	r2, #193	@ 0xc1
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fe1d 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x48);
 8000abc:	2248      	movs	r2, #72	@ 0x48
 8000abe:	2101      	movs	r1, #1
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe18 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x08);
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	2101      	movs	r1, #1
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe13 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe0e 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0C);
 8000ada:	220c      	movs	r2, #12
 8000adc:	2101      	movs	r1, #1
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fe09 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x31);
 8000ae4:	2231      	movs	r2, #49	@ 0x31
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe04 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x36);
 8000aee:	2236      	movs	r2, #54	@ 0x36
 8000af0:	2101      	movs	r1, #1
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fdff 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, 0x0F);
 8000af8:	220f      	movs	r2, #15
 8000afa:	2101      	movs	r1, #1
 8000afc:	e00a      	b.n	8000b14 <ili9341_init+0x36c>
 8000afe:	bf00      	nop
 8000b00:	08000c27 	.word	0x08000c27
 8000b04:	08000bfd 	.word	0x08000bfd
 8000b08:	08000d69 	.word	0x08000d69
 8000b0c:	08000e65 	.word	0x08000e65
 8000b10:	08000ecd 	.word	0x08000ecd
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fdee 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x11); // Sleep out
 8000b1a:	2211      	movs	r2, #17
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fde9 	bl	80006f6 <ili9341_send>
    ili9341_delay(120);
 8000b24:	2078      	movs	r0, #120	@ 0x78
 8000b26:	f7ff fdc7 	bl	80006b8 <ili9341_delay>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000b2a:	222c      	movs	r2, #44	@ 0x2c
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fde1 	bl	80006f6 <ili9341_send>

    ili9341_send(LcdHandle, LCD_CMD, 0x29); // Display on
 8000b34:	2229      	movs	r2, #41	@ 0x29
 8000b36:	2100      	movs	r1, #0
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fddc 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000b3e:	222c      	movs	r2, #44	@ 0x2c
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fdd7 	bl	80006f6 <ili9341_send>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <ili9341_set_xy>:

void ili9341_set_xy(LCD_Handle *LcdHandle, int x, int y)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
    //X
    ili9341_send(LcdHandle, LCD_CMD, 0x2B);
 8000b5c:	222b      	movs	r2, #43	@ 0x2b
 8000b5e:	2100      	movs	r1, #0
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fdc8 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, x >> 8);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	121b      	asrs	r3, r3, #8
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2101      	movs	r1, #1
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff fdc0 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, x & 0xFF);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fdb9 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000b84:	222c      	movs	r2, #44	@ 0x2c
 8000b86:	2100      	movs	r1, #0
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff fdb4 	bl	80006f6 <ili9341_send>

    //Y
    ili9341_send(LcdHandle, LCD_CMD, 0x2A);
 8000b8e:	222a      	movs	r2, #42	@ 0x2a
 8000b90:	2100      	movs	r1, #0
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff fdaf 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, y >> 8);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	121b      	asrs	r3, r3, #8
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fda7 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, y & 0xFF);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	2101      	movs	r1, #1
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff fda0 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_CMD, 0x2c);
 8000bb6:	222c      	movs	r2, #44	@ 0x2c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fd9b 	bl	80006f6 <ili9341_send>
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <ili9341_draw_pixel>:

void ili9341_draw_pixel(LCD_Handle *LcdHandle, uint16_t color)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
    ili9341_send(LcdHandle, LCD_DATA, color >> 8);
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fd88 	bl	80006f6 <ili9341_send>
    ili9341_send(LcdHandle, LCD_DATA, color & 0xFF);
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	2101      	movs	r1, #1
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fd81 	bl	80006f6 <ili9341_send>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <ili9341_draw_pixel_at>:

void ili9341_draw_pixel_at(LCD_Handle *LcdHandle,int x, int y , uint16_t color)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	807b      	strh	r3, [r7, #2]
    ili9341_set_xy(LcdHandle, x, y);
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff ff9e 	bl	8000b50 <ili9341_set_xy>
    ili9341_draw_pixel(LcdHandle, color);
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffd5 	bl	8000bc8 <ili9341_draw_pixel>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <ili9341_clear>:


void ili9341_clear(LCD_Handle *LcdHandle)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    ili9341_fill_screen(LcdHandle, LcdHandle->Init.bg_color);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	8b9b      	ldrh	r3, [r3, #28]
 8000c32:	4619      	mov	r1, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f804 	bl	8000c42 <ili9341_fill_screen>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <ili9341_fill_screen>:

void ili9341_fill_screen(LCD_Handle *LcdHandle, uint16_t color)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b0fc      	sub	sp, #496	@ 0x1f0
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c4c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000c50:	6018      	str	r0, [r3, #0]
 8000c52:	460a      	mov	r2, r1
 8000c54:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c58:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000c5c:	801a      	strh	r2, [r3, #0]

    ili9341_set_xy(LcdHandle, 0, 0);
 8000c5e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c62:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	f7ff ff70 	bl	8000b50 <ili9341_set_xy>

    HAL_GPIO_WritePin(LcdHandle->Init.DC_Port, LcdHandle->Init.DC_Pin, GPIO_PIN_SET); // Write data
 8000c70:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c74:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6998      	ldr	r0, [r3, #24]
 8000c7c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c80:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f001 fc4d 	bl	800252c <HAL_GPIO_WritePin>

    // CS Low
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin, GPIO_PIN_RESET);
 8000c92:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6898      	ldr	r0, [r3, #8]
 8000c9e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ca2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f001 fc3c 	bl	800252c <HAL_GPIO_WritePin>

    uint16_t lineBuffer[240]; // Une ligne de pixels (240 pour ILI9341)
    for (int i = 0; i < 240; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8000cba:	e01f      	b.n	8000cfc <ili9341_fill_screen+0xba>
        lineBuffer[i] = (color >> 8) | (color << 8); // Convertir en Big Endian pour SPI
 8000cbc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cc0:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000cd0:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ce6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8000cea:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000cee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < 240; i++)
 8000cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8000cfc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d00:	2bef      	cmp	r3, #239	@ 0xef
 8000d02:	dddb      	ble.n	8000cbc <ili9341_fill_screen+0x7a>

    for (int y = 0; y < 320; y++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d0a:	e012      	b.n	8000d32 <ili9341_fill_screen+0xf0>
        HAL_SPI_Transmit(LcdHandle->Init.hspi, (uint8_t*) lineBuffer, sizeof(lineBuffer),
 8000d0c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d10:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 0108 	add.w	r1, r7, #8
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000d24:	f002 fa8d 	bl	8003242 <HAL_SPI_Transmit>
    for (int y = 0; y < 320; y++)
 8000d28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d32:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d3a:	dbe7      	blt.n	8000d0c <ili9341_fill_screen+0xca>
                HAL_MAX_DELAY);

    // CS High
    HAL_GPIO_WritePin(LcdHandle->Init.CS_Port, LcdHandle->Init.CS_Pin, GPIO_PIN_SET);
 8000d3c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d40:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6898      	ldr	r0, [r3, #8]
 8000d48:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000d4c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f001 fbe7 	bl	800252c <HAL_GPIO_WritePin>
}
 8000d5e:	bf00      	nop
 8000d60:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <ili9341_putchar>:

// Write character from font set to destination on screen
void ili9341_putchar(LCD_Handle *LcdHandle, int x, int y, int c, int size, int fcolor, int bcolor)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
    int x0;
    int t0, t1, t2, t3, u;

    y = LcdHandle->height - y - FONTHEIGHT;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	3b10      	subs	r3, #16
 8000d82:	607b      	str	r3, [r7, #4]

    x0 = x;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    for (t0 = 0; t0 < FONTWIDTH * 2; t0 += 2)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	e05f      	b.n	8000e4e <ili9341_putchar+0xe6>
    {
        for (t1 = 0; t1 < size; t1++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e055      	b.n	8000e40 <ili9341_putchar+0xd8>
        {
            u = xchar[c][t0 + 1] + (xchar[c][t0] << 8);
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	4831      	ldr	r0, [pc, #196]	@ (8000e60 <ili9341_putchar+0xf8>)
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4403      	add	r3, r0
 8000da6:	440b      	add	r3, r1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	492c      	ldr	r1, [pc, #176]	@ (8000e60 <ili9341_putchar+0xf8>)
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	18ca      	adds	r2, r1, r3
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	4403      	add	r3, r0
 8000dc4:	613b      	str	r3, [r7, #16]
            ili9341_set_xy(LcdHandle, x0, y);
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fec0 	bl	8000b50 <ili9341_set_xy>
            for (t2 = 16; t2 >= 0; t2--)
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	e02b      	b.n	8000e2e <ili9341_putchar+0xc6>
            {
                if (u & (1 << t2))
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa42 f303 	asr.w	r3, r2, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d010      	beq.n	8000e08 <ili9341_putchar+0xa0>
                {
                    for (t3 = 0; t3 < size; t3++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e008      	b.n	8000dfe <ili9341_putchar+0x96>
                    {
                        ili9341_draw_pixel(LcdHandle, fcolor);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff fee8 	bl	8000bc8 <ili9341_draw_pixel>
                    for (t3 = 0; t3 < size; t3++)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dbf2      	blt.n	8000dec <ili9341_putchar+0x84>
 8000e06:	e00f      	b.n	8000e28 <ili9341_putchar+0xc0>
                    }
                }
                else
                {
                    for (t3 = 0; t3 < size; t3++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e008      	b.n	8000e20 <ili9341_putchar+0xb8>
                    {
                        ili9341_draw_pixel(LcdHandle, bcolor);
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fed7 	bl	8000bc8 <ili9341_draw_pixel>
                    for (t3 = 0; t3 < size; t3++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf2      	blt.n	8000e0e <ili9341_putchar+0xa6>
            for (t2 = 16; t2 >= 0; t2--)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dad0      	bge.n	8000dd6 <ili9341_putchar+0x6e>
                    }
                }
            }
            x0++;
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	3301      	adds	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
        for (t1 = 0; t1 < size; t1++)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dba5      	blt.n	8000d94 <ili9341_putchar+0x2c>
    for (t0 = 0; t0 < FONTWIDTH * 2; t0 += 2)
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	2b17      	cmp	r3, #23
 8000e52:	dd9c      	ble.n	8000d8e <ili9341_putchar+0x26>
        }
    }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08003f2c 	.word	0x08003f2c

08000e64 <ili9341_putstring>:

//Print String to LCD
void ili9341_putstring(LCD_Handle *LcdHandle, int x, int y, char *text, int size, int fc, int bc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
    int t1 = 0, x0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]

    x0 = x;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	613b      	str	r3, [r7, #16]
    while (text[t1])
 8000e7a:	e01c      	b.n	8000eb6 <ili9341_putstring+0x52>
    {
        ili9341_putchar(LcdHandle, x0, y, text[t1], size, fc, bc);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff65 	bl	8000d68 <ili9341_putchar>
        x0 += (size * FONTWIDTH);
 8000e9e:	6a3a      	ldr	r2, [r7, #32]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4413      	add	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        t1++;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
    while (text[t1])
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1dc      	bne.n	8000e7c <ili9341_putstring+0x18>
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ili9341_putnumber>:


void ili9341_putnumber(LCD_Handle *LcdHandle, int x, int y, long num, int dec, int lsize, int fc, int bc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]
    char *s = (char*) malloc(16);
 8000eda:	2010      	movs	r0, #16
 8000edc:	f002 fe96 	bl	8003c0c <malloc>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	617b      	str	r3, [r7, #20]
    if (s != NULL)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d015      	beq.n	8000f16 <ili9341_putnumber+0x4a>
    {
        int2asc(num, dec, s, 16);
 8000eea:	2310      	movs	r3, #16
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	6a39      	ldr	r1, [r7, #32]
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f000 f823 	bl	8000f3c <int2asc>
        ili9341_putstring(LcdHandle, x, y, s, lsize, fc, bc);
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ffab 	bl	8000e64 <ili9341_putstring>
        free(s);
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f002 fe84 	bl	8003c1c <free>
    }
    else
    {
        ili9341_putstring(LcdHandle, x, y, (char*) "Error", lsize, fc, bc);
    }
}
 8000f14:	e00b      	b.n	8000f2e <ili9341_putnumber+0x62>
        ili9341_putstring(LcdHandle, x, y, (char*) "Error", lsize, fc, bc);
 8000f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <ili9341_putnumber+0x6c>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff ff9b 	bl	8000e64 <ili9341_putstring>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	08003ebc 	.word	0x08003ebc

08000f3c <int2asc>:
//////////////////////
// STRING FUNCTIONS //
//////////////////////

int int2asc(long num, int dec, char *buf, int buflen)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	@ 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
    int i, c, xp = 0, neg = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
    long n, dd = 1E09;
 8000f52:	4b51      	ldr	r3, [pc, #324]	@ (8001098 <int2asc+0x15c>)
 8000f54:	613b      	str	r3, [r7, #16]

    if (!num)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <int2asc+0x34>
    {
        *buf++ = '0';
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	701a      	strb	r2, [r3, #0]
        *buf = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
        return 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e08c      	b.n	800108a <int2asc+0x14e>
    }

    if (num < 0)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da05      	bge.n	8000f82 <int2asc+0x46>
    {
        neg = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
        n = num * -1;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e001      	b.n	8000f86 <int2asc+0x4a>
    }
    else
    {
        n = num;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	617b      	str	r3, [r7, #20]
    }

    //Fill buffer with \0
    for (i = 0; i < buflen; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8a:	e007      	b.n	8000f9c <int2asc+0x60>
    {
        *(buf + i) = 0;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buflen; i++)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	3301      	adds	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf3      	blt.n	8000f8c <int2asc+0x50>
    }

    c = 9; //Max. number of displayable digits
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	623b      	str	r3, [r7, #32]
    while (dd)
 8000fa8:	e033      	b.n	8001012 <int2asc+0xd6>
    {
        i = n / dd;
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        n = n - i * dd;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]

        *(buf + 9 - c + xp) = i + 48;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	69f9      	ldr	r1, [r7, #28]
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	3309      	adds	r3, #9
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3230      	adds	r2, #48	@ 0x30
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
        dd /= 10;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4a30      	ldr	r2, [pc, #192]	@ (800109c <int2asc+0x160>)
 8000fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe0:	1092      	asrs	r2, r2, #2
 8000fe2:	17db      	asrs	r3, r3, #31
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	613b      	str	r3, [r7, #16]
        if (c == dec && dec)
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d10d      	bne.n	800100c <int2asc+0xd0>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <int2asc+0xd0>
        {
            *(buf + 9 - c + ++xp) = '.';
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	3309      	adds	r3, #9
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	222e      	movs	r2, #46	@ 0x2e
 800100a:	701a      	strb	r2, [r3, #0]
        }
        c--;
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	3b01      	subs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
    while (dd)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1c8      	bne.n	8000faa <int2asc+0x6e>
    }

    //Search for 1st char different from '0'
    i = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (*(buf + i) == 48)
 800101c:	e007      	b.n	800102e <int2asc+0xf2>
    {
        *(buf + i++) = 32;
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	627a      	str	r2, [r7, #36]	@ 0x24
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	2220      	movs	r2, #32
 800102c:	701a      	strb	r2, [r3, #0]
    while (*(buf + i) == 48)
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b30      	cmp	r3, #48	@ 0x30
 8001038:	d0f1      	beq.n	800101e <int2asc+0xe2>
    }

    //Add minus-sign if neccessary
    if (neg)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <int2asc+0x114>
    {
        *(buf + --i) = '-';
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	3b01      	subs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	222d      	movs	r2, #45	@ 0x2d
 800104e:	701a      	strb	r2, [r3, #0]
    }

    //Eleminate leading spaces
    c = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
    while (*(buf + i))
 8001054:	e00d      	b.n	8001072 <int2asc+0x136>
    {
        *(buf + c++) = *(buf + i++);
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	627a      	str	r2, [r7, #36]	@ 0x24
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	441a      	add	r2, r3
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	1c59      	adds	r1, r3, #1
 8001066:	6239      	str	r1, [r7, #32]
 8001068:	4619      	mov	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	440b      	add	r3, r1
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	701a      	strb	r2, [r3, #0]
    while (*(buf + i))
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1eb      	bne.n	8001056 <int2asc+0x11a>
    }
    *(buf + c) = 0;
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

    return c;
 8001088:	6a3b      	ldr	r3, [r7, #32]
}
 800108a:	4618      	mov	r0, r3
 800108c:	372c      	adds	r7, #44	@ 0x2c
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	3b9aca00 	.word	0x3b9aca00
 800109c:	66666667 	.word	0x66666667

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 ff19 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f819 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f7ff fa3f 	bl	8000530 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010b2:	f000 fd49 	bl	8001b48 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 fe75 	bl	8001da4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    Init();
 80010ba:	f000 fbef 	bl	800189c <Init>
    uint32_t last_tick = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        uint32_t current_tick = HAL_GetTick(); // ms
 80010c2:	f000 ff71 	bl	8001fa8 <HAL_GetTick>
 80010c6:	60b8      	str	r0, [r7, #8]
        uint32_t delta_ms = current_tick - last_tick;
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	607b      	str	r3, [r7, #4]

        last_tick = current_tick;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60fb      	str	r3, [r7, #12]
        Loop(delta_ms);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 fce5 	bl	8001aa4 <Loop>
    {
 80010da:	bf00      	nop
 80010dc:	e7f1      	b.n	80010c2 <main+0x22>
	...

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2234      	movs	r2, #52	@ 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fe4a 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <SystemClock_Config+0xd4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	4a29      	ldr	r2, [pc, #164]	@ (80011b4 <SystemClock_Config+0xd4>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	@ 0x40
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <SystemClock_Config+0xd4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <SystemClock_Config+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800112c:	4a22      	ldr	r2, [pc, #136]	@ (80011b8 <SystemClock_Config+0xd8>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <SystemClock_Config+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001154:	2310      	movs	r3, #16
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001158:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800115c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800115e:	2304      	movs	r3, #4
 8001160:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001162:	2302      	movs	r3, #2
 8001164:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fd40 	bl	8002bf4 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800117a:	f000 f81f 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f9e0 	bl	8002560 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011a6:	f000 f809 	bl	80011bc <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	@ 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x8>

080011c8 <NKB_CheckRow>:

#define NKB_KEYS_MASK ((1U << NKB_NUM_KEYS) - 1)


uint8_t NKB_CheckRow(NKB_Handle *hnkb, uint8_t row)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
    switch (row)
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d84a      	bhi.n	8001270 <NKB_CheckRow+0xa8>
 80011da:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <NKB_CheckRow+0x18>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	08001211 	.word	0x08001211
 80011e8:	08001231 	.word	0x08001231
 80011ec:	08001251 	.word	0x08001251
    {
    case 0:
        return HAL_GPIO_ReadPin(hnkb->Init.ROW1_Port, hnkb->Init.ROW1_Pin) == GPIO_PIN_SET;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	4610      	mov	r0, r2
 80011fe:	f001 f97d 	bl	80024fc <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	e030      	b.n	8001272 <NKB_CheckRow+0xaa>
    case 1:
        return HAL_GPIO_ReadPin(hnkb->Init.ROW2_Port, hnkb->Init.ROW2_Pin) == GPIO_PIN_SET;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f001 f96d 	bl	80024fc <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e020      	b.n	8001272 <NKB_CheckRow+0xaa>
    case 2:
        return HAL_GPIO_ReadPin(hnkb->Init.ROW3_Port, hnkb->Init.ROW3_Pin) == GPIO_PIN_SET;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f001 f95d 	bl	80024fc <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e010      	b.n	8001272 <NKB_CheckRow+0xaa>
    case 3:
        return HAL_GPIO_ReadPin(hnkb->Init.ROW4_Port, hnkb->Init.ROW4_Pin) == GPIO_PIN_SET;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	b29b      	uxth	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f001 f94d 	bl	80024fc <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	e000      	b.n	8001272 <NKB_CheckRow+0xaa>
    default:
        return 0;
 8001270:	2300      	movs	r3, #0
    }
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop

0800127c <NKB_CheckCol>:

uint8_t NKB_CheckCol(NKB_Handle *hnkb, uint8_t col)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
    switch (col)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d026      	beq.n	80012dc <NKB_CheckCol+0x60>
 800128e:	2b02      	cmp	r3, #2
 8001290:	dc34      	bgt.n	80012fc <NKB_CheckCol+0x80>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <NKB_CheckCol+0x20>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d010      	beq.n	80012bc <NKB_CheckCol+0x40>
 800129a:	e02f      	b.n	80012fc <NKB_CheckCol+0x80>
    {
    case 0:
        return HAL_GPIO_ReadPin(hnkb->Init.COLA_Port, hnkb->Init.COLA_Pin) == GPIO_PIN_SET;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f001 f927 	bl	80024fc <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e020      	b.n	80012fe <NKB_CheckCol+0x82>
    case 1:
        return HAL_GPIO_ReadPin(hnkb->Init.COLB_Port, hnkb->Init.COLB_Pin) == GPIO_PIN_SET;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	4610      	mov	r0, r2
 80012ca:	f001 f917 	bl	80024fc <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e010      	b.n	80012fe <NKB_CheckCol+0x82>
    case 2:
        return HAL_GPIO_ReadPin(hnkb->Init.COLC_Port, hnkb->Init.COLC_Pin) == GPIO_PIN_SET;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	4610      	mov	r0, r2
 80012ea:	f001 f907 	bl	80024fc <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	e000      	b.n	80012fe <NKB_CheckCol+0x82>
    default:
        return 0;
 80012fc:	2300      	movs	r3, #0
    }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <NKB_SetRow>:

void NKB_SetRow(NKB_Handle *hnkb, uint8_t row, GPIO_PinState pinState)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	70bb      	strb	r3, [r7, #2]
    switch (row)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d832      	bhi.n	8001384 <NKB_SetRow+0x7c>
 800131e:	a201      	add	r2, pc, #4	@ (adr r2, 8001324 <NKB_SetRow+0x1c>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	08001335 	.word	0x08001335
 8001328:	08001349 	.word	0x08001349
 800132c:	0800135d 	.word	0x0800135d
 8001330:	08001371 	.word	0x08001371
    {
    case 0:
        HAL_GPIO_WritePin(hnkb->Init.ROW1_Port, hnkb->Init.ROW1_Pin, pinState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	78ba      	ldrb	r2, [r7, #2]
 8001340:	4619      	mov	r1, r3
 8001342:	f001 f8f3 	bl	800252c <HAL_GPIO_WritePin>
        return;
 8001346:	e01d      	b.n	8001384 <NKB_SetRow+0x7c>
    case 1:
        HAL_GPIO_WritePin(hnkb->Init.ROW2_Port, hnkb->Init.ROW2_Pin, pinState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68d8      	ldr	r0, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	b29b      	uxth	r3, r3
 8001352:	78ba      	ldrb	r2, [r7, #2]
 8001354:	4619      	mov	r1, r3
 8001356:	f001 f8e9 	bl	800252c <HAL_GPIO_WritePin>
        return;
 800135a:	e013      	b.n	8001384 <NKB_SetRow+0x7c>
    case 2:
        HAL_GPIO_WritePin(hnkb->Init.ROW3_Port, hnkb->Init.ROW3_Pin, pinState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6958      	ldr	r0, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	b29b      	uxth	r3, r3
 8001366:	78ba      	ldrb	r2, [r7, #2]
 8001368:	4619      	mov	r1, r3
 800136a:	f001 f8df 	bl	800252c <HAL_GPIO_WritePin>
        return;
 800136e:	e009      	b.n	8001384 <NKB_SetRow+0x7c>
    case 3:
        HAL_GPIO_WritePin(hnkb->Init.ROW4_Port, hnkb->Init.ROW4_Pin, pinState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69d8      	ldr	r0, [r3, #28]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	b29b      	uxth	r3, r3
 800137a:	78ba      	ldrb	r2, [r7, #2]
 800137c:	4619      	mov	r1, r3
 800137e:	f001 f8d5 	bl	800252c <HAL_GPIO_WritePin>
        return;
 8001382:	bf00      	nop
    }
}
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop

0800138c <NKB_SetCol>:

void NKB_SetCol(NKB_Handle *hnkb, uint8_t col, GPIO_PinState pinState)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
 8001398:	4613      	mov	r3, r2
 800139a:	70bb      	strb	r3, [r7, #2]
    switch (col)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d01a      	beq.n	80013d8 <NKB_SetCol+0x4c>
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	dc22      	bgt.n	80013ec <NKB_SetCol+0x60>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <NKB_SetCol+0x24>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d00a      	beq.n	80013c4 <NKB_SetCol+0x38>
 80013ae:	e01d      	b.n	80013ec <NKB_SetCol+0x60>
    {
    case 0:
        HAL_GPIO_WritePin(hnkb->Init.COLA_Port, hnkb->Init.COLA_Pin, pinState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	78ba      	ldrb	r2, [r7, #2]
 80013bc:	4619      	mov	r1, r3
 80013be:	f001 f8b5 	bl	800252c <HAL_GPIO_WritePin>
        return;
 80013c2:	e013      	b.n	80013ec <NKB_SetCol+0x60>
    case 1:
        HAL_GPIO_WritePin(hnkb->Init.COLB_Port, hnkb->Init.COLB_Pin, pinState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	78ba      	ldrb	r2, [r7, #2]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f001 f8ab 	bl	800252c <HAL_GPIO_WritePin>
        return;
 80013d6:	e009      	b.n	80013ec <NKB_SetCol+0x60>
    case 2:
        HAL_GPIO_WritePin(hnkb->Init.COLC_Port, hnkb->Init.COLC_Pin, pinState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	78ba      	ldrb	r2, [r7, #2]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f001 f8a1 	bl	800252c <HAL_GPIO_WritePin>
        return;
 80013ea:	bf00      	nop
    }
}
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <NKB_GetKeyFromRowAndCol>:
/*
 * row: 0-3
 * col: 0-2
 */
uint16_t NKB_GetKeyFromRowAndCol(uint8_t row, uint8_t col)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	460a      	mov	r2, r1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	4613      	mov	r3, r2
 8001400:	71bb      	strb	r3, [r7, #6]
    uint8_t coord = row * 3 + col;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	461a      	mov	r2, r3
 8001406:	0052      	lsls	r2, r2, #1
 8001408:	4413      	add	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	4413      	add	r3, r2
 8001410:	73fb      	strb	r3, [r7, #15]

    switch (coord)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b0b      	cmp	r3, #11
 8001416:	d00c      	beq.n	8001432 <NKB_GetKeyFromRowAndCol+0x40>
 8001418:	2b0b      	cmp	r3, #11
 800141a:	dc0d      	bgt.n	8001438 <NKB_GetKeyFromRowAndCol+0x46>
 800141c:	2b09      	cmp	r3, #9
 800141e:	d002      	beq.n	8001426 <NKB_GetKeyFromRowAndCol+0x34>
 8001420:	2b0a      	cmp	r3, #10
 8001422:	d003      	beq.n	800142c <NKB_GetKeyFromRowAndCol+0x3a>
 8001424:	e008      	b.n	8001438 <NKB_GetKeyFromRowAndCol+0x46>
    {
    case 9:
        return NKB_KEY_ASTERISK;
 8001426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142a:	e00a      	b.n	8001442 <NKB_GetKeyFromRowAndCol+0x50>
    case 10:
        return NKB_KEY_0;
 800142c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001430:	e007      	b.n	8001442 <NKB_GetKeyFromRowAndCol+0x50>
    case 11:
        return NKB_KEY_HASH;
 8001432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001436:	e004      	b.n	8001442 <NKB_GetKeyFromRowAndCol+0x50>
    default:
        return 0x1 << coord;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2201      	movs	r2, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	b29b      	uxth	r3, r3
    }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <NKB_InitRowPin>:

void NKB_InitRowPin(uint32_t Pin, GPIO_TypeDef *Port, NKB_IO io)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	@ 0x28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	4613      	mov	r3, r2
 800145a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = Pin;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	617b      	str	r3, [r7, #20]

    if (io == NKB_ROW_IN_COL_OUT)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <NKB_InitRowPin+0x32>
    {
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147a:	2302      	movs	r3, #2
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e005      	b.n	800148c <NKB_InitRowPin+0x3e>
    }
    else
    {
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001484:	2301      	movs	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    }
    HAL_GPIO_Init(Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f000 fe9e 	bl	80021d4 <HAL_GPIO_Init>
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <NKB_InitColPin>:

void NKB_InitColPin(uint32_t Pin, GPIO_TypeDef *Port, NKB_IO io)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = Pin;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	617b      	str	r3, [r7, #20]

    if (io == NKB_ROW_OUT_COL_IN)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d104      	bne.n	80014d2 <NKB_InitColPin+0x32>
    {
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e005      	b.n	80014de <NKB_InitColPin+0x3e>
    }
    else
    {
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    }
    HAL_GPIO_Init(Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f000 fe75 	bl	80021d4 <HAL_GPIO_Init>
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	@ 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <NKB_Init>:

void NKB_Init(NKB_Handle *hnkb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
    hnkb->PressedKeys = 0x00;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

    NKB_InitColPin(hnkb->Init.COLA_Pin, hnkb->Init.COLA_Port, hnkb->Init.io);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a18      	ldr	r0, [r3, #32]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800150e:	461a      	mov	r2, r3
 8001510:	f7ff ffc6 	bl	80014a0 <NKB_InitColPin>
    NKB_InitColPin(hnkb->Init.COLB_Pin, hnkb->Init.COLB_Port, hnkb->Init.io);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001522:	461a      	mov	r2, r3
 8001524:	f7ff ffbc 	bl	80014a0 <NKB_InitColPin>
    NKB_InitColPin(hnkb->Init.COLC_Pin, hnkb->Init.COLC_Port, hnkb->Init.io);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001536:	461a      	mov	r2, r3
 8001538:	f7ff ffb2 	bl	80014a0 <NKB_InitColPin>

    NKB_InitRowPin(hnkb->Init.ROW1_Pin, hnkb->Init.ROW1_Port, hnkb->Init.io);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800154a:	461a      	mov	r2, r3
 800154c:	f7ff ff7f 	bl	800144e <NKB_InitRowPin>
    NKB_InitRowPin(hnkb->Init.ROW2_Pin, hnkb->Init.ROW2_Port, hnkb->Init.io);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800155e:	461a      	mov	r2, r3
 8001560:	f7ff ff75 	bl	800144e <NKB_InitRowPin>
    NKB_InitRowPin(hnkb->Init.ROW3_Pin, hnkb->Init.ROW3_Port, hnkb->Init.io);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6918      	ldr	r0, [r3, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6959      	ldr	r1, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001572:	461a      	mov	r2, r3
 8001574:	f7ff ff6b 	bl	800144e <NKB_InitRowPin>
    NKB_InitRowPin(hnkb->Init.ROW4_Pin, hnkb->Init.ROW4_Port, hnkb->Init.io);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6998      	ldr	r0, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69d9      	ldr	r1, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001586:	461a      	mov	r2, r3
 8001588:	f7ff ff61 	bl	800144e <NKB_InitRowPin>

    hnkb->ConsumableKeyPressed = 0x00;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hnkb->ConsumableKeyReleased = 0x00;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    hnkb->ConsumedKeyPressed = 0xFFFF;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hnkb->ConsumedKeyReleased = 0xFFFF;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <NKB_Update>:

void NKB_Update(NKB_Handle *hnkb)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	@ 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    uint16_t rawKeys = 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // --- ton scan inchangé, mais écrit dans rawKeys ---
    if (hnkb->Init.io == NKB_ROW_IN_COL_OUT)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d136      	bne.n	800163c <NKB_Update+0x84>
    {
        for (int i = 0; i < 3; ++i)
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d2:	e02f      	b.n	8001634 <NKB_Update+0x7c>
        {
            NKB_SetCol(hnkb, i, GPIO_PIN_SET);
 80015d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fed5 	bl	800138c <NKB_SetCol>

            for (int j = 0; j < 4; ++j)
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e6:	e018      	b.n	800161a <NKB_Update+0x62>
            {
                if (NKB_CheckRow(hnkb, j))
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fdea 	bl	80011c8 <NKB_CheckRow>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <NKB_Update+0x5c>
                    rawKeys |= NKB_GetKeyFromRowAndCol(j, i);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fef4 	bl	80013f2 <NKB_GetKeyFromRowAndCol>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001610:	4313      	orrs	r3, r2
 8001612:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            for (int j = 0; j < 4; ++j)
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	3301      	adds	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	2b03      	cmp	r3, #3
 800161e:	dde3      	ble.n	80015e8 <NKB_Update+0x30>
            }

            NKB_SetCol(hnkb, i, GPIO_PIN_RESET);
 8001620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff feaf 	bl	800138c <NKB_SetCol>
        for (int i = 0; i < 3; ++i)
 800162e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001630:	3301      	adds	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	2b02      	cmp	r3, #2
 8001638:	ddcc      	ble.n	80015d4 <NKB_Update+0x1c>
 800163a:	e03a      	b.n	80016b2 <NKB_Update+0xfa>
        }
    }
    else if (hnkb->Init.io == NKB_ROW_OUT_COL_IN)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001642:	2b01      	cmp	r3, #1
 8001644:	d135      	bne.n	80016b2 <NKB_Update+0xfa>
    {
        for (int i = 0; i < 4; ++i)
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	e02f      	b.n	80016ac <NKB_Update+0xf4>
        {
            NKB_SetRow(hnkb, i, GPIO_PIN_SET);
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fe57 	bl	8001308 <NKB_SetRow>

            for (int j = 0; j < 3; ++j)
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e018      	b.n	8001692 <NKB_Update+0xda>
            {
                if (NKB_CheckCol(hnkb, j))
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fe08 	bl	800127c <NKB_CheckCol>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <NKB_Update+0xd4>
                    rawKeys |= NKB_GetKeyFromRowAndCol(i, j);
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff feb8 	bl	80013f2 <NKB_GetKeyFromRowAndCol>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001688:	4313      	orrs	r3, r2
 800168a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            for (int j = 0; j < 3; ++j)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	3301      	adds	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	2b02      	cmp	r3, #2
 8001696:	dde3      	ble.n	8001660 <NKB_Update+0xa8>
            }

            NKB_SetRow(hnkb, i, GPIO_PIN_RESET);
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe31 	bl	8001308 <NKB_SetRow>
        for (int i = 0; i < 4; ++i)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	ddcc      	ble.n	800164c <NKB_Update+0x94>
        }
    }
    // --- fin du scan brut ---

    // === étape anti-rebond ===
    uint16_t filtered = hnkb->PressedKeys; // base sur dernier état stable
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80016b6:	837b      	strh	r3, [r7, #26]

    for (int k = 0; k < NKB_NUM_KEYS; ++k)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e051      	b.n	8001762 <NKB_Update+0x1aa>
    {
        uint16_t mask = (1U << k);
 80016be:	2201      	movs	r2, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	813b      	strh	r3, [r7, #8]

        if (rawKeys & mask) {
 80016c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80016ca:	893b      	ldrh	r3, [r7, #8]
 80016cc:	4013      	ands	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01f      	beq.n	8001714 <NKB_Update+0x15c>
            if (hnkb->DebounceCounters[k] < NKB_DEBOUNCE_TICKS)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	3348      	adds	r3, #72	@ 0x48
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d80c      	bhi.n	80016fc <NKB_Update+0x144>
                hnkb->DebounceCounters[k]++;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	3348      	adds	r3, #72	@ 0x48
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2d9      	uxtb	r1, r3
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	@ 0x48
 80016f8:	460a      	mov	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]

            if (hnkb->DebounceCounters[k] >= NKB_DEBOUNCE_TICKS)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4413      	add	r3, r2
 8001702:	3348      	adds	r3, #72	@ 0x48
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d928      	bls.n	800175c <NKB_Update+0x1a4>
                filtered |= mask; // validé comme pressé
 800170a:	8b7a      	ldrh	r2, [r7, #26]
 800170c:	893b      	ldrh	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
 8001710:	837b      	strh	r3, [r7, #26]
 8001712:	e023      	b.n	800175c <NKB_Update+0x1a4>
        } else {
            if (hnkb->DebounceCounters[k] > 0)
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4413      	add	r3, r2
 800171a:	3348      	adds	r3, #72	@ 0x48
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00c      	beq.n	800173c <NKB_Update+0x184>
                hnkb->DebounceCounters[k]--;
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4413      	add	r3, r2
 8001728:	3348      	adds	r3, #72	@ 0x48
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3b01      	subs	r3, #1
 800172e:	b2d9      	uxtb	r1, r3
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	4413      	add	r3, r2
 8001736:	3348      	adds	r3, #72	@ 0x48
 8001738:	460a      	mov	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]

            if (hnkb->DebounceCounters[k] == 0)
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	3348      	adds	r3, #72	@ 0x48
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <NKB_Update+0x1a4>
                filtered &= ~mask; // validé comme relâché
 800174a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800174e:	43db      	mvns	r3, r3
 8001750:	b21a      	sxth	r2, r3
 8001752:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001756:	4013      	ands	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	837b      	strh	r3, [r7, #26]
    for (int k = 0; k < NKB_NUM_KEYS; ++k)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b0b      	cmp	r3, #11
 8001766:	ddaa      	ble.n	80016be <NKB_Update+0x106>
        }
    }

    hnkb->PressedKeys = filtered;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	8b7a      	ldrh	r2, [r7, #26]
 800176c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    // === fin anti-rebond ===

    // --- transitions inchangées ---
    const uint16_t maskAll = NKB_KEYS_MASK;
 800176e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001772:	827b      	strh	r3, [r7, #18]

    uint16_t prev = hnkb->LastPressed & maskAll;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001778:	8a7b      	ldrh	r3, [r7, #18]
 800177a:	4013      	ands	r3, r2
 800177c:	823b      	strh	r3, [r7, #16]
    uint16_t now  = hnkb->PressedKeys & maskAll;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	4013      	ands	r3, r2
 8001786:	81fb      	strh	r3, [r7, #14]

    uint16_t newlyPressed  = now & ~prev;
 8001788:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	b21a      	sxth	r2, r3
 8001790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001794:	4013      	ands	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	81bb      	strh	r3, [r7, #12]
    uint16_t newlyReleased = (~now & maskAll) & prev;
 800179a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800179e:	43db      	mvns	r3, r3
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017a6:	4013      	ands	r3, r2
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	817b      	strh	r3, [r7, #10]

    hnkb->ConsumedKeyPressed  &= ~newlyReleased;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hnkb->ConsumedKeyReleased &= ~newlyPressed;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    hnkb->ConsumableKeyPressed  = now & ~hnkb->ConsumedKeyPressed;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	4013      	ands	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hnkb->ConsumableKeyReleased = (~now & maskAll) & ~hnkb->ConsumedKeyReleased;
 8001808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180c:	43db      	mvns	r3, r3
 800180e:	b21a      	sxth	r2, r3
 8001810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001814:	4013      	ands	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800181e:	b21b      	sxth	r3, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	4013      	ands	r3, r2
 8001826:	b21b      	sxth	r3, r3
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    hnkb->LastPressed = now;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	89fa      	ldrh	r2, [r7, #14]
 8001834:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	@ 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <NKB_TryConsumeOnKeyPressed>:
    return (key & hnkb->PressedKeys) != 0x00;
}

// consomme les bits valides dans 'keyMask' qui sont consommables (press)
uint8_t NKB_TryConsumeOnKeyPressed(NKB_Handle *hnkb, uint16_t keyMask)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
    const uint16_t valid = keyMask & hnkb->ConsumableKeyPressed;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	4013      	ands	r3, r2
 8001854:	81fb      	strh	r3, [r7, #14]
    if (valid == 0) return 0;
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <NKB_TryConsumeOnKeyPressed+0x22>
 800185c:	2300      	movs	r3, #0
 800185e:	e017      	b.n	8001890 <NKB_TryConsumeOnKeyPressed+0x52>

    hnkb->ConsumedKeyPressed |= valid;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	4313      	orrs	r3, r2
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hnkb->ConsumableKeyPressed &= ~valid;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001878:	b21a      	sxth	r2, r3
 800187a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187e:	43db      	mvns	r3, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <Init>:
uint8_t MAX_ROW_CHAR;

void MemTest(uint32_t Addr);

void Init(void)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b087      	sub	sp, #28
 80018a0:	af04      	add	r7, sp, #16

    uint8_t row = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]

    /* Lcd screen init */
    {
        hlcd.Init.hspi = &hspi1;
 80018a6:	4b48      	ldr	r3, [pc, #288]	@ (80019c8 <Init+0x12c>)
 80018a8:	4a48      	ldr	r2, [pc, #288]	@ (80019cc <Init+0x130>)
 80018aa:	601a      	str	r2, [r3, #0]
        hlcd.Init.CS_Pin = LCD_CS_Pin;
 80018ac:	4b46      	ldr	r3, [pc, #280]	@ (80019c8 <Init+0x12c>)
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	605a      	str	r2, [r3, #4]
        hlcd.Init.CS_Port = LCD_CS_GPIO_Port;
 80018b2:	4b45      	ldr	r3, [pc, #276]	@ (80019c8 <Init+0x12c>)
 80018b4:	4a46      	ldr	r2, [pc, #280]	@ (80019d0 <Init+0x134>)
 80018b6:	609a      	str	r2, [r3, #8]
        hlcd.Init.DC_Pin = LCD_DC_Pin;
 80018b8:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <Init+0x12c>)
 80018ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018be:	615a      	str	r2, [r3, #20]
        hlcd.Init.DC_Port = LCD_DC_GPIO_Port;
 80018c0:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <Init+0x12c>)
 80018c2:	4a44      	ldr	r2, [pc, #272]	@ (80019d4 <Init+0x138>)
 80018c4:	619a      	str	r2, [r3, #24]
        hlcd.Init.RESET_Pin = LCD_RESET_Pin;
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <Init+0x12c>)
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	60da      	str	r2, [r3, #12]
        hlcd.Init.RESET_Port = LCD_RESET_GPIO_Port;
 80018cc:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <Init+0x12c>)
 80018ce:	4a42      	ldr	r2, [pc, #264]	@ (80019d8 <Init+0x13c>)
 80018d0:	611a      	str	r2, [r3, #16]
        hlcd.Init.bg_color = BLACK;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <Init+0x12c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	839a      	strh	r2, [r3, #28]

        ili9341_init(&hlcd);
 80018d8:	483b      	ldr	r0, [pc, #236]	@ (80019c8 <Init+0x12c>)
 80018da:	f7fe ff65 	bl	80007a8 <ili9341_init>

        hlcd.Clear(&hlcd);
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <Init+0x12c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	4839      	ldr	r0, [pc, #228]	@ (80019c8 <Init+0x12c>)
 80018e4:	4798      	blx	r3
        hlcd.PrintString(&hlcd, 0, 20 * row++, "Hello World!", 1, WHITE, hlcd.Init.bg_color);
 80018e6:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <Init+0x12c>)
 80018e8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	71fa      	strb	r2, [r7, #7]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <Init+0x12c>)
 80018fe:	8b9b      	ldrh	r3, [r3, #28]
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2301      	movs	r3, #1
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <Init+0x140>)
 800190e:	2100      	movs	r1, #0
 8001910:	482d      	ldr	r0, [pc, #180]	@ (80019c8 <Init+0x12c>)
 8001912:	47a0      	blx	r4

        MAX_LINE_CHAR = hlcd.width / FONTWIDTH;
 8001914:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <Init+0x12c>)
 8001916:	8c1b      	ldrh	r3, [r3, #32]
 8001918:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <Init+0x144>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	b29b      	uxth	r3, r3
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <Init+0x148>)
 8001926:	701a      	strb	r2, [r3, #0]
        MAX_ROW_CHAR = hlcd.height / FONTHEIGHT;
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <Init+0x12c>)
 800192a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <Init+0x14c>)
 8001934:	701a      	strb	r2, [r3, #0]
     }
     }*/

    /* Num keyboard init */
    {
        hnkb.Init.COLA_Pin = NKB_IN_COL_A_Pin;
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <Init+0x150>)
 8001938:	2201      	movs	r2, #1
 800193a:	621a      	str	r2, [r3, #32]
        hnkb.Init.COLA_Port = NKB_IN_COL_A_GPIO_Port;
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <Init+0x150>)
 800193e:	4a26      	ldr	r2, [pc, #152]	@ (80019d8 <Init+0x13c>)
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
        hnkb.Init.COLB_Pin = NKB_IN_COL_B_Pin;
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <Init+0x150>)
 8001944:	2202      	movs	r2, #2
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
        hnkb.Init.COLB_Port = NKB_IN_COL_B_GPIO_Port;
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <Init+0x150>)
 800194a:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <Init+0x13c>)
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c
        hnkb.Init.COLC_Pin = NKB_IN_COL_C_Pin;
 800194e:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <Init+0x150>)
 8001950:	2201      	movs	r2, #1
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
        hnkb.Init.COLC_Port = NKB_IN_COL_C_GPIO_Port;
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <Init+0x150>)
 8001956:	4a1e      	ldr	r2, [pc, #120]	@ (80019d0 <Init+0x134>)
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34

        hnkb.Init.ROW1_Pin = NKB_OUT_ROW_1_Pin;
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <Init+0x150>)
 800195c:	2210      	movs	r2, #16
 800195e:	601a      	str	r2, [r3, #0]
        hnkb.Init.ROW1_Port = NKB_OUT_ROW_1_GPIO_Port;
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <Init+0x150>)
 8001962:	4a1c      	ldr	r2, [pc, #112]	@ (80019d4 <Init+0x138>)
 8001964:	605a      	str	r2, [r3, #4]
        hnkb.Init.ROW2_Pin = NKB_OUT_ROW_2_Pin;
 8001966:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <Init+0x150>)
 8001968:	2202      	movs	r2, #2
 800196a:	609a      	str	r2, [r3, #8]
        hnkb.Init.ROW2_Port = NKB_OUT_ROW_2_GPIO_Port;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <Init+0x150>)
 800196e:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <Init+0x138>)
 8001970:	60da      	str	r2, [r3, #12]
        hnkb.Init.ROW3_Pin = NKB_OUT_ROW_3_Pin;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <Init+0x150>)
 8001974:	2201      	movs	r2, #1
 8001976:	611a      	str	r2, [r3, #16]
        hnkb.Init.ROW3_Port = NKB_OUT_ROW_3_GPIO_Port;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <Init+0x150>)
 800197a:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <Init+0x138>)
 800197c:	615a      	str	r2, [r3, #20]
        hnkb.Init.ROW4_Pin = NKB_OUT_ROW_4_Pin;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <Init+0x150>)
 8001980:	2204      	movs	r2, #4
 8001982:	619a      	str	r2, [r3, #24]
        hnkb.Init.ROW4_Port = NKB_OUT_ROW_4_GPIO_Port;
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <Init+0x150>)
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <Init+0x13c>)
 8001988:	61da      	str	r2, [r3, #28]

        hnkb.Init.io = NKB_ROW_IN_COL_OUT;
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <Init+0x150>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        NKB_Init(&hnkb);
 8001992:	4816      	ldr	r0, [pc, #88]	@ (80019ec <Init+0x150>)
 8001994:	f7ff fdad 	bl	80014f2 <NKB_Init>
    }

    hlcd.PrintString(&hlcd, 0, ROW12, "Init finished", 1, WHITE, hlcd.Init.bg_color);
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <Init+0x12c>)
 800199a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <Init+0x12c>)
 800199e:	8b9b      	ldrh	r3, [r3, #28]
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2301      	movs	r3, #1
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <Init+0x154>)
 80019ae:	22de      	movs	r2, #222	@ 0xde
 80019b0:	2100      	movs	r1, #0
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <Init+0x12c>)
 80019b4:	47a0      	blx	r4
    hlcd.Clear(&hlcd);
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <Init+0x12c>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <Init+0x12c>)
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200000a8 	.word	0x200000a8
 80019cc:	20000138 	.word	0x20000138
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800
 80019dc:	08003ec4 	.word	0x08003ec4
 80019e0:	aaaaaaab 	.word	0xaaaaaaab
 80019e4:	20000134 	.word	0x20000134
 80019e8:	20000135 	.word	0x20000135
 80019ec:	200000e0 	.word	0x200000e0
 80019f0:	08003ed4 	.word	0x08003ed4

080019f4 <PrintAtSeek>:
                '9' }, { NKB_KEY_ASTERISK, '*' }, { NKB_KEY_0, '0' }, { NKB_KEY_HASH, '#' } };

uint16_t seek = 0;

void PrintAtSeek(char c)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    uint16_t x = 2 + FONTWIDTH * (seek % MAX_LINE_CHAR);
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <PrintAtSeek+0xa4>)
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a0a:	fb01 f202 	mul.w	r2, r1, r2
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	0052      	lsls	r2, r2, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	81fb      	strh	r3, [r7, #14]
    uint16_t y = 2 + (FONTHEIGHT + 1) * (seek / MAX_LINE_CHAR);
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <PrintAtSeek+0xa4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3302      	adds	r3, #2
 8001a3a:	81bb      	strh	r3, [r7, #12]
    hlcd.PrintChar(&hlcd, x, y, c, 1, WHITE, hlcd.Init.bg_color);
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <PrintAtSeek+0xa8>)
 8001a3e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001a40:	89f9      	ldrh	r1, [r7, #14]
 8001a42:	89ba      	ldrh	r2, [r7, #12]
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <PrintAtSeek+0xa8>)
 8001a48:	8b80      	ldrh	r0, [r0, #28]
 8001a4a:	9002      	str	r0, [sp, #8]
 8001a4c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a50:	9001      	str	r0, [sp, #4]
 8001a52:	2001      	movs	r0, #1
 8001a54:	9000      	str	r0, [sp, #0]
 8001a56:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <PrintAtSeek+0xa8>)
 8001a58:	47a0      	blx	r4

    seek += 1;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a64:	801a      	strh	r2, [r3, #0]

    if (seek >= MAX_LINE_CHAR * MAX_ROW_CHAR)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <PrintAtSeek+0xa4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <PrintAtSeek+0xac>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	db06      	blt.n	8001a8c <PrintAtSeek+0x98>
    {
        seek = 0;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <PrintAtSeek+0xa0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	801a      	strh	r2, [r3, #0]
        hlcd.Clear(&hlcd);
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <PrintAtSeek+0xa8>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <PrintAtSeek+0xa8>)
 8001a8a:	4798      	blx	r3
    }

}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	20000136 	.word	0x20000136
 8001a98:	20000134 	.word	0x20000134
 8001a9c:	200000a8 	.word	0x200000a8
 8001aa0:	20000135 	.word	0x20000135

08001aa4 <Loop>:

void Loop(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    //FPS = 60000 / ticks;

    NKB_Update(&hnkb);
 8001aac:	4822      	ldr	r0, [pc, #136]	@ (8001b38 <Loop+0x94>)
 8001aae:	f7ff fd83 	bl	80015b8 <NKB_Update>

    for (int i = 0; i < NKB_NUM_KEYS; ++i)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e037      	b.n	8001b28 <Loop+0x84>
    {
        if (NKB_TryConsumeOnKeyPressed(&hnkb, keyChars[i].key))
 8001ab8:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <Loop+0x98>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481d      	ldr	r0, [pc, #116]	@ (8001b38 <Loop+0x94>)
 8001ac4:	f7ff febb 	bl	800183e <NKB_TryConsumeOnKeyPressed>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d029      	beq.n	8001b22 <Loop+0x7e>
        {
            if (i == 9)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d113      	bne.n	8001afc <Loop+0x58>
            {
                if (seek > 0)
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <Loop+0x9c>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d022      	beq.n	8001b22 <Loop+0x7e>
                {
                    --seek;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <Loop+0x9c>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <Loop+0x9c>)
 8001ae6:	801a      	strh	r2, [r3, #0]
                    PrintAtSeek(' ');
 8001ae8:	2020      	movs	r0, #32
 8001aea:	f7ff ff83 	bl	80019f4 <PrintAtSeek>
                    --seek;
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <Loop+0x9c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <Loop+0x9c>)
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	e012      	b.n	8001b22 <Loop+0x7e>
                }
            }
            else if (i == 11)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b0b      	cmp	r3, #11
 8001b00:	d107      	bne.n	8001b12 <Loop+0x6e>
            {
                seek = 0;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <Loop+0x9c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]
                hlcd.Clear(&hlcd);
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <Loop+0xa0>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <Loop+0xa0>)
 8001b0e:	4798      	blx	r3
 8001b10:	e007      	b.n	8001b22 <Loop+0x7e>
            }
            else
                PrintAtSeek(keyChars[i].c);
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <Loop+0x98>)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff69 	bl	80019f4 <PrintAtSeek>
    for (int i = 0; i < NKB_NUM_KEYS; ++i)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3301      	adds	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b0b      	cmp	r3, #11
 8001b2c:	ddc4      	ble.n	8001ab8 <Loop+0x14>
        }
    }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000e0 	.word	0x200000e0
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000136 	.word	0x20000136
 8001b44:	200000a8 	.word	0x200000a8

08001b48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b4e:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <MX_SPI1_Init+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b9a:	f001 fac9 	bl	8003130 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ba4:	f7ff fb0a 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000138 	.word	0x20000138
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <HAL_SPI_MspInit+0xa4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d13b      	bne.n	8001c4e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a18      	ldr	r2, [pc, #96]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_SPI_MspInit+0xa8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c0e:	23e0      	movs	r3, #224	@ 0xe0
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <HAL_SPI_MspInit+0xac>)
 8001c2a:	f000 fad3 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c2e:	2340      	movs	r3, #64	@ 0x40
 8001c30:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_SPI_MspInit+0xac>)
 8001c4a:	f000 fac3 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca2:	2007      	movs	r0, #7
 8001ca4:	f000 fa62 	bl	800216c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0a:	f000 f939 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f002 f838 	bl	8003db8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000190 	.word	0x20000190
 8001d7c:	20000328 	.word	0x20000328

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <MX_USART2_UART_Init+0x50>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f001 fc52 	bl	8003684 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001de6:	f7ff f9e9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000194 	.word	0x20000194
 8001df4:	40004400 	.word	0x40004400

08001df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	230c      	movs	r3, #12
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e62:	2307      	movs	r3, #7
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <HAL_UART_MspInit+0x8c>)
 8001e6e:	f000 f9b1 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e8c:	f7ff ff78 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f001 ff85 	bl	8003dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff f8f1 	bl	80010a0 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ecc:	08004b6c 	.word	0x08004b6c
  ldr r2, =_sbss
 8001ed0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ed4:	20000328 	.word	0x20000328

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f931 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fea8 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f93b 	bl	80021ba <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f911 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	@ (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000030 	.word	0x20000030
 8001f78:	20000038 	.word	0x20000038
 8001f7c:	20000034 	.word	0x20000034

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000038 	.word	0x20000038
 8001fa4:	200001dc 	.word	0x200001dc

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200001dc 	.word	0x200001dc

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000038 	.word	0x20000038

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff47 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff5c 	bl	8002050 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb0 	bl	8002128 <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e165      	b.n	80024bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8154 	bne.w	80024b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80ae 	beq.w	80024b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b5d      	ldr	r3, [pc, #372]	@ (80024d4 <HAL_GPIO_Init+0x300>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_GPIO_Init+0x300>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b5a      	ldr	r3, [pc, #360]	@ (80024d4 <HAL_GPIO_Init+0x300>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a58      	ldr	r2, [pc, #352]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4f      	ldr	r2, [pc, #316]	@ (80024dc <HAL_GPIO_Init+0x308>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d025      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4e      	ldr	r2, [pc, #312]	@ (80024e0 <HAL_GPIO_Init+0x30c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01f      	beq.n	80023ea <HAL_GPIO_Init+0x216>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4d      	ldr	r2, [pc, #308]	@ (80024e4 <HAL_GPIO_Init+0x310>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x212>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	@ (80024e8 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	@ (80024ec <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x20a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4a      	ldr	r2, [pc, #296]	@ (80024f0 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x206>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a49      	ldr	r2, [pc, #292]	@ (80024f4 <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x202>
 80023d2:	2306      	movs	r3, #6
 80023d4:	e00c      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00a      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023da:	2305      	movs	r3, #5
 80023dc:	e008      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023de:	2304      	movs	r3, #4
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e004      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x21c>
 80023ee:	2300      	movs	r3, #0
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	f002 0203 	and.w	r2, r2, #3
 80023f6:	0092      	lsls	r2, r2, #2
 80023f8:	4093      	lsls	r3, r2
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002400:	4935      	ldr	r1, [pc, #212]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240e:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002432:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002438:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800245c:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002462:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002486:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b0:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	f67f ae96 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020800 	.word	0x40020800
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40021400 	.word	0x40021400
 80024f4:	40021800 	.word	0x40021800
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7ff fcaa 	bl	8001fa8 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7ff fca6 	bl	8001fa8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f855 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc0a 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	08004b44 	.word	0x08004b44
 8002724:	20000030 	.word	0x20000030
 8002728:	20000034 	.word	0x20000034

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000030 	.word	0x20000030

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08004b54 	.word	0x08004b54

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08004b54 	.word	0x08004b54

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002798:	b0ae      	sub	sp, #184	@ 0xb8
 800279a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ba:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	f200 8206 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x440>
 80027c8:	a201      	add	r2, pc, #4	@ (adr r2, 80027d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002bd5 	.word	0x08002bd5
 80027d8:	08002bd5 	.word	0x08002bd5
 80027dc:	08002bd5 	.word	0x08002bd5
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	08002bd5 	.word	0x08002bd5
 80027e8:	08002bd5 	.word	0x08002bd5
 80027ec:	08002bd5 	.word	0x08002bd5
 80027f0:	08002815 	.word	0x08002815
 80027f4:	08002bd5 	.word	0x08002bd5
 80027f8:	08002bd5 	.word	0x08002bd5
 80027fc:	08002bd5 	.word	0x08002bd5
 8002800:	08002a05 	.word	0x08002a05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4bb9      	ldr	r3, [pc, #740]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x358>)
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280a:	e1e7      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4bb8      	ldr	r3, [pc, #736]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002812:	e1e3      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002820:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d071      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	4bae      	ldr	r3, [pc, #696]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002838:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800284e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002884:	4649      	mov	r1, r9
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4641      	mov	r1, r8
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4641      	mov	r1, r8
 8002894:	1a51      	subs	r1, r2, r1
 8002896:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002898:	4649      	mov	r1, r9
 800289a:	eb63 0301 	sbc.w	r3, r3, r1
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028ac:	4649      	mov	r1, r9
 80028ae:	00cb      	lsls	r3, r1, #3
 80028b0:	4641      	mov	r1, r8
 80028b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b6:	4641      	mov	r1, r8
 80028b8:	00ca      	lsls	r2, r1, #3
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	4622      	mov	r2, r4
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c6:	462b      	mov	r3, r5
 80028c8:	460a      	mov	r2, r1
 80028ca:	eb42 0303 	adc.w	r3, r2, r3
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028dc:	4629      	mov	r1, r5
 80028de:	024b      	lsls	r3, r1, #9
 80028e0:	4621      	mov	r1, r4
 80028e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e6:	4621      	mov	r1, r4
 80028e8:	024a      	lsls	r2, r1, #9
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002900:	f7fd fc80 	bl	8000204 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290e:	e067      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002910:	4b75      	ldr	r3, [pc, #468]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800291c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800292a:	2300      	movs	r3, #0
 800292c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800292e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002932:	4622      	mov	r2, r4
 8002934:	462b      	mov	r3, r5
 8002936:	f04f 0000 	mov.w	r0, #0
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	0159      	lsls	r1, r3, #5
 8002940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002944:	0150      	lsls	r0, r2, #5
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4621      	mov	r1, r4
 800294c:	1a51      	subs	r1, r2, r1
 800294e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002950:	4629      	mov	r1, r5
 8002952:	eb63 0301 	sbc.w	r3, r3, r1
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002964:	4649      	mov	r1, r9
 8002966:	018b      	lsls	r3, r1, #6
 8002968:	4641      	mov	r1, r8
 800296a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296e:	4641      	mov	r1, r8
 8002970:	018a      	lsls	r2, r1, #6
 8002972:	4641      	mov	r1, r8
 8002974:	ebb2 0a01 	subs.w	sl, r2, r1
 8002978:	4649      	mov	r1, r9
 800297a:	eb63 0b01 	sbc.w	fp, r3, r1
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800298a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002992:	4692      	mov	sl, r2
 8002994:	469b      	mov	fp, r3
 8002996:	4623      	mov	r3, r4
 8002998:	eb1a 0303 	adds.w	r3, sl, r3
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	462b      	mov	r3, r5
 80029a0:	eb4b 0303 	adc.w	r3, fp, r3
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c8:	2200      	movs	r2, #0
 80029ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80029cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80029ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029d2:	f7fd fc17 	bl	8000204 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4613      	mov	r3, r2
 80029dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029e0:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a02:	e0eb      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d06b      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a30:	2300      	movs	r3, #0
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4621      	mov	r1, r4
 8002a52:	1a51      	subs	r1, r2, r1
 8002a54:	61b9      	str	r1, [r7, #24]
 8002a56:	4629      	mov	r1, r5
 8002a58:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a6a:	4659      	mov	r1, fp
 8002a6c:	018b      	lsls	r3, r1, #6
 8002a6e:	4651      	mov	r1, sl
 8002a70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a74:	4651      	mov	r1, sl
 8002a76:	018a      	lsls	r2, r1, #6
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7e:	4659      	mov	r1, fp
 8002a80:	eb63 0901 	sbc.w	r9, r3, r1
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	eb18 0303 	adds.w	r3, r8, r3
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	eb49 0303 	adc.w	r3, r9, r3
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab8:	4629      	mov	r1, r5
 8002aba:	024b      	lsls	r3, r1, #9
 8002abc:	4621      	mov	r1, r4
 8002abe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	024a      	lsls	r2, r1, #9
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ad2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ad4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad8:	f7fd fb94 	bl	8000204 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	e065      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x420>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x458>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	2200      	movs	r2, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	4611      	mov	r1, r2
 8002b00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b06:	2300      	movs	r3, #0
 8002b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b0e:	4642      	mov	r2, r8
 8002b10:	464b      	mov	r3, r9
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4641      	mov	r1, r8
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	1a54      	subs	r4, r2, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	eb63 0501 	sbc.w	r5, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ba0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ba2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba6:	f7fd fb2d 	bl	8000204 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x458>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0f1b      	lsrs	r3, r3, #28
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd2:	e003      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	37b8      	adds	r7, #184	@ 0xb8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400

08002bf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e28d      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8083 	beq.w	8002d1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c14:	4b94      	ldr	r3, [pc, #592]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c20:	4b91      	ldr	r3, [pc, #580]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c38:	d00c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d112      	bne.n	8002c6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b84      	ldr	r3, [pc, #528]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x124>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d157      	bne.n	8002d18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e25a      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x90>
 8002c76:	4b7c      	ldr	r3, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xcc>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xb4>
 8002c8e:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a75      	ldr	r2, [pc, #468]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b73      	ldr	r3, [pc, #460]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a72      	ldr	r2, [pc, #456]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xcc>
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f96e 	bl	8001fa8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff f96a 	bl	8001fa8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e21f      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b61      	ldr	r3, [pc, #388]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xdc>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff f95a 	bl	8001fa8 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7ff f956 	bl	8001fa8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e20b      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b57      	ldr	r3, [pc, #348]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x104>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d26:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d32:	4b4d      	ldr	r3, [pc, #308]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b44      	ldr	r3, [pc, #272]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x186>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1d3      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4937      	ldr	r1, [pc, #220]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCC_OscConfig+0x278>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7ff f903 	bl	8001fa8 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7ff f8ff 	bl	8001fa8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1b4      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4925      	ldr	r1, [pc, #148]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_RCC_OscConfig+0x278>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f8e2 	bl	8001fa8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7ff f8de 	bl	8001fa8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e193      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7ff f8c2 	bl	8001fa8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7ff f8be 	bl	8001fa8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e173      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x234>
 8002e46:	e01b      	b.n	8002e80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f8ab 	bl	8001fa8 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	e00e      	b.n	8002e74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7ff f8a7 	bl	8001fa8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d907      	bls.n	8002e74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e15c      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	42470000 	.word	0x42470000
 8002e70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b8a      	ldr	r3, [pc, #552]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ea      	bne.n	8002e56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8097 	beq.w	8002fbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b83      	ldr	r3, [pc, #524]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b7f      	ldr	r3, [pc, #508]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eae:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b79      	ldr	r3, [pc, #484]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7ff f867 	bl	8001fa8 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7ff f863 	bl	8001fa8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e118      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x31e>
 8002f04:	4b66      	ldr	r3, [pc, #408]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x358>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x340>
 8002f1a:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a60      	ldr	r2, [pc, #384]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f26:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x358>
 8002f34:	4b5a      	ldr	r3, [pc, #360]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a59      	ldr	r2, [pc, #356]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f40:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a56      	ldr	r2, [pc, #344]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7ff f828 	bl	8001fa8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7ff f824 	bl	8001fa8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0d7      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCC_OscConfig+0x368>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7ff f812 	bl	8001fa8 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7ff f80e 	bl	8001fa8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0c1      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80ad 	beq.w	8003120 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d060      	beq.n	8003094 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d145      	bne.n	8003066 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b33      	ldr	r3, [pc, #204]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ffe2 	bl	8001fa8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe ffde 	bl	8001fa8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e093      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	491b      	ldr	r1, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe ffb3 	bl	8001fa8 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe ffaf 	bl	8001fa8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e064      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x452>
 8003064:	e05c      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff9c 	bl	8001fa8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe ff98 	bl	8001fa8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04d      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x480>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e040      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ac:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <HAL_RCC_OscConfig+0x538>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d030      	beq.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d129      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d122      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d119      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	3b01      	subs	r3, #1
 80030f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10f      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07b      	b.n	800323a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003152:	d009      	beq.n	8003168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
 800315a:	e005      	b.n	8003168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fd16 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800319e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	ea42 0103 	orr.w	r1, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0104 	and.w	r1, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	f003 0210 	and.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003252:	f7fe fea9 	bl	8001fa8 <HAL_GetTick>
 8003256:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e12a      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0x36>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e122      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_SPI_Transmit+0x48>
 8003286:	2302      	movs	r3, #2
 8003288:	e11b      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d8:	d10f      	bne.n	80032fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b40      	cmp	r3, #64	@ 0x40
 8003306:	d007      	beq.n	8003318 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003320:	d152      	bne.n	80033c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0xee>
 800332a:	8b7b      	ldrh	r3, [r7, #26]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d145      	bne.n	80033bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003354:	e032      	b.n	80033bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d112      	bne.n	800338a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003388:	e018      	b.n	80033bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338a:	f7fe fe0d 	bl	8001fa8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d803      	bhi.n	80033a2 <HAL_SPI_Transmit+0x160>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d102      	bne.n	80033a8 <HAL_SPI_Transmit+0x166>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e082      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1c7      	bne.n	8003356 <HAL_SPI_Transmit+0x114>
 80033c6:	e053      	b.n	8003470 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_Transmit+0x194>
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d147      	bne.n	8003466 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033fc:	e033      	b.n	8003466 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d113      	bne.n	8003434 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003432:	e018      	b.n	8003466 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003434:	f7fe fdb8 	bl	8001fa8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_Transmit+0x20a>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x210>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e02d      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1c6      	bne.n	80033fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f8b1 	bl	80035dc <SPI_EndRxTxTransaction>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034dc:	f7fe fd64 	bl	8001fa8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ec:	f7fe fd5c 	bl	8001fa8 <HAL_GetTick>
 80034f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034f2:	4b39      	ldr	r3, [pc, #228]	@ (80035d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	0d1b      	lsrs	r3, r3, #20
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	e055      	b.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d051      	beq.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800350c:	f7fe fd4c 	bl	8001fa8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13d      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800353a:	d111      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003544:	d004      	beq.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354e:	d107      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800355e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003568:	d10f      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e018      	b.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e002      	b.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d19a      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000030 	.word	0x20000030

080035dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2201      	movs	r2, #1
 80035f0:	2102      	movs	r1, #2
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff ff6a 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e032      	b.n	8003674 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800360e:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <SPI_EndRxTxTransaction+0xa0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <SPI_EndRxTxTransaction+0xa4>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0d5b      	lsrs	r3, r3, #21
 800361a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362c:	d112      	bne.n	8003654 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	2180      	movs	r1, #128	@ 0x80
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff47 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e00f      	b.n	8003674 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3b01      	subs	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b80      	cmp	r3, #128	@ 0x80
 800366c:	d0f2      	beq.n	8003654 <SPI_EndRxTxTransaction+0x78>
 800366e:	e000      	b.n	8003672 <SPI_EndRxTxTransaction+0x96>
        break;
 8003670:	bf00      	nop
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000030 	.word	0x20000030
 8003680:	165e9f81 	.word	0x165e9f81

08003684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e042      	b.n	800371c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe fba4 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f82b 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b0c0      	sub	sp, #256	@ 0x100
 800372a:	af00      	add	r7, sp, #0
 800372c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	ea40 0301 	orr.w	r3, r0, r1
 800374c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	431a      	orrs	r2, r3
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	431a      	orrs	r2, r3
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800377c:	f021 010c 	bic.w	r1, r1, #12
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800378a:	430b      	orrs	r3, r1
 800378c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379e:	6999      	ldr	r1, [r3, #24]
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	ea40 0301 	orr.w	r3, r0, r1
 80037aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b8f      	ldr	r3, [pc, #572]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d005      	beq.n	80037c4 <UART_SetConfig+0xa0>
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b8d      	ldr	r3, [pc, #564]	@ (80039f4 <UART_SetConfig+0x2d0>)
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d104      	bne.n	80037ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe ffd2 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 80037c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037cc:	e003      	b.n	80037d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ce:	f7fe ffb9 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80037d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e0:	f040 810c 	bne.w	80039fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037fe:	415b      	adcs	r3, r3
 8003800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003806:	4621      	mov	r1, r4
 8003808:	eb12 0801 	adds.w	r8, r2, r1
 800380c:	4629      	mov	r1, r5
 800380e:	eb43 0901 	adc.w	r9, r3, r1
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003826:	4690      	mov	r8, r2
 8003828:	4699      	mov	r9, r3
 800382a:	4623      	mov	r3, r4
 800382c:	eb18 0303 	adds.w	r3, r8, r3
 8003830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003834:	462b      	mov	r3, r5
 8003836:	eb49 0303 	adc.w	r3, r9, r3
 800383a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800384a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800384e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003852:	460b      	mov	r3, r1
 8003854:	18db      	adds	r3, r3, r3
 8003856:	653b      	str	r3, [r7, #80]	@ 0x50
 8003858:	4613      	mov	r3, r2
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003868:	f7fc fccc 	bl	8000204 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <UART_SetConfig+0x2d4>)
 8003872:	fba3 2302 	umull	r2, r3, r3, r2
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	011c      	lsls	r4, r3, #4
 800387a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003884:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003894:	415b      	adcs	r3, r3
 8003896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800389c:	4641      	mov	r1, r8
 800389e:	eb12 0a01 	adds.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb43 0b01 	adc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038bc:	4692      	mov	sl, r2
 80038be:	469b      	mov	fp, r3
 80038c0:	4643      	mov	r3, r8
 80038c2:	eb1a 0303 	adds.w	r3, sl, r3
 80038c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ca:	464b      	mov	r3, r9
 80038cc:	eb4b 0303 	adc.w	r3, fp, r3
 80038d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e8:	460b      	mov	r3, r1
 80038ea:	18db      	adds	r3, r3, r3
 80038ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ee:	4613      	mov	r3, r2
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038fe:	f7fc fc81 	bl	8000204 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4611      	mov	r1, r2
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <UART_SetConfig+0x2d4>)
 800390a:	fba3 2301 	umull	r2, r3, r3, r1
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2264      	movs	r2, #100	@ 0x64
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <UART_SetConfig+0x2d4>)
 8003920:	fba3 2302 	umull	r2, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800392c:	441c      	add	r4, r3
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003938:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800393c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003948:	415b      	adcs	r3, r3
 800394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800394c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003950:	4641      	mov	r1, r8
 8003952:	1851      	adds	r1, r2, r1
 8003954:	6339      	str	r1, [r7, #48]	@ 0x30
 8003956:	4649      	mov	r1, r9
 8003958:	414b      	adcs	r3, r1
 800395a:	637b      	str	r3, [r7, #52]	@ 0x34
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003968:	4659      	mov	r1, fp
 800396a:	00cb      	lsls	r3, r1, #3
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003972:	4651      	mov	r1, sl
 8003974:	00ca      	lsls	r2, r1, #3
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	4603      	mov	r3, r0
 800397c:	4642      	mov	r2, r8
 800397e:	189b      	adds	r3, r3, r2
 8003980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003984:	464b      	mov	r3, r9
 8003986:	460a      	mov	r2, r1
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800399c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ba:	f7fc fc23 	bl	8000204 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <UART_SetConfig+0x2d4>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	@ 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	3332      	adds	r3, #50	@ 0x32
 80039d6:	4a08      	ldr	r2, [pc, #32]	@ (80039f8 <UART_SetConfig+0x2d4>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	f003 0207 	and.w	r2, r3, #7
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4422      	add	r2, r4
 80039ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ec:	e106      	b.n	8003bfc <UART_SetConfig+0x4d8>
 80039ee:	bf00      	nop
 80039f0:	40011000 	.word	0x40011000
 80039f4:	40011400 	.word	0x40011400
 80039f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a0e:	4642      	mov	r2, r8
 8003a10:	464b      	mov	r3, r9
 8003a12:	1891      	adds	r1, r2, r2
 8003a14:	6239      	str	r1, [r7, #32]
 8003a16:	415b      	adcs	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1e:	4641      	mov	r1, r8
 8003a20:	1854      	adds	r4, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb43 0501 	adc.w	r5, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	00eb      	lsls	r3, r5, #3
 8003a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a36:	00e2      	lsls	r2, r4, #3
 8003a38:	4614      	mov	r4, r2
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	18e3      	adds	r3, r4, r3
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a44:	464b      	mov	r3, r9
 8003a46:	eb45 0303 	adc.w	r3, r5, r3
 8003a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	008b      	lsls	r3, r1, #2
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a74:	4621      	mov	r1, r4
 8003a76:	008a      	lsls	r2, r1, #2
 8003a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a7c:	f7fc fbc2 	bl	8000204 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	011c      	lsls	r4, r3, #4
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1891      	adds	r1, r2, r2
 8003aa6:	61b9      	str	r1, [r7, #24]
 8003aa8:	415b      	adcs	r3, r3
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	1851      	adds	r1, r2, r1
 8003ab4:	6139      	str	r1, [r7, #16]
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	414b      	adcs	r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	00cb      	lsls	r3, r1, #3
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	00ca      	lsls	r2, r1, #3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4642      	mov	r2, r8
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b08:	4649      	mov	r1, r9
 8003b0a:	008b      	lsls	r3, r1, #2
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b12:	4641      	mov	r1, r8
 8003b14:	008a      	lsls	r2, r1, #2
 8003b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b1a:	f7fc fb73 	bl	8000204 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	4b38      	ldr	r3, [pc, #224]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2264      	movs	r2, #100	@ 0x64
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	1acb      	subs	r3, r1, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	@ 0x32
 8003b38:	4a33      	ldr	r2, [pc, #204]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b44:	441c      	add	r4, r3
 8003b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b96:	464b      	mov	r3, r9
 8003b98:	460a      	mov	r2, r1
 8003b9a:	eb42 0303 	adc.w	r3, r2, r3
 8003b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003baa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bb8:	4649      	mov	r1, r9
 8003bba:	008b      	lsls	r3, r1, #2
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	008a      	lsls	r2, r1, #2
 8003bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bca:	f7fc fb1b 	bl	8000204 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2164      	movs	r1, #100	@ 0x64
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	3332      	adds	r3, #50	@ 0x32
 8003be6:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4422      	add	r2, r4
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c08:	51eb851f 	.word	0x51eb851f

08003c0c <malloc>:
 8003c0c:	4b02      	ldr	r3, [pc, #8]	@ (8003c18 <malloc+0xc>)
 8003c0e:	4601      	mov	r1, r0
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f000 b82d 	b.w	8003c70 <_malloc_r>
 8003c16:	bf00      	nop
 8003c18:	2000003c 	.word	0x2000003c

08003c1c <free>:
 8003c1c:	4b02      	ldr	r3, [pc, #8]	@ (8003c28 <free+0xc>)
 8003c1e:	4601      	mov	r1, r0
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	f000 b8f5 	b.w	8003e10 <_free_r>
 8003c26:	bf00      	nop
 8003c28:	2000003c 	.word	0x2000003c

08003c2c <sbrk_aligned>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003c6c <sbrk_aligned+0x40>)
 8003c30:	460c      	mov	r4, r1
 8003c32:	6831      	ldr	r1, [r6, #0]
 8003c34:	4605      	mov	r5, r0
 8003c36:	b911      	cbnz	r1, 8003c3e <sbrk_aligned+0x12>
 8003c38:	f000 f8ae 	bl	8003d98 <_sbrk_r>
 8003c3c:	6030      	str	r0, [r6, #0]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	f000 f8a9 	bl	8003d98 <_sbrk_r>
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d103      	bne.n	8003c52 <sbrk_aligned+0x26>
 8003c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8003c4e:	4620      	mov	r0, r4
 8003c50:	bd70      	pop	{r4, r5, r6, pc}
 8003c52:	1cc4      	adds	r4, r0, #3
 8003c54:	f024 0403 	bic.w	r4, r4, #3
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d0f8      	beq.n	8003c4e <sbrk_aligned+0x22>
 8003c5c:	1a21      	subs	r1, r4, r0
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f000 f89a 	bl	8003d98 <_sbrk_r>
 8003c64:	3001      	adds	r0, #1
 8003c66:	d1f2      	bne.n	8003c4e <sbrk_aligned+0x22>
 8003c68:	e7ef      	b.n	8003c4a <sbrk_aligned+0x1e>
 8003c6a:	bf00      	nop
 8003c6c:	200001e0 	.word	0x200001e0

08003c70 <_malloc_r>:
 8003c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c74:	1ccd      	adds	r5, r1, #3
 8003c76:	f025 0503 	bic.w	r5, r5, #3
 8003c7a:	3508      	adds	r5, #8
 8003c7c:	2d0c      	cmp	r5, #12
 8003c7e:	bf38      	it	cc
 8003c80:	250c      	movcc	r5, #12
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	4606      	mov	r6, r0
 8003c86:	db01      	blt.n	8003c8c <_malloc_r+0x1c>
 8003c88:	42a9      	cmp	r1, r5
 8003c8a:	d904      	bls.n	8003c96 <_malloc_r+0x26>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	2000      	movs	r0, #0
 8003c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d6c <_malloc_r+0xfc>
 8003c9a:	f000 f869 	bl	8003d70 <__malloc_lock>
 8003c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca2:	461c      	mov	r4, r3
 8003ca4:	bb44      	cbnz	r4, 8003cf8 <_malloc_r+0x88>
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f7ff ffbf 	bl	8003c2c <sbrk_aligned>
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	d158      	bne.n	8003d66 <_malloc_r+0xf6>
 8003cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8003cb8:	4627      	mov	r7, r4
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	d143      	bne.n	8003d46 <_malloc_r+0xd6>
 8003cbe:	2c00      	cmp	r4, #0
 8003cc0:	d04b      	beq.n	8003d5a <_malloc_r+0xea>
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	4639      	mov	r1, r7
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	eb04 0903 	add.w	r9, r4, r3
 8003ccc:	f000 f864 	bl	8003d98 <_sbrk_r>
 8003cd0:	4581      	cmp	r9, r0
 8003cd2:	d142      	bne.n	8003d5a <_malloc_r+0xea>
 8003cd4:	6821      	ldr	r1, [r4, #0]
 8003cd6:	1a6d      	subs	r5, r5, r1
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4630      	mov	r0, r6
 8003cdc:	f7ff ffa6 	bl	8003c2c <sbrk_aligned>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d03a      	beq.n	8003d5a <_malloc_r+0xea>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	442b      	add	r3, r5
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	f8d8 3000 	ldr.w	r3, [r8]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	bb62      	cbnz	r2, 8003d4c <_malloc_r+0xdc>
 8003cf2:	f8c8 7000 	str.w	r7, [r8]
 8003cf6:	e00f      	b.n	8003d18 <_malloc_r+0xa8>
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	1b52      	subs	r2, r2, r5
 8003cfc:	d420      	bmi.n	8003d40 <_malloc_r+0xd0>
 8003cfe:	2a0b      	cmp	r2, #11
 8003d00:	d917      	bls.n	8003d32 <_malloc_r+0xc2>
 8003d02:	1961      	adds	r1, r4, r5
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	6025      	str	r5, [r4, #0]
 8003d08:	bf18      	it	ne
 8003d0a:	6059      	strne	r1, [r3, #4]
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	bf08      	it	eq
 8003d10:	f8c8 1000 	streq.w	r1, [r8]
 8003d14:	5162      	str	r2, [r4, r5]
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f82f 	bl	8003d7c <__malloc_unlock>
 8003d1e:	f104 000b 	add.w	r0, r4, #11
 8003d22:	1d23      	adds	r3, r4, #4
 8003d24:	f020 0007 	bic.w	r0, r0, #7
 8003d28:	1ac2      	subs	r2, r0, r3
 8003d2a:	bf1c      	itt	ne
 8003d2c:	1a1b      	subne	r3, r3, r0
 8003d2e:	50a3      	strne	r3, [r4, r2]
 8003d30:	e7af      	b.n	8003c92 <_malloc_r+0x22>
 8003d32:	6862      	ldr	r2, [r4, #4]
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	bf0c      	ite	eq
 8003d38:	f8c8 2000 	streq.w	r2, [r8]
 8003d3c:	605a      	strne	r2, [r3, #4]
 8003d3e:	e7eb      	b.n	8003d18 <_malloc_r+0xa8>
 8003d40:	4623      	mov	r3, r4
 8003d42:	6864      	ldr	r4, [r4, #4]
 8003d44:	e7ae      	b.n	8003ca4 <_malloc_r+0x34>
 8003d46:	463c      	mov	r4, r7
 8003d48:	687f      	ldr	r7, [r7, #4]
 8003d4a:	e7b6      	b.n	8003cba <_malloc_r+0x4a>
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d1fb      	bne.n	8003d4c <_malloc_r+0xdc>
 8003d54:	2300      	movs	r3, #0
 8003d56:	6053      	str	r3, [r2, #4]
 8003d58:	e7de      	b.n	8003d18 <_malloc_r+0xa8>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f000 f80c 	bl	8003d7c <__malloc_unlock>
 8003d64:	e794      	b.n	8003c90 <_malloc_r+0x20>
 8003d66:	6005      	str	r5, [r0, #0]
 8003d68:	e7d6      	b.n	8003d18 <_malloc_r+0xa8>
 8003d6a:	bf00      	nop
 8003d6c:	200001e4 	.word	0x200001e4

08003d70 <__malloc_lock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	@ (8003d78 <__malloc_lock+0x8>)
 8003d72:	f000 b84b 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000324 	.word	0x20000324

08003d7c <__malloc_unlock>:
 8003d7c:	4801      	ldr	r0, [pc, #4]	@ (8003d84 <__malloc_unlock+0x8>)
 8003d7e:	f000 b846 	b.w	8003e0e <__retarget_lock_release_recursive>
 8003d82:	bf00      	nop
 8003d84:	20000324 	.word	0x20000324

08003d88 <memset>:
 8003d88:	4402      	add	r2, r0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	f803 1b01 	strb.w	r1, [r3], #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <_sbrk_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4d06      	ldr	r5, [pc, #24]	@ (8003db4 <_sbrk_r+0x1c>)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4604      	mov	r4, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	f7fd ffb6 	bl	8001d14 <_sbrk>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_sbrk_r+0x1a>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_sbrk_r+0x1a>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	20000320 	.word	0x20000320

08003db8 <__errno>:
 8003db8:	4b01      	ldr	r3, [pc, #4]	@ (8003dc0 <__errno+0x8>)
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	2000003c 	.word	0x2000003c

08003dc4 <__libc_init_array>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003dfc <__libc_init_array+0x38>)
 8003dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e00 <__libc_init_array+0x3c>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	2600      	movs	r6, #0
 8003dd0:	42a6      	cmp	r6, r4
 8003dd2:	d109      	bne.n	8003de8 <__libc_init_array+0x24>
 8003dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003e04 <__libc_init_array+0x40>)
 8003dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003e08 <__libc_init_array+0x44>)
 8003dd8:	f000 f864 	bl	8003ea4 <_init>
 8003ddc:	1b64      	subs	r4, r4, r5
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	2600      	movs	r6, #0
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d105      	bne.n	8003df2 <__libc_init_array+0x2e>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dec:	4798      	blx	r3
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7ee      	b.n	8003dd0 <__libc_init_array+0xc>
 8003df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df6:	4798      	blx	r3
 8003df8:	3601      	adds	r6, #1
 8003dfa:	e7f2      	b.n	8003de2 <__libc_init_array+0x1e>
 8003dfc:	08004b64 	.word	0x08004b64
 8003e00:	08004b64 	.word	0x08004b64
 8003e04:	08004b64 	.word	0x08004b64
 8003e08:	08004b68 	.word	0x08004b68

08003e0c <__retarget_lock_acquire_recursive>:
 8003e0c:	4770      	bx	lr

08003e0e <__retarget_lock_release_recursive>:
 8003e0e:	4770      	bx	lr

08003e10 <_free_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4605      	mov	r5, r0
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d041      	beq.n	8003e9c <_free_r+0x8c>
 8003e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1c:	1f0c      	subs	r4, r1, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfb8      	it	lt
 8003e22:	18e4      	addlt	r4, r4, r3
 8003e24:	f7ff ffa4 	bl	8003d70 <__malloc_lock>
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <_free_r+0x90>)
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	b933      	cbnz	r3, 8003e3c <_free_r+0x2c>
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	6014      	str	r4, [r2, #0]
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e38:	f7ff bfa0 	b.w	8003d7c <__malloc_unlock>
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d908      	bls.n	8003e52 <_free_r+0x42>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	1821      	adds	r1, r4, r0
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf01      	itttt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	1809      	addeq	r1, r1, r0
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	e7ed      	b.n	8003e2e <_free_r+0x1e>
 8003e52:	461a      	mov	r2, r3
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b10b      	cbz	r3, 8003e5c <_free_r+0x4c>
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d9fa      	bls.n	8003e52 <_free_r+0x42>
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	1850      	adds	r0, r2, r1
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d10b      	bne.n	8003e7c <_free_r+0x6c>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	4401      	add	r1, r0
 8003e68:	1850      	adds	r0, r2, r1
 8003e6a:	4283      	cmp	r3, r0
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	d1e0      	bne.n	8003e32 <_free_r+0x22>
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	4408      	add	r0, r1
 8003e78:	6010      	str	r0, [r2, #0]
 8003e7a:	e7da      	b.n	8003e32 <_free_r+0x22>
 8003e7c:	d902      	bls.n	8003e84 <_free_r+0x74>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	e7d6      	b.n	8003e32 <_free_r+0x22>
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	1821      	adds	r1, r4, r0
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	bf04      	itt	eq
 8003e8c:	6819      	ldreq	r1, [r3, #0]
 8003e8e:	685b      	ldreq	r3, [r3, #4]
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	bf04      	itt	eq
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	6054      	str	r4, [r2, #4]
 8003e9a:	e7ca      	b.n	8003e32 <_free_r+0x22>
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200001e4 	.word	0x200001e4

08003ea4 <_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr

08003eb0 <_fini>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr
